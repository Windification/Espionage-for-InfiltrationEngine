<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBX8F94E26B33294EBDA2AF636A61A6D762">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<string name="Name">BACKDOOR</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="Script" referent="RBX3B91F0ACB1C84022BC34B268F47D09E8">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Main</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{3FA75EA1-A880-4EAB-B6D4-A771191EC02B}</string>
				<ProtectedString name="Source"><![CDATA[-- Infiltration Engine Tooling created by Cishshato
-- BACKDOOR created by Windification

local toolbar = plugin:CreateToolbar("BACKDOOR")

-- BUILDER TOOLS
local VisualizationButton = toolbar:CreateButton("Visualization", "Visualizes props & attributes", "rbxassetid://123138547480339")
local ConvertButton = toolbar:CreateButton("Mesh Convert", "Converts MeshPart to SpecialMesh & PBR Textures", "rbxassetid://82539294862309")

-- UTILITIES
local SetupButton = toolbar:CreateButton("Setup", "Sets up the workspace for InfiltrationEngine", "rbxassetid://13749858361")
local MeadowMapButton = toolbar:CreateButton("Meadow Map", "Shows pathfinding", "rbxassetid://13749858361")
local DoorAccessButton = toolbar:CreateButton("Door Access", "Helpful in setting door parameters", "rbxassetid://72317736899762")
local PropBarrierButton = toolbar:CreateButton("Prop Barrier", "Helps with prop collisions & unintended area preventions", "rbxassetid://119815023380659")
local CombatMapButton = toolbar:CreateButton("Combat Flow Map", "For combat purposes", "rbxassetid://107812298422418")
local ZoneMarkerButton = toolbar:CreateButton("Cell Marker", "Marks cells, and regenerates them", "rbxassetid://97000446266881")
local SectionVisibilityButton =toolbar:CreateButton("Section Visibility", "Blender-based, changes visibility of certain objects", "rbxassetid://8753176416")

-- THE EXPORTER
local ExportButton = toolbar:CreateButton("Exporter", "Exporter", "rbxassetid://86828934223336")

local PluginActive = false

local Visualization = require(script.Parent.Visualization.Main)
local Convert = require(script.Parent.MeshConvert.Main)
local Setup = require(script.Parent.Setup.Main)
local MeadowMap = require(script.Parent.MeadowMap.Main)
local DoorAccess = require(script.Parent.DoorAccess.Main)
local PropBarrier = require(script.Parent.PropBarrier.Main)
local CombatMap = require(script.Parent.CombatMap.Main)
local ZoneMarker = require(script.Parent.ZoneMarker.Main)
local SectionVisibility = require(script.Parent.SectionVisibility.Main)
local Exporter = require(script.Parent.Writing.Main)

local VisibilityToggle = require(script.Parent.Util.VisibilityToggle)

local CurrentPlugin = nil

ExportButton.Click:Connect(function()
	if CurrentPlugin ~= Exporter then
		if CurrentPlugin then
			CurrentPlugin.Clean()
		end
		CurrentPlugin = Exporter
		plugin:Activate(true)
		Exporter.Init(plugin:GetMouse())
	else
		plugin:Deactivate()
	end
end)

VisualizationButton.Click:Connect(function()
	if CurrentPlugin ~= Visualization then
		if CurrentPlugin then
			CurrentPlugin.Clean()
		end
		CurrentPlugin = Visualization
		plugin:Activate(true)
		CurrentPlugin.Init(plugin:GetMouse())
	else
		plugin:Deactivate()
	end
end)

SetupButton.Click:Connect(function()
	plugin:Deactivate()
	Setup.Init()
	plugin:Deactivate()
end)

MeadowMapButton.Click:connect(function()
	if CurrentPlugin ~= MeadowMap then
		if CurrentPlugin then
			CurrentPlugin.Clean()
		end
		CurrentPlugin = MeadowMap
		plugin:Activate(true)
		MeadowMap.Init(plugin:GetMouse())
	else
		plugin:Deactivate()
	end
end)

DoorAccessButton.Click:connect(function()
	if CurrentPlugin ~= DoorAccess then
		if CurrentPlugin then
			CurrentPlugin.Clean()
		end
		CurrentPlugin = DoorAccess
		plugin:Activate(true)
		CurrentPlugin.Init(plugin:GetMouse())
	else
		plugin:Deactivate()
	end
end)

PropBarrierButton.Click:connect(function()
	if CurrentPlugin ~= PropBarrier then
		if CurrentPlugin then
			CurrentPlugin.Clean()
		end
		CurrentPlugin = PropBarrier
		plugin:Activate(true)
		CurrentPlugin.Init(plugin:GetMouse())
	else
		plugin:Deactivate()
	end
end)

CombatMapButton.Click:connect(function()
	if CurrentPlugin ~= CombatMap then
		if CurrentPlugin then
			CurrentPlugin.Clean()
		end
		CurrentPlugin = CombatMap
		plugin:Activate(true)
		CurrentPlugin.Init(plugin:GetMouse())
	else
		plugin:Deactivate()
	end
end)

ZoneMarkerButton.Click:connect(function()
	if CurrentPlugin ~= ZoneMarker then
		if CurrentPlugin then
			CurrentPlugin.Clean()
		end
		CurrentPlugin = ZoneMarker
		plugin:Activate(true)
		CurrentPlugin.Init(plugin:GetMouse())
	else
		plugin:Deactivate()
	end
end)

SectionVisibilityButton.Click:Connect(function()
	plugin:Deactivate()
	SectionVisibility.OpenMenu(plugin)
	plugin:Deactivate()
end)

ConvertButton.Click:Connect(function()
	plugin:Deactivate()
	Convert.Init()
	plugin:Deactivate()
end)

local function disablePlugin()
	Exporter.Clean()
	MeadowMap.Clean()
	DoorAccess.Clean()
	PropBarrier.Clean()
	CombatMap.Clean()
	ZoneMarker.Clean()
	Visualization.Clean()
	VisibilityToggle.HideTempRevealedParts(workspace:FindFirstChild("DebugMission"))
	PluginActive = false
	CurrentPlugin = nil
end


plugin.Unloading:Connect(disablePlugin)
plugin.Deactivation:Connect(disablePlugin)]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBXED022BC3F2424938AD6727C5C028A655">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">Visualization</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX9BB5EF0F2E424270A31317BED3FF8305">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{A97DF8DA-C3AD-4394-82E6-A7B3A976B546}</string>
					<ProtectedString name="Source"><![CDATA[local PhysicsService = game:GetService("PhysicsService")

local COLLISON_GROUP = "PluginNoCollision"

local ModelFolder = game.ReplicatedStorage:FindFirstChild("Assets")
ModelFolder = ModelFolder and ModelFolder:FindFirstChild("Props")

local Button = require(script.Parent.Parent.Util.Button)

local Actor = require(script.Parent.Parent.Util.Actor)
local Create = Actor.Create
local State = Actor.State
local Derived = Actor.Derived
local DerivedTable = Actor.DerivedTable

local CustomPropsFolder = State(false)

local module = {}

local ColorMap = {}
local Prop = {}

-- Position
function module:RepositionProp(part)
	local model = Prop[part]
	model = model and model.Model
	local base = model and model:FindFirstChild("Base", true)

	if not base then
		return
	end

	local diff = part.CFrame * base.CFrame:Inverse()
	for _, p in pairs(model:GetDescendants()) do
		if p:IsA("BasePart") then
			p.CFrame = diff * p.CFrame
		end
	end
end

-- Attribute Visualization

function module:AttributeVisualize(part)
	local model = Prop[part]
	model = model and model.Model
	local base = model and model:FindFirstChild("Base", true)

	if not base then
		return
	end
	
	local attributesReturned = part:GetAttributes()
	local billboardGUI = script.BillboardGui
	local propBillboardGUI = billboardGUI:Clone()
	propBillboardGUI.Parent = part
	
	propBillboardGUI.PropName.Text = part.Name
	
	if attributesReturned then
		for name, value in attributesReturned do
			-- <b>Color0:</b> NOT_FILLED
			local PropInstance = script.AttributeInstance
			local NewInstance = PropInstance:Clone()
			NewInstance.Parent = propBillboardGUI.Frame
			
			if value then
				NewInstance.Text = `<b>{name}:</b> {value}`
			else
				NewInstance.Text = `<b>{name}:</b> NO_VALUE`
			end
		end
	end
end

-- Color

function module:RecolorProp(part)
	local model = Prop[part]
	model = model and model.Model
	if not model then return end

	local index = 0	
	local search = true
	local colors = {}
	while true do
		local colour = part:GetAttribute("Color"..index)
		if colour then
			if typeof(colour) == "string" then
				colour = ColorMap[colour]
			end
			colors["Part"..index] = {
				Color = colour,
				Material = part:GetAttribute("Material"..index)
			}
			index += 1
		else
			break
		end
	end

	for _, p in pairs(model:GetDescendants()) do
		if p:IsA("BasePart") and colors[p.Name] then
			for prop, value in pairs(colors[p.Name]) do
				p[prop] = value
			end
		end
	end
end

-- Add/Remove

function module:AddProp(basePart)
	if not basePart:IsA("BasePart") then
		return
	end

	if Prop[basePart] then
		return
	end

	local storedModel = CustomPropsFolder._Value and CustomPropsFolder._Value:FindFirstChild(basePart.Name) or ModelFolder and ModelFolder:FindFirstChild(basePart.Name)
	if storedModel then
		basePart.Transparency = 1

		local model = storedModel:Clone()
		for _, p in pairs(model:GetDescendants()) do
			if p:IsA("BasePart") then
				p.Archivable = false
				p.CollisionGroup = COLLISON_GROUP
			end
		end

		Prop[basePart] = {
			Model = model,
			Events = {
				basePart:GetPropertyChangedSignal("CFrame"):Connect(function()
					self:RepositionProp(basePart)
				end),
				basePart.AttributeChanged:Connect(function()
					self:AttributeVisualize(basePart)
					self:RecolorProp(basePart)
				end)
			}
		}
		model.Parent = self.Folder
		self:AttributeVisualize(basePart)
		self:RepositionProp(basePart)
		self:RecolorProp(basePart)
	end
end

function module:RemoveProp(basePart)
	if basePart:IsA("BasePart") then
		basePart.Transparency = 0.5
		if basePart["BillboardGui"] then
			basePart.BillboardGui:Destroy()
		end
	end

	local propData = Prop[basePart]
	if propData then
		propData.Model:Destroy()
		for _, event in pairs(propData.Events) do
			event:Disconnect()
		end
		Prop[basePart] = nil
	end
end

module.OverlaysEnabled = false
module.EnabledState = State(false)

function module:SetEnabled()
	if self.Enabled then return end
	self.Enabled = true

	if workspace.DebugMission:FindFirstChild("MissionSetup") then
		local missionData = require(workspace.DebugMission.MissionSetup:Clone())
		ColorMap = missionData.Colors or {}
	end

	module.Folder = workspace:FindFirstChild("PropPreviewModels") or Instance.new("Folder")
	module.Folder.Archivable = false
	module.Folder.Parent = workspace
	module.Folder.Name = "PropPreviewModels"

	PhysicsService:RegisterCollisionGroup(COLLISON_GROUP)
	PhysicsService:CollisionGroupSetCollidable("Default", COLLISON_GROUP, false)

	for _, prop in pairs(workspace.DebugMission.Props:GetDescendants()) do
		module:AddProp(prop)
	end

	local HiddenModel = nil

	module.AddEvents = {
		workspace.DebugMission.Props.ChildAdded:Connect(function(p)
			self:AddProp(p)
		end),
		workspace.DebugMission.Props.ChildRemoved:Connect(function(p)
			self:RemoveProp(p)
		end),
		game.Selection.SelectionChanged:Connect(function()
			if HiddenModel then
				HiddenModel.Parent = workspace
				HiddenModel = nil
			end
			local s = game.Selection:Get()
			if #s == 1 then
				local target = s[1]
				if Prop[target] then
					Prop[target].Model.Parent = nil
					HiddenModel = Prop[target].Model
				elseif target.ClassName == "Model" then
					for base, data in Prop do
						if data.Model == target then
							game.Selection:Set({ base })
						end
					end
				end
			end
		end)
	}
end

local SearchText = State("")
local SearchResults = Derived(function(text, customProps)
	local list = {}
	if ModelFolder then
		for _, item in pairs(ModelFolder:GetChildren()) do
			if string.lower(item.Name):match(string.lower(text)) then
				table.insert(list, item.Name)
			end
		end
		if customProps then
			for _, item in customProps:GetChildren() do
				if not ModelFolder:FindFirstChild(item.Name) and string.lower(item.Name):match(string.lower(text)) then
					table.insert(list, item.Name)
				end	
			end
		end
	end
	return list
end, SearchText, CustomPropsFolder)

function module:SetDisabled()
	if not self.Enabled then return end
	self.Enabled = false

	module.Folder:Destroy()

	for _, e in pairs(self.AddEvents) do
		e:Disconnect()
	end
	self.AddEvents = nil

	PhysicsService:RemoveCollisionGroup(COLLISON_GROUP)

	for _, prop in pairs(workspace.DebugMission.Props:GetChildren()) do
		module:RemoveProp(prop)
	end
end

-- Init/Cleanup
module.Init = function(mouse: PluginMouse)
	if module.Active then return end
	module.Active = true

	CustomPropsFolder:set(workspace:FindFirstChild("DebugMission") and workspace.DebugMission:FindFirstChild("CustomProps") or false)

	local searchBox
	searchBox = Create("TextBox", {
		PlaceholderText = "Search For Prop",
		Text = "",
		Size = UDim2.new(0, 300, 0, 30),
		Position = UDim2.new(0, 50, 0, 80),
		BorderSizePixel = 0,
		Changed = function()
			if searchBox then
				SearchText:set(searchBox.Text)
			end
		end,
		BackgroundColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 0.5,
	})

	module.UI = Create("ScreenGui", {
		Parent = game.StarterGui,
		Archivable = false,
	}, {
		Button({
			Size = UDim2.new(0, 300, 0, 30),
			Enabled = module.EnabledState,
			Position = UDim2.new(0, 50, 0, 50),
			Text = Derived(function(e)
				return e and "Visualize: On" or "Visualize: Off"
			end, module.EnabledState),
			Activated = function()
				module.OverlaysEnabled = not module.OverlaysEnabled
				module.EnabledState:set(module.OverlaysEnabled)
				if module.OverlaysEnabled then
					module:SetEnabled()
				else
					module:SetDisabled()
				end
			end,
		}),
		searchBox,
		Create("ScrollingFrame", {
			Size = UDim2.new(0, 300, 0.8, -100),
			Position = UDim2.new(0, 50, 0.9, 0),
			AnchorPoint = Vector2.new(0, 1),
			AutomaticCanvasSize = Enum.AutomaticSize.Y,
			BackgroundTransparency = 1
		}, {
			Create("UIListLayout", {}),
			DerivedTable(function(index, value)
				return Button({
					Text = value,
					Enabled = State(false),
					Activated = function()
						local model = CustomPropsFolder._Value and CustomPropsFolder._Value:FindFirstChild(value) or ModelFolder[value]
						local base = model and model:FindFirstChild("Base")
						print(`Inserted {value}`)
						if base then 
							local prop = base:Clone()
							prop.Name = value
							prop.Transparency = 0.5
							prop.Parent = workspace.DebugMission.Props
							prop.CFrame = CFrame.new((workspace.CurrentCamera.CFrame * CFrame.new(0, 0, -5)).Position)
						end
					end,
					Size = UDim2.new(1, 0, 0, 30),
				})
			end, SearchResults)
		})
	})
end

module.Clean = function()
	if not module.Active then return end
	module.Active = false

	module.UI:Destroy()
	module.UI = nil	
end

return module

]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="TextLabel" referent="RBXB7675B3E7D4A4CB294DE7941F059FDFB">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">0</int>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="ClipsDescendants">false</bool>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Draggable">false</bool>
						<Font name="FontFace">
							<Family><url>rbxasset://fonts/families/Zekton.json</url></Family>
							<Weight>400</Weight>
							<Style>Normal</Style>
						</Font>
						<bool name="Interactable">true</bool>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<string name="LocalizationMatchIdentifier"></string>
						<string name="LocalizationMatchedSourceText"></string>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">AttributeInstance</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<string name="OpenTypeFeatures"></string>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">true</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<token name="SelectionBehaviorDown">0</token>
						<token name="SelectionBehaviorLeft">0</token>
						<token name="SelectionBehaviorRight">0</token>
						<token name="SelectionBehaviorUp">0</token>
						<bool name="SelectionGroup">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<int name="SelectionOrder">0</int>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0.0500000007</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="TextDirection">0</token>
						<bool name="TextScaled">true</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="UIFlexItem" referent="RBX685D9438E8724A3FAB8CD85EE704A135">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<token name="FlexMode">2</token>
							<float name="GrowRatio">0</float>
							<token name="ItemLineAlignment">0</token>
							<string name="Name">UIFlexItem</string>
							<float name="ShrinkRatio">0</float>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="UIStroke" referent="RBXEA8074CC3FFC47FDA76A8E798801777B">
						<Properties>
							<token name="ApplyStrokeMode">0</token>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="BorderOffset">
								<S>0</S>
								<O>0</O>
							</UDim>
							<token name="BorderStrokePosition">0</token>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color">
								<R>0.24313727</R>
								<G>0.24313727</G>
								<B>0.24313727</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<bool name="Enabled">true</bool>
							<token name="LineJoinMode">0</token>
							<string name="Name">UIStroke</string>
							<int64 name="SourceAssetId">-1</int64>
							<token name="StrokeSizingMode">0</token>
							<BinaryString name="Tags"></BinaryString>
							<float name="Thickness">5</float>
							<float name="Transparency">0</float>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="BillboardGui" referent="RBX2B4F22D18B53482FAEB7D9325FC3CC4A">
					<Properties>
						<bool name="Active">true</bool>
						<Ref name="Adornee">null</Ref>
						<bool name="AlwaysOnTop">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<float name="Brightness">1</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="ClipsDescendants">true</bool>
						<bool name="DefinesCapabilities">false</bool>
						<float name="DistanceLowerLimit">0</float>
						<float name="DistanceStep">0</float>
						<float name="DistanceUpperLimit">-1</float>
						<bool name="Enabled">true</bool>
						<Vector3 name="ExtentsOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<Vector3 name="ExtentsOffsetWorldSpace">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LightInfluence">1</float>
						<float name="MaxDistance">25</float>
						<string name="Name">BillboardGui</string>
						<Ref name="PlayerToHideFrom">null</Ref>
						<bool name="ResetOnSpawn">true</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<token name="SelectionBehaviorDown">0</token>
						<token name="SelectionBehaviorLeft">0</token>
						<token name="SelectionBehaviorRight">0</token>
						<token name="SelectionBehaviorUp">0</token>
						<bool name="SelectionGroup">false</bool>
						<UDim2 name="Size">
							<XS>2</XS>
							<XO>0</XO>
							<YS>3</YS>
							<YO>0</YO>
						</UDim2>
						<Vector2 name="SizeOffset">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<int64 name="SourceAssetId">-1</int64>
						<Vector3 name="StudsOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<Vector3 name="StudsOffsetWorldSpace">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<BinaryString name="Tags"></BinaryString>
						<token name="ZIndexBehavior">1</token>
					</Properties>
					<Item class="TextLabel" referent="RBX01BA342CE572410A8203B20AB1E214D7">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="ClipsDescendants">false</bool>
							<bool name="DefinesCapabilities">false</bool>
							<bool name="Draggable">false</bool>
							<Font name="FontFace">
								<Family><url>rbxasset://fonts/families/Zekton.json</url></Family>
								<Weight>700</Weight>
								<Style>Normal</Style>
							</Font>
							<bool name="Interactable">true</bool>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<string name="LocalizationMatchIdentifier"></string>
							<string name="LocalizationMatchedSourceText"></string>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">PropName</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<string name="OpenTypeFeatures"></string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<token name="SelectionBehaviorDown">0</token>
							<token name="SelectionBehaviorLeft">0</token>
							<token name="SelectionBehaviorRight">0</token>
							<token name="SelectionBehaviorUp">0</token>
							<bool name="SelectionGroup">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<int name="SelectionOrder">0</int>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0.100000001</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">PROP_NAME</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<token name="TextDirection">0</token>
							<bool name="TextScaled">true</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">2</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="UIStroke" referent="RBX5FD3F47EC1DB4E22978EC77D2FD4EF3F">
							<Properties>
								<token name="ApplyStrokeMode">0</token>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<UDim name="BorderOffset">
									<S>0</S>
									<O>0</O>
								</UDim>
								<token name="BorderStrokePosition">0</token>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<Color3 name="Color">
									<R>0.24313727</R>
									<G>0.24313727</G>
									<B>0.24313727</B>
								</Color3>
								<bool name="DefinesCapabilities">false</bool>
								<bool name="Enabled">true</bool>
								<token name="LineJoinMode">0</token>
								<string name="Name">UIStroke</string>
								<int64 name="SourceAssetId">-1</int64>
								<token name="StrokeSizingMode">0</token>
								<BinaryString name="Tags"></BinaryString>
								<float name="Thickness">5</float>
								<float name="Transparency">0</float>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBX665EFF7AD23B45A999503327EDBF161E">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="ClipsDescendants">false</bool>
							<bool name="DefinesCapabilities">false</bool>
							<bool name="Draggable">false</bool>
							<bool name="Interactable">true</bool>
							<int name="LayoutOrder">0</int>
							<string name="Name">Frame</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0.100000001</YS>
								<YO>0</YO>
							</UDim2>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<token name="SelectionBehaviorDown">0</token>
							<token name="SelectionBehaviorLeft">0</token>
							<token name="SelectionBehaviorRight">0</token>
							<token name="SelectionBehaviorUp">0</token>
							<bool name="SelectionGroup">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<int name="SelectionOrder">0</int>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0.899999976</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="UIListLayout" referent="RBXE1DADB5EC49048ABB5605D6C8E1D6EE8">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<token name="FillDirection">1</token>
								<token name="HorizontalAlignment">1</token>
								<token name="HorizontalFlex">0</token>
								<token name="ItemLineAlignment">0</token>
								<string name="Name">UIListLayout</string>
								<UDim name="Padding">
									<S>0</S>
									<O>0</O>
								</UDim>
								<token name="SortOrder">2</token>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<token name="VerticalAlignment">1</token>
								<token name="VerticalFlex">0</token>
								<bool name="Wraps">false</bool>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX23E70E3428AA4FB6A965D993BCDAE3F8">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">MeshConvert</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX1228DC250B6E42608951A85E45AF5816">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{DC57EC7C-3133-46F9-820D-7121BCDED96C}</string>
					<ProtectedString name="Source"><![CDATA[local module = {}

-- Init
module.Init = function()
	if module.Active then return end
	module.Active = true
	
	local Selection = game:GetService('Selection')
	local selected : Selection = Selection:Get()
	local selectionNumber : number = #selected
	
	for i, mesh in selected do
		if mesh:IsA('MeshPart') then
			local PBRColorMap
			if mesh:FindFirstChildWhichIsA("SurfaceAppearance") then
				PBRColorMap = mesh:FindFirstChildWhichIsA("SurfaceAppearance").ColorMap
			else
				warn("No PBR texture")
			end
			local meshName : string = mesh.Name
			local meshSize : Vector3 = mesh.Size
			local meshActSize : Vector3 = mesh.MeshSize
			local meshPosition : Vector3 = mesh.Position
			local meshRotation : Vector3 = mesh.Orientation
			local meshId : string = mesh.MeshId

			local part : Part = Instance.new('Part', workspace)
			local specialMesh : SpecialMesh = Instance.new('SpecialMesh', part)

			part.Name = mesh.Name
			part.Position = meshPosition
			part.Orientation = meshRotation
			part.Size = meshSize

			specialMesh.TextureId = PBRColorMap or nil
			specialMesh.MeshId = meshId
			specialMesh.Scale = Vector3.new(
				meshSize.X/meshActSize.X,
				meshSize.Y/meshActSize.Y,
				meshSize.Z/meshActSize.Z
			)
			mesh:Destroy()
		end
	end
	module.Active = false
end

return module

]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXC1E06791EB3B493AA55070E210DE265E">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">ZoneMarker</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXFE4E1164A48741B4BC14F800C737F08F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">GetZone</string>
					<string name="ScriptGuid">{D4733B04-2987-4AD2-A423-A3D175139947}</string>
					<ProtectedString name="Source"><![CDATA[return function(pos)
	local LevelBase = workspace:FindFirstChild("DebugMission") or workspace:FindFirstChild("Level")
	for _, zone in pairs(LevelBase.Cells:GetChildren()) do
		local floorMatch = zone:FindFirstChild("Floor") == nil
		local roofMatch = false
		
		for _, part in pairs(zone:GetChildren()) do
			local rel = part.CFrame:PointToObjectSpace(pos)
			
			if math.abs(rel.X) <= part.Size.X / 2 and math.abs(rel.Z) <= part.Size.Z / 2 then
				if part.Name == "Roof" and rel.Y <= 0 then
					roofMatch = true
				elseif part.Name == "Floor" and rel.Y >= 0 then
					floorMatch = true
				end
				
				if floorMatch and roofMatch then
					return zone
				end
			end
		end
	end
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXC6C7148BBB1641459749C260909AF73B">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{8524BF85-13C5-4EEB-87AE-330D11FC92E0}</string>
					<ProtectedString name="Source"><![CDATA[local AxisAlign = require(script.Parent.Parent.Util.AxisAlign)
local GetZone = require(script.Parent.GetZone)
local VisibilityToggle = require(script.Parent.Parent.Util.VisibilityToggle)

local UserInputService = game:GetService("UserInputService")

local MAX_PROJECT = 50
local SIZE_PADDING = 1
local POSITION_SINK = 0.3

local CellFolder
local Events = {}
local Ghost
local MouseDown = false

local GhostCfr
local GhostSize
local GhostMax
local GhostMin

local CastParams = RaycastParams.new()
local function GetProjectionDist(basePos, axis)
	local result = workspace:Raycast(basePos, axis * MAX_PROJECT, CastParams)
	if result then
		return (result.Position - basePos).magnitude
	else
		return MAX_PROJECT
	end
end

local function UpdateGhost(basePos, axis0, axis1)
	local z0, z1 = GetProjectionDist(basePos, axis0), GetProjectionDist(basePos, -axis0)
	local x0, x1 = GetProjectionDist(basePos, axis1), GetProjectionDist(basePos, -axis1)
	
	local pos = basePos + axis0 * (z0 - z1) / 2 + axis1 * (x0 - x1) / 2
	GhostCfr = CFrame.new(pos, pos + axis0)
	GhostSize = Vector3.new(x0 + x1, 0.2, z0 + z1)
	GhostMax = GetProjectionDist(basePos, Vector3.new(0, 1, 0))
	GhostMin = GetProjectionDist(basePos, Vector3.new(0, -1, 0))
	
	if GhostMax == MAX_PROJECT then
		GhostMax = GhostMax - GhostMin
	end
	
	Ghost.CFrame = GhostCfr
	Ghost.Size = GhostSize
end

local function ReoptimizeCells()
	print("Reoptimize cell floors")
	local LevelBase = workspace:FindFirstChild("DebugMission") or workspace:FindFirstChild("Level")
	for _, cell in pairs(LevelBase.Cells:GetChildren()) do
		if cell:IsA("Model") then
			local canFit = true
			local floorPart

			local baseRef = cell:FindFirstChild("Roof")
			local minX, maxX = baseRef.Position.X, baseRef.Position.X
			local minZ, maxZ = baseRef.Position.Z, baseRef.Position.Z

			for _, part in pairs(cell:GetChildren()) do
				if part.Name=="Roof" then
					for xo = -1, 1, 2 do
						for zo = -1, 1, 2 do
							local ref = part.CFrame:pointToWorldSpace(Vector3.new(part.Size.X * 0.5 * xo, 0, part.Size.Z * 0.5 * zo))
							minX = math.min(minX, ref.X)
							maxX = math.max(maxX, ref.X)
							minZ = math.min(minZ, ref.Z)
							maxZ = math.max(maxZ, ref.Z)
						end
					end
				elseif part.Name=="Floor" then
					if floorPart==nil then
						floorPart = part
					else
						canFit = false
						break
					end
				end
			end

			if floorPart and canFit then
				floorPart.Size = Vector3.new(maxX - minX, floorPart.Size.Y, maxZ - minZ)
				floorPart.CFrame = CFrame.new((maxX + minX)/2, floorPart.Position.Y, (maxZ + minZ)/2)
			end
		end
	end
end

local function ShowCells()
	for _, cell in pairs(CellFolder:GetChildren()) do
		for _, part in pairs(cell:GetChildren()) do
			part.Size = Vector3.new(part.Size.X, 1, part.Size.Z)
			part.Transparency = 0.5
			part.Locked = false
		end
	end
end

local function ShowLinks()
	for _, cell in pairs(CellFolder:GetChildren()) do
		if cell.Name ~= "Links" then continue end
		for _, part in pairs(cell:GetChildren()) do
			part.Size = Vector3.new(part.Size.X, 1, part.Size.Z)
			part.Transparency = 0.5
			part.Locked = false
		end
	end
end

local function HideCells()
	for _, cell in pairs(CellFolder:GetChildren()) do
		for _, part in pairs(cell:GetChildren()) do
			part.Size = Vector3.new(part.Size.X, 0, part.Size.Z)
			part.Transparency = 1
			part.Locked = true
		end
	end
end

local function HideNamedCells()
	for _, cell in pairs(CellFolder:GetChildren()) do
		if cell.Name ~= "Default" then
			for _, part in pairs(cell:GetChildren()) do
				part.Size = Vector3.new(part.Size.X, 0, part.Size.Z)
				part.Transparency = 1
				part.Locked = true
			end
		end
	end
end

local function hashName(name)
	if name == "Default" then
		return Color3.new(0, 0, 0)
	end
	
	local h = 5^7
	local n = 0
	for i = 1, #name do
		n = (n * 257 + string.byte(name, i, i)) % h 
	end
	local color = Color3.fromHSV((n % 1000) / 1000, 0.5, 0.5)
	return color
end

local function RecolorCells()
	for _, cell in pairs(CellFolder:GetChildren()) do
		local color = hashName(cell.Name)
		for _, part in pairs(cell:GetChildren()) do
			part.Color = color
		end
	end
end

local function CreateCell(mousePos)
	local cellModel = GetZone(mousePos)
	local addFloor = true
	
	if cellModel then
		addFloor = false
		print("Add to:", cellModel:GetFullName())
	else
		local LevelBase = workspace:FindFirstChild("DebugMission") or workspace:FindFirstChild("Level")
		print("Create new cell")
		cellModel = Instance.new("Model")
		cellModel.Name = "Default"
		cellModel.Parent = LevelBase.Cells
	end
	
	local roof = Ghost:Clone()
	roof.Size = roof.Size + Vector3.new(SIZE_PADDING * 2, 0.8, SIZE_PADDING * 2)
	roof.CFrame = GhostCfr * CFrame.new(0, GhostMax + POSITION_SINK, 0)
	roof.Name = "Roof"
	roof.Parent = cellModel
	roof.Anchored = true
	
	if addFloor then
		local floor = roof:Clone()
		floor.Name = "Floor"
		floor.CFrame = GhostCfr * CFrame.new(0, -GhostMin - POSITION_SINK, 0)
		floor.Parent = cellModel
		floor.Anchored = true
	else
		ReoptimizeCells()
	end
end

return {
	Init = function(mouse)
		if not workspace:FindFirstChild("Level") then
			local l = Instance.new("Folder")
			l.Name = "Level"
			l.Parent = workspace
		end
		local LevelBase = workspace:FindFirstChild("DebugMission") or workspace:FindFirstChild("Level")
		if not LevelBase:FindFirstChild("Cells") then
			local c = Instance.new("Folder")
			c.Name = "Cells"
			c.Parent = LevelBase
		end
		
		Ghost = Instance.new("Part")
		Ghost.Color = Color3.new(0, 0, 0)
		Ghost.Transparency = 0.5
		Ghost.Parent = LevelBase.Cells
		
		CellFolder = LevelBase.Cells
		mouse.TargetFilter = CellFolder
		CastParams.FilterType = Enum.RaycastFilterType.Blacklist
		CastParams.FilterDescendantsInstances = { CellFolder }
		
		Events[1] = game["Run Service"].RenderStepped:connect(function()
			if mouse.Target and not MouseDown then
				local v0, v1 = AxisAlign.CameraAlign(mouse.Target.CFrame)
				local origin = mouse.Hit.p - mouse.UnitRay.Direction * 0.5
				UpdateGhost(origin, v0, v1)
			end
		end)
		
		Events[2] = mouse.Button1Up:connect(function()
			CreateCell(mouse.Hit.p)
			MouseDown = false
		end)

		Events[3] = mouse.Button1Down:connect(function()
			MouseDown = true
		end)
		
		Events[3] = UserInputService.InputBegan:connect(function(io)
			if io.KeyCode == Enum.KeyCode.T then
				ReoptimizeCells()
			elseif io.KeyCode == Enum.KeyCode.G then
				ShowCells()
			elseif io.KeyCode == Enum.KeyCode.H then
				HideCells()
			elseif io.KeyCode == Enum.KeyCode.J then
				HideNamedCells()
			elseif io.KeyCode == Enum.KeyCode.K then
				RecolorCells()
			elseif io.KeyCode == Enum.KeyCode.L then
				ShowLinks()
			end
		end)

		VisibilityToggle.TempReveal(workspace.DebugMission.Cells)
		
		print([[T - Reoptimize Cell Floors
		G - Show All Cells
		H - Hide All Cells
		J - Hide Named Cells
		K - Recolor Cells
		L - Show Links]])
	end,
	Clean = function()
		if Events then
			for _, e in pairs(Events) do
				e:Disconnect()
			end
			Events = {}
		end
		if Ghost then
			Ghost:Destroy()
			Ghost = nil
		end
	end,
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX22584C85B02F4A6E8DE9C5FA862F1596">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">SectionVisibility</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX5358593D57144BFDB100F92FBC4E70CB">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{4DB4F14B-FCF5-4CBE-92D1-1EE89A4418BC}</string>
					<ProtectedString name="Source"><![CDATA[local VisibilityToggle = require(script.Parent.Parent.Util.VisibilityToggle)
local sections = { "Barrier", "Cells", "Nodes", "LoudSpawns", "CombatFlowMap" }

local cache = {}

return {
	OpenMenu = function(plugin)
		local menu = cache.Menu or plugin:CreatePluginMenu("SectionVisibilityMenu")
		cache.Menu = menu
		menu:Clear()

		for _, section in sections do
			local instance = workspace:FindFirstChild("DebugMission") and workspace.DebugMission:FindFirstChild(section)
			if not instance then
				continue
			end
			local hidden = VisibilityToggle.IsHidden(instance)
			local action = if hidden then "Show" else "Hide"
			local id = `SectionVisibility_{section}_{action}`
			local option = cache[id]
			if not option then
				option = plugin:CreatePluginAction(id, `{action} {section}`, "")
				option.Triggered:Connect(function()
					if hidden then
						VisibilityToggle.Reveal(workspace.DebugMission:FindFirstChild(section))
					else
						VisibilityToggle.Hide(workspace.DebugMission:FindFirstChild(section))
					end
				end)
				cache[id] = option
			end
			menu:AddAction(option)
		end

		if not cache.ShowAll then
			local ShowAll = plugin:CreatePluginAction("SectionVisibility_ShowAll", "Show All", "")
			ShowAll.Triggered:Connect(function()
				if not workspace:FindFirstChild("DebugMission") then
					return
				end
				for _, section in sections do
					local part = workspace.DebugMission:FindFirstChild(section)
					if part then
						VisibilityToggle.Reveal(part)
					end
				end
			end)
			local HideAll = plugin:CreatePluginAction("SectionVisibility_HideAll", "Hide All", "")
			HideAll.Triggered:Connect(function()
				if not workspace:FindFirstChild("DebugMission") then
					return
				end
				for _, section in sections do
					local part = workspace.DebugMission:FindFirstChild(section)
					if part then
						VisibilityToggle.Hide(part)
					end
				end
			end)

			cache.ShowAll = ShowAll
			cache.HideAll = HideAll
		end

		menu:AddAction(cache.ShowAll)
		menu:AddAction(cache.HideAll)
		menu:ShowAsync()
	end,
}
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX707B5D56FA1B4D668F965888AF4C7A3F">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">PropBarrier</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX8A730487D0604A60B1102B658CF5A999">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{3D2CB3CE-196C-4B41-8CB3-4F90F48C615A}</string>
					<ProtectedString name="Source"><![CDATA[--!strict

local UserInputService = game:GetService("UserInputService")

local Button = require(script.Parent.Parent.Util.Button)
local VisibilityToggle = require(script.Parent.Parent.Util.VisibilityToggle)

local DEFAULT_COLOR = Color3.fromRGB(163, 162, 165)
local OFF_COLOR = Color3.fromRGB(30, 30, 30)
local ON_COLOR = Color3.fromRGB(0, 170, 170)

local ATTRIBUTE_NAME = "HasTopBarrier"
local PROP_BARRIER = "PropBarrier"

local Actor = require(script.Parent.Parent.Util.Actor)
local Create = Actor.Create
local State = Actor.State
local Derived = Actor.Derived

local module = {}
module.Active = false
module.DoorState = {}

-- Input Processing
module.ProcessInput = function(self, io)
	if io.UserInputState == Enum.UserInputState.Begin then
		if io.UserInputType == Enum.UserInputType.MouseButton1 then
			local part = self.Mouse.Target
			if part and part.Parent.Name == "Props" then
				local newValue = if part:GetAttribute(ATTRIBUTE_NAME) then nil else true
				part:SetAttribute(ATTRIBUTE_NAME, newValue)
				part.Color = newValue and ON_COLOR or OFF_COLOR
			end
		end
	end
end

local MAX_DIST = 20
local IgnoreList = {}
local CastConfig = RaycastParams.new()
CastConfig.FilterType = Enum.RaycastFilterType.Exclude

module.GetProjectedDistance = function(self, pos: Vector3, dir: Vector3)
	local cast = workspace:Raycast(pos, dir * MAX_DIST, CastConfig)
	while cast and cast.Instance and cast.Instance.Transparency > 0.3 do
		table.insert(IgnoreList, cast.Instance)
		CastConfig.FilterDescendantsInstances = IgnoreList
		cast = workspace:Raycast(pos, dir * MAX_DIST, CastConfig)
	end

	if cast then
		return cast.Distance
	end

	return MAX_DIST
end

-- Init/Cleanup
module.Init = function(mouse: PluginMouse)
	if module.Active then
		return
	end
	module.Active = true

	if workspace:FindFirstChild("DebugMission") and workspace.DebugMission:FindFirstChild("Props") then
		for _, prop in pairs(workspace.DebugMission.Props:GetChildren()) do
			if prop:IsA("BasePart") then
				prop.Color = prop:GetAttribute(ATTRIBUTE_NAME) and ON_COLOR or OFF_COLOR
			end
		end

		if workspace.DebugMission:FindFirstChild("Barrier") then
			VisibilityToggle.TempReveal(workspace.DebugMission.Barrier)

			for _, part in pairs(workspace.DebugMission.Barrier:GetChildren()) do
				if part:GetAttribute(PROP_BARRIER) then
					part:Destroy()
				end
			end
		end
	end

	local self = module
	self.Mouse = mouse

	self.InputEvent = UserInputService.InputBegan:Connect(function(io)
		self:ProcessInput(io)
	end)
end

module.Clean = function()
	if not module.Active then
		return
	end
	module.Active = false

	local self = module

	if workspace:FindFirstChild("DebugMission") and workspace.DebugMission:FindFirstChild("Props") then
		for _, prop in pairs(workspace.DebugMission.Props:GetChildren()) do
			if prop:IsA("BasePart") then
				prop.Color = DEFAULT_COLOR

				if prop:GetAttribute(ATTRIBUTE_NAME) then
					local top = prop.CFrame * CFrame.new(0, prop.Size.Y / 2, 0)
					local dist = module:GetProjectedDistance(top.p, Vector3.yAxis)

					local b = Instance.new("Part")
					b.Color = ON_COLOR
					b.Size = Vector3.new(prop.Size.X, dist, prop.Size.Z)
					b.CFrame = top * CFrame.new(0, dist / 2, 0)
					b.Anchored = true
					b.Transparency = 0.5
					b.TopSurface = Enum.SurfaceType.SmoothNoOutlines
					b.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
					b.CastShadow = false

					b:SetAttribute(PROP_BARRIER, true)

					b.Parent = workspace.DebugMission.Barrier
				end
			end
		end
	end

	self.InputEvent:Disconnect()
	self.InputEvent = nil
end

return module
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX42A963F491F94E8EB8DE7F8E48F482BA">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">MeadowMap</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX8D5B63AC319445A1BE908A3421859708">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{30BEB671-8B9E-4F03-9FA9-0AA8657F9E02}</string>
					<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")

local AxisAlign = require(script.Parent.Parent.Util.AxisAlign)
local ZoneUtil = require(script.Parent.Parent.Util.ZoneUtil)
local VisibilityToggle = require(script.Parent.Parent.Util.VisibilityToggle)

local UserInputService = game:GetService("UserInputService")
local UserInputConnection

local DOOR_BUFFER = 4.5

local CurrentZone = nil
local CurrentMap = {}
local CurrentModel = nil
local LinkWith = nil

local function CloseZone()
	if CurrentModel then
		CurrentModel:Destroy()
		CurrentModel = nil
	end
	CurrentMap = {}
	CurrentZone = nil
end

local function CheckLOS(p0, p1)
	if p0 == p1 then return false end
	local result = workspace:Raycast(p0.Position + Vector3.new(0, 0.75, 0), p1.Position - p0.Position)
	return not result or result.Instance == p1
end

local function AddLink(p0, p1)
	local l0 = Instance.new("Part")
	l0.Size = Vector3.new(0.4, 0.4, (p0.Position - p1.Position).magnitude / 2)
	l0.Transparency = 0.5
	local l1 = l0:Clone()
	
	l0.CFrame = CFrame.new(p0.Position * 0.75 + p1.Position * 0.25, p0.Position)
	if not CurrentMap[p0][p1] then
		CurrentMap[p0][p1] = l0
		l0.BrickColor = BrickColor.new("Bright blue")
		l0.Parent = CurrentModel
	end
	
	l1.CFrame = CFrame.new(p1.Position * 0.75 + p0.Position * 0.25, p1.Position)
	if not CurrentMap[p1][p0] then
		CurrentMap[p1][p0] = l1
		l1.BrickColor = BrickColor.new("Bright blue")
		l1.Parent = CurrentModel
	end
end

local function AddOneWayLink(p0, p1)
	local l0 = Instance.new("Part")
	l0.Size = Vector3.new(0.4, 0.4, (p0.Position - p1.Position).magnitude / 2)
	l0.Transparency = 0.5

	l0.CFrame = CFrame.new(p0.Position * 0.75 + p1.Position * 0.25, p0.Position)
	if not CurrentMap[p0][p1] then
		CurrentMap[p0][p1] = l0
		l0.BrickColor = BrickColor.new("Bright blue")
		l0.Parent = CurrentModel
	end
end

local function CreateNode(pos, placed, generateLinks)
	if placed and not ZoneUtil.InZone(CurrentZone, pos) then
		warn("Nodes should not be placed outside of their cell")
		return
	end

	local p = Instance.new("Part")
	p.Size = Vector3.new(2, 2, 2)
	p.Parent = CurrentModel
	p.CFrame = CFrame.new(pos)
	p.BrickColor = BrickColor.new("Bright blue")
	if placed then p.Transparency = 0.5 end
	CurrentMap[p] = {}
	if generateLinks then
		for node in pairs(CurrentMap) do
			if node ~= p and CheckLOS(node, p) then
				AddLink(node, p)
			end
		end
	end
	return p
end

local function OpenZone(newZone)
	if CurrentZone then
		CloseZone()
	end

	local DoorNodes = {}
	for _, prop in pairs(workspace.DebugMission.Props:GetChildren()) do
		if prop.Name:match("Door") then
			local p0 = (prop.CFrame * CFrame.new(0, -3, DOOR_BUFFER)).p
			local p1 = (prop.CFrame * CFrame.new(0, -3, -DOOR_BUFFER)).p
			if ZoneUtil.InZone(newZone, p0) then table.insert(DoorNodes, p0) end
			if ZoneUtil.InZone(newZone, p1) then table.insert(DoorNodes, p1) end
		end
	end
	
	if workspace.DebugMission.Cells:FindFirstChild("Links") then
		for _, link in pairs(workspace.DebugMission.Cells.Links:GetChildren()) do
			if link:GetAttribute("Path") then
				local p0 = (link.CFrame * CFrame.new(0, 0.5, DOOR_BUFFER)).p
				local p1 = (link.CFrame * CFrame.new(0, 0.5, -DOOR_BUFFER)).p
				if ZoneUtil.InZone(newZone, p0) then table.insert(DoorNodes, p0) end
				if ZoneUtil.InZone(newZone, p1) then table.insert(DoorNodes, p1) end
			end
		end
	end

	CurrentModel = Instance.new("Model")
	CurrentModel.Parent = workspace
	CurrentMap = {}
	CurrentZone = newZone

	for _, pos in pairs(DoorNodes) do
		CreateNode(pos, false, true)
	end
	
	--[[if CurrentZone:GetAttribute("Path") then
		local data = HttpService:JSONDecode(CurrentZone:GetAttribute("Path"))
		if data.Placed then
			for _, placed in pairs(data.Placed) do
				CreateNode(Vector3.new(unpack(placed)), true, true)
			end
		end
	end]]
end

local function OpenZoneWithoutRegenerating(newZone)
	if CurrentZone then
		CloseZone()
	end
	
	CurrentModel = Instance.new("Model")
	CurrentModel.Parent = workspace
	CurrentMap = {}
	CurrentZone = newZone

	if not CurrentZone:GetAttribute("Path") then
		print("Doing first time generation for zone")
		return OpenZone(newZone)
	end
		
	local data = HttpService:JSONDecode(CurrentZone:GetAttribute("Path"))
	local PlacedNodes = {}
	if data.Placed then
		for _, placed in pairs(data.Placed) do
			local node = Vector3.new(unpack(placed))
			PlacedNodes[node] = true
		end
	end
	
	local NodeParts = {}
	for _, node in pairs(data.Node) do
		local pos = Vector3.new(unpack(node))
		local nodePart = CreateNode(pos, PlacedNodes[pos], false)
		table.insert(NodeParts, nodePart)
	end
	
	for startIndex, list in data.Link do
		for _, endIndex in list do
			AddOneWayLink(NodeParts[startIndex], NodeParts[endIndex])
		end
	end
end

local function RemovePart(part)
	if CurrentMap[part] then -- Is node
		for _, linkPart in pairs(CurrentMap[part]) do
			linkPart:Destroy()
		end
		CurrentMap[part] = nil
		for node, links in pairs(CurrentMap) do
			if links[part] then
				links[part]:Destroy()
				links[part] = nil
			end
		end
		part:Destroy()
	else -- Is link
		for node, linkList in pairs(CurrentMap) do
			for link, linkPart in pairs(linkList) do
				if linkPart == part then
					linkPart:Destroy()
					linkList[link] = nil
					break
				end
			end
		end
	end
end

local function Serialize()
	local node = {}
	local nodeId = {}
	local link = {}
	local placed = {}
	
	local function getNode(p)
		if not nodeId[p] then
			local pos = p.Position
			node[#node+1] = {pos.X, pos.Y, pos.Z}
			nodeId[p] = #node
			
			if p.Transparency > 0.25 then
				table.insert(placed, node[#node])
			end
		end
		return nodeId[p]
	end
	
	for node, linkList in pairs(CurrentMap) do
		local id = getNode(node)
		local links = {}
		for linkNode in pairs(linkList) do
			table.insert(links, getNode(linkNode))
		end
		link[id] = links
	end
	
	return HttpService:JSONEncode({
		Node = node,
		Link = link,
		Placed = placed,
	})
end

local function Save()
	CurrentZone:SetAttribute("Path", Serialize())
end

local LastCTap = 0

return {
	Init = function(mouse)
		print("T - Open Cell Meadow Map")
		print("C - Fully Clear Meadow Map (Tap twice)")
		print("G - Add Node")
		print("H - Add Node (No Link Generation)")
		print("R - Remove")

		VisibilityToggle.TempReveal(workspace.DebugMission.Cells)
		
		UserInputConnection = UserInputService.InputBegan:Connect(function(io)
			if io.KeyCode == Enum.KeyCode.C then
				if tick() - LastCTap < 0.5 then
					LastCTap = 0
					local zone = ZoneUtil.GetZone(mouse.Hit.p)
					if zone then 
						OpenZone(zone) 
						Save()
					end
				else
					LastCTap = tick()
					local clock = LastCTap
					task.delay(0.5, function()
						if clock ~= LastCTap then
							return
						end
						warn("Double tap C to fully clear and regenerate the meadow map for this room\nThis will remove any manual modifications you've made")
					end)
				end
			elseif io.KeyCode == Enum.KeyCode.T then
				local zone = ZoneUtil.GetZone(mouse.Hit.p)
				if zone then 
					OpenZoneWithoutRegenerating(zone) 
					Save()
				elseif CurrentZone then
					CloseZone()
				end
			elseif io.KeyCode == Enum.KeyCode.G then
				if CurrentZone then
					CreateNode(mouse.Hit.p + Vector3.new(0, 1, 0), true, true)
					Save()
				end
			elseif io.KeyCode == Enum.KeyCode.H then
				if CurrentZone then
					CreateNode(mouse.Hit.p + Vector3.new(0, 1, 0), true, false)
					Save()
				end
			elseif io.KeyCode == Enum.KeyCode.R then
				if mouse.Target then
					RemovePart(mouse.Target)
					Save()
				end
			elseif io.UserInputType == Enum.UserInputType.MouseButton1 then
				if LinkWith then
					if CurrentMap[LinkWith] and CurrentMap[mouse.Target] then
						AddLink(LinkWith, mouse.Target)
						Save()
					else
						print("Link failed")
					end
					LinkWith = nil
				elseif CurrentMap[mouse.Target] then
					LinkWith = mouse.Target
					print("Click another node to link")
				end
			end
		end)
	end,
	Clean = function()
		if UserInputConnection then
			UserInputConnection:Disconnect()
			UserInputConnection = nil
		end
		if CurrentZone then
			CloseZone()
		end
	end,
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX4F5168BD3C13434D98BFE93B0399B8C2">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">DoorAccess</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXE81E314289254C0FA67569D3183AB34A">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{362CD570-946A-42CF-ABC1-7D8085FE90F1}</string>
					<ProtectedString name="Source"><![CDATA[--!strict

local UserInputService = game:GetService("UserInputService")

local Button = require(script.Parent.Parent.Util.Button)

local Actor = require(script.Parent.Parent.Util.Actor)
local Create = Actor.Create
local State = Actor.State
local Derived = Actor.Derived

local module = {}
module.Active = false
module.DoorState = {}

local RESTRICTIONS_LIST = {
	"Never",
	"Combat",
	"BasicKeycard",
	"SecurityKeycard",
	"MasterKeycard",
	"MRKey",
	"MasterKey",
	"SecurityBadge",
	"LeadSecurityBadge",
	"ITBadge",
}

type DoorData = {
	Base: Part?,
	Side: number?,
	Restrictions: {[number]: string},
	Recover: boolean,
	Locked: boolean,
	IgnoreWhenOpen: boolean,
	IgnoreWhenUnlocked: boolean,
	IgnoreWhenBroken: boolean,
	Display: Part?,
}

local DEFAULT_DOOR_STATE: DoorData = {
	Restrictions = {},
	Recover = false,
	Locked = false,
	IgnoreWhenOpen = false,
	IgnoreWhenUnlocked = false,
	IgnoreWhenBroken = false,
}

module.UIState = State(DEFAULT_DOOR_STATE)
function module:UpdateSelectedState(key: string, value: any)
	local newData = {}
	for k, v in pairs(self.UIState._Value) do
		newData[k] = if k ~= key then v else value
	end
	self.UIState:set(newData)
end
	
-- Data Load/Unload
function module:GetDoorsFromLevel()
	local doors = {}
	local props = workspace.DebugMission.Props:GetChildren()
	for _, part in pairs(props) do
		if string.match(part.Name, "^Door") then
			table.insert(doors, part)
		end
	end
	return doors
end

function module:ReadData(part: Part, side: number)
	local atr = part:GetAttributes()
	local req = atr["PathReq"..side]
	local data: DoorData = {
		Base = part,
		Side = side,
		Restrictions = {},
		Locked = atr[side == 1 and "LockFront" or "LockBack"],
		Recover = atr.PathRecover and atr.PathRecover % (side + side) >= side or false,
		IgnoreWhenOpen = atr.PathIgnoreOpen and atr.PathIgnoreOpen % (side + side) >= side or false,
		IgnoreWhenUnlocked = atr.PathIgnoreUnlocked and atr.PathIgnoreUnlocked % (side + side) >= side or false,
		IgnoreWhenBroken = atr.PathIgnoreBroken and atr.PathIgnoreBroken % (side + side) >= side or false,
	}
	if req then
		for s in req:gmatch("(%a+)") do
			table.insert(data.Restrictions, s)
		end
	end
	return data
end

local function setBitMaskValue(mask: number, bit: number, enabled: boolean)
	local n = if mask % (bit + bit) >= bit then mask - bit else mask
	if enabled then n += bit end
	return n
end

function module:WriteData(part: Part, side: number, data: DoorData)
	local atr = part:GetAttributes()
	local req = table.concat(data.Restrictions, " ")
	part:SetAttribute("PathReq"..side, if req ~= "" then req else nil)
	
	part:SetAttribute(side == 1 and "LockFront" or "LockBack", data.Locked)
	
	local recover = setBitMaskValue(atr.PathRecover or 0, side, data.Recover)
	part:SetAttribute("PathRecover", if recover ~= 0 then recover else nil)
	
	local ignoreOpen = setBitMaskValue(atr.PathIgnoreOpen or 0, side, data.IgnoreWhenOpen)
	part:SetAttribute("PathIgnoreOpen", if ignoreOpen ~= 0 then ignoreOpen else nil)
	
	local ignoreUnlocked = setBitMaskValue(atr.PathIgnoreUnlocked or 0, side, data.IgnoreWhenUnlocked)
	part:SetAttribute("PathIgnoreUnlocked", if ignoreUnlocked ~= 0 then ignoreUnlocked else nil)

	local ignoreBroken = setBitMaskValue(atr.PathIgnoreBroken or 0, side, data.IgnoreWhenBroken)
	part:SetAttribute("PathIgnoreBroken", if ignoreBroken ~= 0 then ignoreBroken else nil)
	
	local newData = self:ReadData(part, side)
	newData.Display = self.DoorState[part][side].Display
	self.DoorState[part][side] = newData
	self:UpdateDisplayedData(newData)
end

-- Display
local COLOR_MAP = {
	Unrestricted = Color3.new(0, 0.8, 0),
	Recovery = Color3.new(0, 0.8, 0),
	Unlocked = Color3.new(0, 0.8, 0),
	Combat = Color3.new(0.8, 0, 0),
	Never = Color3.new(0.8, 0, 0),
	Locked = Color3.new(0.8, 0, 0),
}

function module:UpdateDisplayedData(data: DoorData)
	if data.Display then
		data.Display:Destroy()
		data.Display = nil
	end
	
	local listItems = {}
	table.insert(listItems, data.Locked and "Locked" or "Unlocked")
	
	if #data.Restrictions == 0 then
		table.insert(listItems, "Unrestricted")
	else
		table.insert(listItems, table.concat(data.Restrictions, " - "))
	end
	
	if data.Recover then
		table.insert(listItems, "Recovery")
	end
	
	if data.IgnoreWhenOpen then
		table.insert(listItems, "Ignore When Open")
	end
	
	if data.IgnoreWhenUnlocked then
		table.insert(listItems, "Ignore When Unlocked")
	end
	
	if data.IgnoreWhenBroken then
		table.insert(listItems, "Ignore When Broken")
	end
	
	for index, item in pairs(listItems) do
		listItems[index] = Create("TextLabel", {
			Text = item,
			TextColor3 = COLOR_MAP[item] or Color3.new(1, 1, 1),
			Font = Enum.Font.SciFi,
			TextSize = 42,
			AutomaticSize = Enum.AutomaticSize.XY,
			Size = UDim2.new(0, 0, 0, 0),
			BackgroundTransparency = 1,
			TextWrapped = true
		})
	end
	
	if data.Base then
		data.Display = Create("Part", {
			CFrame = data.Base.CFrame * CFrame.Angles(0, data.Side == 2 and math.pi or 0, 0) * CFrame.new(0, 0, -0.5),
			Size = Vector3.new(4, 4, 0.2),
			Parent = workspace,
			Material = Enum.Material.Glass,
			Color = Color3.new(0, 0, 0),
		}, {
			Create("SurfaceGui", {
				PixelsPerStud = 25,
			}, {
				Create("Frame", {
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 1,
				}, {
					Create("UIListLayout", {
						VerticalAlignment = Enum.VerticalAlignment.Center,
						HorizontalAlignment = Enum.HorizontalAlignment.Center,
						Padding = UDim.new(0, 10),
					}),
					listItems,
				})
			})
		})
	end
end

-- Input Processing
module.ProcessInput = function(io: InputObject)
	if io.UserInputState == Enum.UserInputState.Begin then
		local door, side = module:GetHoveredDoor()
		if io.UserInputType == Enum.UserInputType.MouseButton1 then
			if door and side then
				print("Overwrite")
				module:WriteData(door, side, module.UIState._Value)
			end
		elseif io.KeyCode == Enum.KeyCode.F then
			if door and side then
				print("Copy door data")
				module.UIState:set(module:ReadData(door, side))
			else
				print("Clearing door data")
				module.UIState:set(DEFAULT_DOOR_STATE)
			end
		end
	end
end

function module:GetHoveredDoor(): (Part?, number?)
	local part = self.Mouse.Target
	if part and part:IsA("Part") and self.DoorState[part] then
		local hit = self.Mouse.Hit.Position
		local rel = part.CFrame:PointToObjectSpace(hit)
		return part, if rel.Z < 0 then 1 else 2
	end
	return nil, nil
end

-- UI setup
function module:InitUI()
	
	local buttons = {
		Button({
			Text = "Locked",
			Enabled = Derived(function(data: DoorData)
				return data.Locked
			end, self.UIState),
			Activated = function()
				self:UpdateSelectedState("Locked", not self.UIState._Value.Locked)
			end,
		}),
		Button({
			Text = "Recovery",
			Enabled = Derived(function(data: DoorData)
				return data.Recover
			end, self.UIState),
			Activated = function()
				self:UpdateSelectedState("Recover", not self.UIState._Value.Recover)
			end,
		}),
		Button({
			Text = "Ignore When Open",
			Enabled = Derived(function(data: DoorData)
				return data.IgnoreWhenOpen
			end, self.UIState),
			Activated = function()
				self:UpdateSelectedState("IgnoreWhenOpen", not self.UIState._Value.IgnoreWhenOpen)
			end,
		}),
		Button({
			Text = "Ignore When Unlocked",
			Enabled = Derived(function(data: DoorData)
				return data.IgnoreWhenUnlocked
			end, self.UIState),
			Activated = function()
				self:UpdateSelectedState("IgnoreWhenUnlocked", not self.UIState._Value.IgnoreWhenUnlocked)
			end,
		}),
		Button({
			Text = "Ignore When Broken",
			Enabled = Derived(function(data: DoorData)
				return data.IgnoreWhenBroken
			end, self.UIState),
			Activated = function()
				self:UpdateSelectedState("IgnoreWhenBroken", not self.UIState._Value.IgnoreWhenBroken)
			end,
		}),
	}
	
	for index, text in pairs(RESTRICTIONS_LIST) do
		table.insert(buttons, Button({
			Text = text,
			Enabled = Derived(function(data: DoorData)
				for _, restriction in pairs(data.Restrictions) do
					if restriction == text then
						return true
					end
				end
				return false
			end, module.UIState),
			Activated = function()
				local wasRemoved = false
				local copy = {}
				for _, restriction in pairs(module.UIState._Value.Restrictions) do
					if restriction ~= text then
						table.insert(copy, restriction)
					else
						wasRemoved = true
					end
				end
				if not wasRemoved then
					table.insert(copy, text)
				end
				self:UpdateSelectedState("Restrictions", copy)
			end,
		}))
	end
	
	self.UI = Create("ScreenGui", {
		Parent = game.StarterGui,
		Archivable = false,
		Name = "DoorAccessConfig",
	}, {
		Create("Frame", {
			Position = UDim2.new(1, -20, 1, -20),
			AnchorPoint = Vector2.new(1, 1),
			Size = UDim2.new(0, 200, 0, 200),
			BackgroundTransparency = 1,
		}, {
			Create("UIListLayout", {
				VerticalAlignment = Enum.VerticalAlignment.Bottom,
				HorizontalAlignment = Enum.HorizontalAlignment.Left,
			}),
			buttons
		})
	})
end

function module:CleanUI()
	if self.UI then
		self.UI:Destroy()
		self.UI = nil
	end
end

-- Init/Cleanup
module.Init = function(mouse: PluginMouse)
	if module.Active then return end
	module.Active = true
	
	local self = module
	self.Mouse = mouse
	
	for _, door in pairs(self:GetDoorsFromLevel()) do
		self.DoorState[door] = {
			self:ReadData(door, 1),
			self:ReadData(door, 2),
		}
		self:UpdateDisplayedData(self.DoorState[door][1])
		self:UpdateDisplayedData(self.DoorState[door][2])
	end
	
	self:InitUI()
	
	self.InputEvent = UserInputService.InputBegan:Connect(module.ProcessInput)
end

module.Clean = function()
	if not module.Active then return end
	module.Active = false
	
	local self = module

	self.InputEvent:Disconnect()
	self.InputEvent = nil

	for _, list in pairs(self.DoorState) do
		for _, data in pairs(list) do
			if data.Display then
				data.Display:Destroy()
			end
		end
	end
	self.DoorState = {}
	
	self:CleanUI()
end

return module
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX8D7BE197F52149BAA7323DA34B254CB5">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">CombatMap</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX00FE73A9A4C145699C73D0BA120C4A68">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{12FAC14E-5F5A-4A0B-B351-C815EBF58D9E}</string>
					<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")
local VisibilityToggle = require(script.Parent.Parent.Util.VisibilityToggle)

local module = {}

local DrawnModel = nil
local ClickConnection = nil
local CurrentMap = nil

local BLUE = Color3.fromRGB(110, 153, 202)
local BLACK = Color3.fromRGB(0, 0, 0)
local WHITE = Color3.new(1, 1, 1)

local function DrawLine(p0, p1, color)
	local p = Instance.new("Part")
	p.Size = Vector3.new(1, 1, (p0 - p1).Magnitude)
	p.CFrame = CFrame.new((p0 + p1) / 2, p0)
	p.Color = color
	p.CastShadow = false
	return p
end

local function LinkId(id0, id1)
	if id0 < id1 then
		return id0 .. "|" .. id1
	end
	return id1 .. "|" .. id0
end

function module.Init(mouse: PluginMouse)
	if module.Active then
		return
	end
	module.Active = true

	if workspace.DebugMission:FindFirstChild("CombatFlowMap") then
		VisibilityToggle.TempReveal(workspace.DebugMission.CombatFlowMap)
	end

	local function RedrawMap(id)
		if DrawnModel then
			DrawnModel:Destroy()
			DrawnModel = nil
		end

		DrawnModel = Instance.new("Model")
		DrawnModel.Parent = workspace

		local part = CurrentMap[id]
		local used = {}
		local blocked = part:GetAttribute("BlockedLinks") or "{}"
		blocked = game:GetService("HttpService"):JSONDecode(blocked)

		local FilteredLinks = {}

		local distLeft = {
			[id] = 3,
		}
		local expandFrom = { id }

		while #expandFrom > 0 do
			local checkId = expandFrom[1]
			table.remove(expandFrom, 1)

			local part = CurrentMap:FindFirstChild(checkId)
			local linkTo = HttpService:JSONDecode(part:GetAttribute("LinkedIds"))

			for _, targetId in linkTo do
				local linkName = LinkId(checkId, targetId)

				local linkPart = CurrentMap:FindFirstChild(targetId)
				local p = DrawLine(part.Position, linkPart.Position, Color3.new(0, 0, 0.8), BLUE)
				p.Parent = DrawnModel
				p.Name = linkName

				if blocked[linkName] then
					p.Color = BLACK
				else
					table.insert(FilteredLinks, targetId)
					if distLeft[checkId] > 1 and not distLeft[targetId] then
						table.insert(expandFrom, targetId)
					end
				end
				distLeft[targetId] = distLeft[checkId] - 1
			end
		end

		part:SetAttribute("FilteredLinks", HttpService:JSONEncode(FilteredLinks))
		part.Color = BLACK
	end

	ClickConnection = mouse.Button1Down:Connect(function(target)
		local part = mouse.Target
		if part:IsDescendantOf(workspace.DebugMission.CombatFlowMap) then
			CurrentMap = part.Parent
			for _, p in CurrentMap:GetChildren() do
				p.Name = p:GetAttribute("Id")
			end

			local id = part:GetAttribute("Id")
			game.Selection:Set({ part })

			RedrawMap(id)
		elseif part.Name:match("|") and #part.Name == 73 then
			local node = game.Selection:Get()[1]
			local blocked = node:GetAttribute("BlockedLinks") or "{}"
			blocked = game:GetService("HttpService"):JSONDecode(blocked)

			blocked[part.Name] = if not blocked[part.Name] then true else nil

			node:SetAttribute("BlockedLinks", HttpService:JSONEncode(blocked))
			RedrawMap(node.Name)
		else
			local id0, id1 = part.Name:match("|")

			if DrawnModel then
				DrawnModel:Destroy()
				DrawnModel = nil
			end
		end
	end)
end

function module.Clean()
	if DrawnModel then
		DrawnModel:Destroy()
		DrawnModel = nil
	end

	if ClickConnection then
		ClickConnection:Disconnect()
		ClickConnection = nil
	end

	module.Active = false
end

return module
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX3566AEB6EDBB44A3BE0DAAF075B47995">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">Reading</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXEF34E39D74A3473BA506409F624F632C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Read</string>
					<string name="ScriptGuid">{CA6B676B-FB2B-43A3-9026-2314DE301DF7}</string>
					<ProtectedString name="Source"><![CDATA[local StringConversion = require(script.Parent.Parent.StringConversion)
local InstanceTypes = require(script.Parent.Parent.Types.InstanceTypes)
local ReadInstance = require(script.Parent.ReadInstance)
local Materials = require(script.Parent.Parent.Types.Materials)
local PartTypes = require(script.Parent.Parent.Types.PartTypes)
local NormalId = require(script.Parent.Parent.Types.NormalId)
local MeshType = require(script.Parent.Parent.Types.MeshType)

local SIGNED_INT_BOUND = StringConversion.GetMaxNumber(3) / 2
local INT_BOUND = StringConversion.GetMaxNumber(4)
local BOUNDED_FLOAT_BOUND = StringConversion.GetMaxNumber(3)
local SHORT_BOUNDED_FLOAT_BOUND = StringConversion.GetMaxNumber(2)

local Read

local denormalize = function(value)
	return value * (2 * math.pi) - math.pi
end

local InstanceKeys = {}
for i, v in pairs(InstanceTypes) do
	InstanceKeys[v] = i
end

local function CreateEnumReader(enum, map)
	local ids = {}
	for i, v in map do
		ids[v] = i
	end
	return function(str, cursor)
		local num = StringConversion.StringToNumber(str, cursor, 1)
		return enum[ids[num]], cursor + 1
	end
end

Read = {
	Bool = function(str, cursor) -- returns the value read as a boolean. 1 symbol
		return string.sub(str, cursor, cursor) == "b", cursor + 1
	end,

	ShortInt = function(str, cursor) -- returns the value read as a short integer. 2 symbols
		return StringConversion.StringToNumber(str, cursor, 2), cursor + 2
	end,

	Int = function(str, cursor) -- returns the value read as an integer. 4 symbols
		return StringConversion.StringToNumber(str, cursor, 4), cursor + 4
	end,

	LongInt = function(str, cursor) -- returns the value read as an integer. 6 symbols
		return StringConversion.StringToNumber(str, cursor, 6), cursor + 6
	end,

	SignedInt = function(str, cursor) -- returns the value read as a signed integer. 3 symbols
		return StringConversion.StringToNumber(str, cursor, 3) - math.floor(SIGNED_INT_BOUND), cursor + 3
	end,

	Float = function(str, cursor) -- returns the value read as a float. 5 symbols
		local beforeDecimal, cursor = Read.SignedInt(str, cursor)
		local afterDecimal = StringConversion.StringToNumber(str, cursor, 2) / SHORT_BOUNDED_FLOAT_BOUND
		return afterDecimal + beforeDecimal, cursor + 2
	end,

	Vector3 = function(str, cursor) -- returns the value read as a Vector3. 24 symbols
		local X, cursor = Read.Float(str, cursor)
		local Y, cursor = Read.Float(str, cursor)
		local Z, cursor = Read.Float(str, cursor)
		return Vector3.new(X, Y, Z), cursor
	end,

	CFrame = function(str, cursor) -- returns the value read as a CFrame. 36 symbols
		local X, cursor = Read.Float(str, cursor)
		local Y, cursor = Read.Float(str, cursor)
		local Z, cursor = Read.Float(str, cursor)
		local rx, cursor = Read.BoundedFloat(str, cursor)
		rx = denormalize(rx)
		local ry, cursor = Read.BoundedFloat(str, cursor)
		ry = denormalize(ry)
		local rz, cursor = Read.BoundedFloat(str, cursor)
		rz = denormalize(rz)
		return CFrame.new(X, Y, Z) * CFrame.fromEulerAnglesXYZ(rx, ry, rz), cursor
	end,

	BoundedFloat = function(str, cursor) -- returns the value read as a bounded float between 0-1. 3 symbols.
		return StringConversion.StringToNumber(str, cursor, 3) / BOUNDED_FLOAT_BOUND, cursor + 3
	end,

	ShortBoundedFloat = function(str, cursor) -- returns the value read as a bounded float between 0-1. 4 symbols.
		return StringConversion.StringToNumber(str, cursor, 2) / SHORT_BOUNDED_FLOAT_BOUND, cursor + 2
	end,

	Color3 = function(str, cursor)
		local R, cursor = Read.ShortBoundedFloat(str, cursor)
		local G, cursor = Read.ShortBoundedFloat(str, cursor)
		local B, cursor = Read.ShortBoundedFloat(str, cursor)
		return Color3.new(R, G, B), cursor
	end,

	String = function(str, cursor)
		local length, cursor = Read.Int(str, cursor)
		local value = str:sub(cursor, cursor + length - 1)
		return value, cursor + length
	end,

	ColorMap = function(str, cursor)
		local colorMap = {}
		local colorMapLength
		colorMapLength, cursor = Read.ShortInt(str, cursor)
		for i = 1, colorMapLength do
			colorMap[i], cursor = Read.Color3(str, cursor)
		end
		return colorMap, cursor
	end,

	StringMap = function(str, cursor)
		local stringMap = {}
		local stringMapLength
		stringMapLength, cursor = Read.ShortInt(str, cursor)
		for i = 1, stringMapLength do
			stringMap[i], cursor = Read.String(str, cursor)
		end
		return stringMap, cursor
	end,

	Mission = function(str, cursor)
		local colorMap
		colorMap, cursor = Read.ColorMap(str, cursor)
		local stringMap
		stringMap, cursor = Read.StringMap(str, cursor)
		local mission = Read.Instance(str, cursor, colorMap, stringMap)

		-- Reading Color3s from TableMissionSetup
		local ImportedMissionSetup = game:GetService("HttpService")
			:JSONDecode(mission:FindFirstChild("TableMissionSetup").Value)

		for i, v in pairs(ImportedMissionSetup["Colors"]) do
			ImportedMissionSetup["Colors"][i] = Color3.new(v[1], v[2], v[3])
		end

		if game:GetService("RunService"):IsStudio() and not _G.Common then -- If the mission is read using the plugin, then create a MissionSetup ModuleScript
			local StringMissionSetup = mission:FindFirstChild("StringMissionSetup")
			local MissionSetup = Instance.new("ModuleScript")
			MissionSetup.Name = "MissionSetup"
			MissionSetup.Parent = mission
			MissionSetup.Source = StringMissionSetup.Value
		end

		return mission
	end,

	Instance = function(str, cursor, colorMap, stringMap)
		local InstanceId = StringConversion.StringToNumber(str, cursor, 1)
		cursor += 1
		if InstanceId ~= InstanceTypes.Nil then
			local InstanceType = InstanceKeys[InstanceId]
			local object, cursor = ReadInstance[InstanceType](str, cursor, Read, colorMap, stringMap)
			while StringConversion.StringToNumber(str, cursor, 1) ~= 0 do
				local child
				child, cursor = Read.Instance(str, cursor, colorMap, stringMap)
				if child ~= nil then
					child.Parent = object
				end
			end
			return object, cursor + 1
		else
			return nil, cursor
		end
	end,

	Material = CreateEnumReader(Enum.Material, Materials),
	PartType = CreateEnumReader(Enum.PartType, PartTypes),
	NormalId = CreateEnumReader(Enum.NormalId, NormalId),
	MeshType = CreateEnumReader(Enum.MeshType, MeshType),
}

return Read]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX00BA3CF089EB4B4889F8754AB27832C2">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ReadInstance</string>
					<string name="ScriptGuid">{B42A64AA-3485-4A9F-B409-B3235012BFBE}</string>
					<ProtectedString name="Source"><![CDATA[local StringConversion = require(script.Parent.Parent.StringConversion)
local InstanceProperties = require(script.Parent.Parent.Types.InstanceProperties)
local DefaultProperties = require(script.Parent.Parent.Types.DefaultProperties)
local AttributeTypes = require(script.Parent.Parent.Types.AttributeTypes)
local AttributeValidation = require(script.Parent.Parent.AttributeValidation)

local AttributeKeys = {}
for i, v in pairs(AttributeTypes) do
	AttributeKeys[v] = i
end

local WithAttributes = function(DefaultReader)
	return function(str, cursor, Read, colorMap, stringMap)
		local newInstance
		newInstance, cursor = DefaultReader(str, cursor, Read, colorMap, stringMap)
		local attributeId = StringConversion.StringToNumber(str, cursor, 1)
		cursor += 1
		while not (attributeId == 0) do
			local typeName = AttributeKeys[attributeId]
			local nameMapIndex
			nameMapIndex, cursor = Read.ShortInt(str, cursor)
			local name = stringMap[nameMapIndex]
			local value
			if typeName == "Color3" then
				local colorMapIndex
				colorMapIndex, cursor = Read.ShortInt(str, cursor)
				value = colorMap[colorMapIndex]
			elseif typeName == "String" then
				local valueMapIndex
				valueMapIndex, cursor = Read.ShortInt(str, cursor)
				value = stringMap[valueMapIndex]
			else
				value, cursor = Read[typeName](str, cursor)
			end
			newInstance:SetAttribute(name, value)
			attributeId = StringConversion.StringToNumber(str, cursor, 1)
			cursor += 1
		end
		local attributes = newInstance:GetAttributes()
		attributes = AttributeValidation.Validate(newInstance.ClassName, newInstance.Name, attributes, true)
		for i, v in pairs(attributes) do
			newInstance:SetAttribute(i, v)
		end
		return newInstance, cursor
	end
end

local ReadInstance

local CreateInstanceReader = function(instanceType, properties)
	local defaults = DefaultProperties[instanceType]

	local InstanceReader = function(str, cursor, Read, colorMap, stringMap)
		local newInstance = Instance.new(instanceType)
		if defaults then
			for k, v in defaults do
				newInstance[k] = v
			end
		end
		for i, v in pairs(properties) do -- sets all Instance properties to their default values as defined in InstanceProperties.lua
			newInstance[v[1]] = v[3]
		end
		local propertyId = StringConversion.StringToNumber(str, cursor, 1)
		cursor += 1
		while not (propertyId == 0) do
			local typeName = properties[propertyId][1]
			local valueType = properties[propertyId][2]
			if valueType == "Color3" then
				local colorMapIndex
				colorMapIndex, cursor = Read.ShortInt(str, cursor)
				newInstance[typeName] = colorMap[colorMapIndex]
			elseif valueType == "String" then
				local stringMapIndex
				stringMapIndex, cursor = Read.ShortInt(str, cursor)
				newInstance[typeName] = stringMap[stringMapIndex]
			else
				newInstance[typeName], cursor = Read[valueType](str, cursor)
			end
			propertyId = StringConversion.StringToNumber(str, cursor, 1)
			cursor += 1
		end
		return newInstance, cursor
	end
	return InstanceReader
end

local CreateProtectedInstanceReader = function(instanceType, properties)
	local defaults = DefaultProperties[instanceType]

	local InstanceReader = function(str, cursor, Read, colorMap, stringMap)
		local newProperties = {}
		if defaults then
			for k, v in defaults do
				newProperties[k] = v
			end
		end
		for i, v in pairs(properties) do -- sets all Instance properties to their default values as defined in InstanceProperties.lua
			newProperties[v[1]] = v[3]
		end
		local propertyId = StringConversion.StringToNumber(str, cursor, 1)
		cursor += 1
		while not (propertyId == 0) do
			local typeName = properties[propertyId][1]
			local valueType = properties[propertyId][2]
			if valueType == "Color3" then
				local colorMapIndex
				colorMapIndex, cursor = Read.ShortInt(str, cursor)
				newProperties[typeName] = colorMap[colorMapIndex]
			elseif valueType == "String" then
				local stringMapIndex
				stringMapIndex, cursor = Read.ShortInt(str, cursor)
				newProperties[typeName] = stringMap[stringMapIndex]
			else
				newProperties[typeName], cursor = Read[valueType](str, cursor)
			end
			propertyId = StringConversion.StringToNumber(str, cursor, 1)
			cursor += 1
		end

		local newInstance = Instance.new("Part")
		local meshId = newProperties.MeshId and newProperties.MeshId:match("%d+") or newProperties.MeshId
		newProperties.MeshId = nil
		if
			meshId
			and game.ReplicatedStorage:FindFirstChild("Assets")
			and game.ReplicatedStorage.Assets:FindFirstChild("ImportParts")
			and game.ReplicatedStorage.Assets.ImportParts:FindFirstChild(meshId)
		then
			newInstance = game.ReplicatedStorage.Assets.ImportParts[meshId]:Clone()
			for k, v in newProperties do
				newInstance[k] = v
			end
		else
			for k, v in newProperties do
				pcall(function()
					newInstance[k] = v
				end)
			end
		end

		return newInstance, cursor
	end
	return InstanceReader
end

ReadInstance = {
	Model = WithAttributes(CreateInstanceReader("Model", InstanceProperties.Model)),
	Folder = WithAttributes(CreateInstanceReader("Folder", InstanceProperties.Folder)),
	Part = WithAttributes(CreateInstanceReader("Part", InstanceProperties.Part)),
	PartNoAttributes = CreateInstanceReader("Part", InstanceProperties.Part),
	BoolValue = WithAttributes(CreateInstanceReader("BoolValue", InstanceProperties.BoolValue)),
	WedgePart = CreateInstanceReader("WedgePart", InstanceProperties.WedgePart),
	StringValue = CreateInstanceReader("StringValue", InstanceProperties.StringValue),
	MeshPart = WithAttributes(CreateProtectedInstanceReader("MeshPart", InstanceProperties.MeshPart)),
	UnionOperation = WithAttributes(CreateProtectedInstanceReader("UnionOperation", InstanceProperties.UnionOperation)),
	Texture = CreateInstanceReader("Texture", InstanceProperties.Texture),
	BlockMesh = CreateInstanceReader("BlockMesh", InstanceProperties.BlockMesh),
	PointLight = CreateInstanceReader("PointLight", InstanceProperties.PointLight),
	SpotLight = CreateInstanceReader("SpotLight", InstanceProperties.SpotLight),
	SurfaceLight = CreateInstanceReader("SurfaceLight", InstanceProperties.SurfaceLight),
	SpecialMesh = CreateInstanceReader("SpecialMesh", InstanceProperties.SpecialMesh),
	Decal = CreateInstanceReader("Decal", InstanceProperties.Decal),
	Fire = CreateInstanceReader("Fire", InstanceProperties.Fire),
	Smoke = CreateInstanceReader("Smoke", InstanceProperties.Smoke),
	Attachment = CreateInstanceReader("Attachment", InstanceProperties.Attachment),
}

return ReadInstance]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXDB1DFF44B9A04DC59FC5071EBCE20752">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">Types</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX58B19D8C46CA4964A6AB9451E6B7C06D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">AttributeTypes</string>
					<string name="ScriptGuid">{AC96A4F2-2907-4709-952D-A6DAA068ECFB}</string>
					<ProtectedString name="Source"><![CDATA[local AttributeTypes

AttributeTypes = {
	Float = 1,
	Int = 2,
	String = 3,
	Bool = 4,
	Color3 = 5,
	Vector3 = 6,
	LongInt = 7,
	SignedInt = 8,
	CFrame = 9,
}

return AttributeTypes]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXDA624540365647C6BAA0891269B6B5E5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DefaultProperties</string>
					<string name="ScriptGuid">{253B3ECB-28F8-485A-AFCD-C2FF30BB27B0}</string>
					<ProtectedString name="Source"><![CDATA[return {
	Part = {
		TopSurface = Enum.SurfaceType.SmoothNoOutlines,
		BottomSurface = Enum.SurfaceType.SmoothNoOutlines,
	},
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX9E46A8AFE0C2451381403CF524D87141">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">InstanceProperties</string>
					<string name="ScriptGuid">{4C60C4AD-EF58-45BD-BBD8-B5A0E8349CD2}</string>
					<ProtectedString name="Source"><![CDATA[local InstanceProperties

-- Format:
-- [TypeName], [ValueType], [DefaultValue]
-- eg. "Position", "Vector3", "Vector3.new(0, 0, 0)"

InstanceProperties = { -- any changes to this table should be changed in InstanceTypes.lua
	Model = {
		{ "Name", "String", "Model" },
	},
	Folder = {
		{ "Name", "String", "Folder" },
	},
	Part = {
		{ "Name", "String", "Part" },
		{ "CFrame", "CFrame", CFrame.new() },
		{ "Color", "Color3", Color3.new() },
		{ "Size", "Vector3", Vector3.new() },
		{ "Anchored", "Bool", true },
		{ "CanCollide", "Bool", true },
		{ "Transparency", "ShortBoundedFloat", 0 },
		{ "Material", "Material", "Plastic" },
		{ "CastShadow", "Bool", false },
		{ "Shape", "PartType", "Block" },
	},
	BoolValue = {
		{ "Name", "String", "Value" },
		{ "Value", "Bool", false },
	},
	WedgePart = {
		{ "Name", "String", "Wedge" },
		{ "CFrame", "CFrame", CFrame.new() },
		{ "Color", "Color3", Color3.new() },
		{ "Size", "Vector3", Vector3.new() },
		{ "Anchored", "Bool", true },
		{ "CanCollide", "Bool", true },
		{ "Transparency", "ShortBoundedFloat", 0 },
		{ "Material", "Material", "Plastic" },
		{ "CastShadow", "Bool", false },
	},
	StringValue = {
		{ "Name", "String", "StringValue" },
		{ "Value", "String", "" },
	},
	MeshPart = {
		{ "Name", "String", "Part" },
		{ "CFrame", "CFrame", CFrame.new() },
		{ "Color", "Color3", Color3.new() },
		{ "Size", "Vector3", Vector3.new() },
		{ "Anchored", "Bool", true },
		{ "CanCollide", "Bool", true },
		{ "Transparency", "ShortBoundedFloat", 0 },
		{ "Material", "Material", "Plastic" },
		{ "CastShadow", "Bool", false },
		{ "MeshId", "String", "" },
		{ "TextureID", "String", "" },
	},
	UnionOperation = {
		{ "Name", "String", "Part" },
		{ "CFrame", "CFrame", CFrame.new() },
		{ "Color", "Color3", Color3.new() },
		{ "Size", "Vector3", Vector3.new() },
		{ "Anchored", "Bool", true },
		{ "CanCollide", "Bool", true },
		{ "Transparency", "ShortBoundedFloat", 0 },
		{ "Material", "Material", "Plastic" },
		{ "CastShadow", "Bool", false },
		{ "MeshId", "String", "" },
	},
	Texture = {
		{ "Name", "String", "Texture" },
		{ "Color3", "Color3", Color3.new() },
		{ "OffsetStudsU", "Float", 0 },
		{ "OffsetStudsV", "Float", 0 },
		{ "StudsPerTileU", "Float", 0 },
		{ "StudsPerTileV", "Float", 0 },
		{ "Texture", "String", "" },
		{ "Transparency", "ShortBoundedFloat", 0 },
		{ "ZIndex", "Int", 0 },
		{ "Face", "NormalId", "Front" },
	},
	BlockMesh = {
		{ "Scale", "Vector3", Vector3.new(1, 1, 1) },
		{ "Offset", "Vector3", Vector3.new(0, 0, 0) },
	},
	PointLight = {
		{ "Name", "String", "PointLight" },
		{ "Brightness", "Float", 1 },
		{ "Color", "Color3", Color3.new(1, 1, 1) },
		{ "Enabled", "Bool", true },
		{ "Range", "Float", 20 },
		{ "Shadows", "Bool", false },
	},
	SpotLight = {
		{ "Name", "String", "SpotLight" },
		{ "Angle", "Float", 90 },
		{ "Brightness", "Float", 1 },
		{ "Color", "Color3", Color3.new(1, 1, 1) },
		{ "Enabled", "Bool", true },
		{ "Face", "NormalId", Enum.NormalId.Front },
		{ "Range", "Float", 16 },
		{ "Shadows", "Bool", false },
	},
	SurfaceLight = {
		{ "Name", "String", "SurfaceLight" },
		{ "Angle", "Float", 90 },
		{ "Brightness", "Float", 1 },
		{ "Color", "Color3", Color3.new(1, 1, 1) },
		{ "Enabled", "Bool", true },
		{ "Face", "NormalId", Enum.NormalId.Front },
		{ "Range", "Float", 16 },
		{ "Shadows", "Bool", false },
	},
	SpecialMesh = {
		{ "Name", "String", "Mesh" },
		{ "MeshId", "String", "" },
		{ "MeshType", "MeshType", Enum.MeshType.FileMesh },
		{ "Offset", "Vector3", Vector3.new(0, 0, 0) },
		{ "Scale", "Vector3", Vector3.new(1, 1, 1) },
		{ "VertexColor", "Vector3", Vector3.new(1, 1, 1) },
		{ "TextureId", "String", "" },
	},
	Decal = {
		{ "Name", "String", "Mesh" },
		{ "Color3", "Color3", Color3.new() },
		{ "Texture", "String", "" },
		{ "Transparency", "ShortBoundedFloat", 0 },
		{ "ZIndex", "Int", 0 },
		{ "Face", "NormalId", "Front" },
	},
	Fire = {
		{ "Name", "String", "Mesh" },
		{ "Color", "Color3", Color3.new() },
		{ "Enabled", "Bool", true },
		{ "Heat", "Float", 9 },
		{ "SecondaryColor", "Color3", Color3.new() },
		{ "Size", "Float", 5 },
		{ "TimeScale", "Float", 1 },
	},
	Smoke = {
		{ "Name", "String", "Mesh" },
		{ "Color", "Color3", Color3.new() },
		{ "Enabled", "Bool", true },
		{ "Opacity", "Float", 1 },
		{ "RiseVelocity", "Float", 1 },
		{ "Size", "Float", 1 },
		{ "TimeScale", "Float", 1 },
	},
	Attachment = {
		{ "Name", "String", "Mesh" },
		{ "CFrame", "CFrame", CFrame.new() },
		{ "Visible", "Bool", false },
	},
}

return InstanceProperties]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX888E651AC75143EB93C579A1E77AAD38">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">InstanceTypes</string>
					<string name="ScriptGuid">{DBBBE992-74AD-4E3C-AB97-30278556B79E}</string>
					<ProtectedString name="Source"><![CDATA[local InstanceTypes = {
	Nil = 1,
	Model = 2,
	Folder = 3,
	Part = 4,
	PartNoAttributes = 5,
	BoolValue = 6,
	WedgePart = 7,
	StringValue = 8,
	MeshPart = 9,
	UnionOperation = 10,
	Texture = 11,
	BlockMesh = 12,
	PointLight = 13,
	SpotLight = 14,
	SurfaceLight = 15,
	SpecialMesh = 16,
	Decal = 17,
	Fire = 18,
	Smoke = 19,
	Attachment = 20,
}

return InstanceTypes]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX8E918072CE0D477C99DCA5F971720759">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Materials</string>
					<string name="ScriptGuid">{54513417-53C3-45AA-B491-323C10EA3925}</string>
					<ProtectedString name="Source"><![CDATA[local Materials

Materials = {
	Asphalt = 1,
	Basalt = 2,
	Brick = 3,
	Cobblestone = 4,
	Concrete = 5,
	CorrodedMetal = 6,
	CrackedLava = 7,
	DiamondPlate = 8,
	Fabric = 9,
	Foil = 10,
	Forcefield = 11,
	Glacier = 12,
	Glass = 13,
	Granite = 14,
	Grass = 15,
	Ground = 16,
	Ice = 17,
	LeafyGrass = 18,
	Limestone = 19,
	Marble = 20,
	Metal = 21,
	Mud = 22,
	Neon = 23,
	Pavement = 24,
	Pebble = 25,
	Plastic = 26,
	Rock = 27,
	Salt = 28,
	Sand = 29,
	Sandstone = 30,
	Slate = 31,
	SmoothPlastic = 32,
	Snow = 33,
	Wood = 34,
	WoodPlanks = 35,
	ClayRoofTiles = 36,
	Carpet = 37,
}

return Materials]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX53428DE640CC4A79B6E7F125C9A8A4C5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">MeshType</string>
					<string name="ScriptGuid">{EC1C6156-801C-45DA-964E-4D2762027042}</string>
					<ProtectedString name="Source"><![CDATA[return {
	Brick = 1,
	Cylinder = 2,
	FileMesh = 3,
	Head = 4,
	Sphere = 5,
	Toros = 6,
	Wedge = 7,
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX20835B9083A7482CB5CA22E7CA6693B2">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">NormalId</string>
					<string name="ScriptGuid">{D5149363-7CA4-4C9B-A78A-69669F45EA6C}</string>
					<ProtectedString name="Source"><![CDATA[return {
	Top = 1,
	Bottom = 2,
	Left = 3,
	Right = 4,
	Front = 5,
	Back = 6,
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX1FFBB510D343401AB759813619B0F090">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">PartTypes</string>
					<string name="ScriptGuid">{71D2645F-E051-4DBD-BC3C-4239AAE9CB10}</string>
					<ProtectedString name="Source"><![CDATA[local PartTypes

PartTypes = {
    Ball = 1,
    Cylinder = 2,
    Block = 3,
    Wedge = 4,
    CornerWedge = 5
}

return PartTypes]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX1CA2C58E749A4810A94AC9F3AC82C5D3">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">Writing</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX4619209C72D14C6B99A2CBA11D137E4B">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{269E7816-ECE4-458C-9542-46622D78FA7B}</string>
					<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ScriptEditorService = game:GetService("ScriptEditorService")
local UserInputService = game:GetService("UserInputService")
local Write = require(script.Parent.Write)
local StringConversion = require(script.Parent.Parent.StringConversion)
local Read = require(script.Parent.Parent.Reading.Read)

local Button = require(script.Parent.Parent.Util.Button)

local Actor = require(script.Parent.Parent.Util.Actor)
local Create = Actor.Create
local State = Actor.State
local Derived = Actor.Derived
local DerivedTable = Actor.DerivedTable

local MAX_PASTE_SIZE = 199999
local PASTE_INFO_SIZE = 7
local PASTE_SIZE = MAX_PASTE_SIZE - PASTE_INFO_SIZE

local VERSION_NUMBER = 0

local module = {}

module.Init = function(mouse: PluginMouse)
	if module.Active then
		return
	end
	module.Active = true

	local CodeState = State("")
	local Pastes = State({})

	Pastes = Derived(function(code)
		local codeChunks = {}
		local first = 1
		local current = PASTE_SIZE -- leaving space for paste information
		local currentPaste = 1
		local maxPastes = math.ceil(#code / current)
		local mapId = math.random(1, StringConversion.GetMaxNumber(2)) -- A 3 character integer that can be used to identify maps
		while first < #code do
			local prePaste = ""
			prePaste = StringConversion.NumberToString(VERSION_NUMBER, 1)
			prePaste = prePaste .. Write.ShortInt(mapId)
			prePaste = prePaste .. Write.ShortInt(currentPaste)
			prePaste = prePaste .. Write.ShortInt(maxPastes)
			codeChunks[#codeChunks + 1] = prePaste .. code:sub(first, current)
			first += PASTE_SIZE
			current += PASTE_SIZE
			currentPaste += 1
		end
		return codeChunks
	end, CodeState)

	module.UI = Create("ScreenGui", {
		Parent = game.StarterGui,
		Archivable = false,
	}, {
		Button({
			Size = UDim2.new(0, 200, 0, 30),
			Enabled = module.EnabledState,
			Position = UDim2.new(0, 50, 0, 50),
			Text = "Generate Code",
			Activated = function()
				_G.__disable_validation_on_toolingfortinkerers = false
				_G.__disable_validation_on_toolingfortinkerers = false
				local mission = workspace:FindFirstChild("DebugMission")
					or game.ReplicatedStorage:FindFirstChild("DebugMission")
				if not mission then
					error(
						"No mission found: Mission must be named 'DebugMission' and placed in workspace or ReplicatedStorage"
					)
				end
				local code = Write.Mission(mission)

				if not workspace:FindFirstChild("DebugMission") then
					local model = Read.Mission(code, 1)
					model.Parent = workspace
				end
				CodeState:set(code)
			end,
		}),
		if workspace:GetAttribute("ToolingIsInFactForTinkerers") then
			Button({
				Size = UDim2.new(0, 200, 0, 30),
				Enabled = module.EnabledState,
				Position = UDim2.new(0, 270, 0, 50),
				Text = "Generate Validationless",
				Activated = function()
					_G.__disable_validation_on_toolingfortinkerers = true
					local mission = workspace:FindFirstChild("DebugMission")
					or game.ReplicatedStorage:FindFirstChild("DebugMission")
					if not mission then
						error(
							"No mission found: Mission must be named 'DebugMission' and placed in workspace or ReplicatedStorage"
						)
					end
					local code = Write.Mission(mission)

					if not workspace:FindFirstChild("DebugMission") then
						local model = Read.Mission(code, 1)
						model.Parent = workspace
					end
					CodeState:set(code)
					_G.__disable_validation_on_toolingfortinkerers = false
				end,
			})
		else nil,
		if workspace:GetAttribute("ReadDocs") then 
			Button({
				Size = UDim2.new(0, 200, 0, 30),
				Enabled = module.EnabledState,
				Position = UDim2.new(0, 490, 0, 50),
				Text = "Gist Code",
				Activated = function()
					_G.__disable_validation_on_toolingfortinkerers = false
					local mission = workspace:FindFirstChild("DebugMission")
						or game.ReplicatedStorage:FindFirstChild("DebugMission")
					if not mission then
						error(
							"No mission found: Mission must be named 'DebugMission' and placed in workspace or ReplicatedStorage"
						)
					end
					local code = Write.Mission(mission)

					if not workspace:FindFirstChild("DebugMission") then
						local model = Read.Mission(code, 1)
						model.Parent = workspace
					end

					local output = ""
					output = StringConversion.NumberToString(VERSION_NUMBER, 1)
					output = output .. Write.ShortInt(math.random(1, 100))
					output = output .. Write.ShortInt(1)
					output = output .. Write.ShortInt(1)
					output = output .. code

					if workspace:FindFirstChild("CustomMissionCode") then
						workspace.CustomMissionCode:Destroy()
					end

					local s = Instance.new("Script")
					s.Name = "CustomMissionCode"
					ScriptEditorService:UpdateSourceAsync(s, function()
						return output
					end)
					s.Parent = workspace
					ScriptEditorService:OpenScriptDocumentAsync(s)
				end,
			})
			else nil,
		if workspace:GetAttribute("ReadDocs") and workspace:GetAttribute("ToolingIsInFactForTinkerers") then
			Button({
				Size = UDim2.new(0, 200, 0, 30),
				Enabled = module.EnabledState,
				Position = UDim2.new(0, 710, 0, 50),
				Text = "Gist Code Validationless",
				Activated = function()
					_G.__disable_validation_on_toolingfortinkerers = true
					local mission = workspace:FindFirstChild("DebugMission")
					or game.ReplicatedStorage:FindFirstChild("DebugMission")
					if not mission then
						error(
							"No mission found: Mission must be named 'DebugMission' and placed in workspace or ReplicatedStorage"
						)
					end
					local code = Write.Mission(mission)

					if not workspace:FindFirstChild("DebugMission") then
						local model = Read.Mission(code, 1)
						model.Parent = workspace
					end

					local output = ""
					output = StringConversion.NumberToString(VERSION_NUMBER, 1)
					output = output .. Write.ShortInt(math.random(1, 100))
					output = output .. Write.ShortInt(1)
					output = output .. Write.ShortInt(1)
					output = output .. code

					if workspace:FindFirstChild("CustomMissionCode") then
						workspace.CustomMissionCode:Destroy()
					end

					local s = Instance.new("Script")
					s.Name = "CustomMissionCode"
					ScriptEditorService:UpdateSourceAsync(s, function()
						return output
					end)
					s.Parent = workspace
					ScriptEditorService:OpenScriptDocumentAsync(s)
					_G.__disable_validation_on_toolingfortinkerers = false
				end,
			})
			else nil,
		Create("ScrollingFrame", {
			Size = UDim2.new(0, 200, 1, -150),
			Position = UDim2.new(0, 50, 1, -50),
			AnchorPoint = Vector2.new(0, 1),
			BackgroundColor3 = Color3.new(0, 0, 0),
			BackgroundTransparency = 0.5,
			Visible = Derived(function(code)
				if code == "" then
					return false
				else
					return true
				end
			end, CodeState),
			CanvasSize = Derived(function(code)
				return UDim2.new(0, 180, 0, 34 * (math.ceil(#code / PASTE_SIZE)))
			end, CodeState),
		}, {
			DerivedTable(function(index, value)
				local textBox = Create("TextBox", {
					ClearTextOnFocus = false,
					Size = UDim2.new(0, 80, 0, 20),
					Position = UDim2.new(0, 10, 0, 5),
					TextEditable = false,
					TextScaled = false,
					TextSize = 10,
					ClipsDescendants = true,
					TextWrapped = false,
					BackgroundTransparency = 1,
					TextColor3 = Color3.new(255, 255, 255),
					BorderSizePixel = 5,
					Text = value,
				})

				local selector = Create("Frame", {
					BackgroundTransparency = 1,
					Size = UDim2.new(0, 200, 0, 50),
					Position = UDim2.new(0, 0, 0, (index - 1) * 34 + 4),
				}, {
					textBox,
					Create("TextButton", {
						Size = UDim2.new(0, 90, 0, 20),
						Position = UDim2.new(0, 100, 0, 5),
						Text = "Select " .. tostring(index),
						FontFace = Font.fromEnum(Enum.Font.SciFi),
						BackgroundColor3 = Color3.new(255, 255, 255),
						BorderColor3 = Color3.new(0, 0, 0),
						TextScaled = false,
						TextSize = 14,
						TextStrokeColor3 = Color3.new(0, 0, 0),
						BorderSizePixel = 0,
						Activated = function()
							textBox:CaptureFocus()
							textBox.SelectionStart = 0
							textBox.CursorPosition = #value + 1
						end,
					}),
				})
				return selector
			end, Pastes),
		}),
	})
end

module.Clean = function()
	if not module.Active then
		return
	end
	module.Active = false

	module.UI:Destroy()
	module.UI = nil
end

return module]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX12F79EA3647846F9A854C98658C5399A">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Write</string>
					<string name="ScriptGuid">{1B9D4B60-9158-4C3C-BD0D-4D4A0CAD7F34}</string>
					<ProtectedString name="Source"><![CDATA[local StringConversion = require(script.Parent.Parent.StringConversion)
local InstanceTypes = require(script.Parent.Parent.Types.InstanceTypes)
local WriteInstance = require(script.Parent.WriteInstance)
local Materials = require(script.Parent.Parent.Types.Materials)
local PartTypes = require(script.Parent.Parent.Types.PartTypes)
local NormalId = require(script.Parent.Parent.Types.NormalId)
local MeshType = require(script.Parent.Parent.Types.MeshType)

local Write

local SHORTEST_INT_BOUND = StringConversion.GetMaxNumber(1)
local SHORT_INT_BOUND = StringConversion.GetMaxNumber(2)
local INT_BOUND = StringConversion.GetMaxNumber(4)
local LONG_INT_BOUND = StringConversion.GetMaxNumber(6)
local SIGNED_INT_BOUND = math.floor(StringConversion.GetMaxNumber(3) / 2)
local BOUNDED_FLOAT_BOUND = StringConversion.GetMaxNumber(3)
local SHORT_BOUNDED_FLOAT_BOUND = math.floor(StringConversion.GetMaxNumber(2))

local normalize = function(value) -- normalizes an angle in radians (from -pi to pi) to 0-1
	return (value + math.pi) / (math.pi * 2)
end

local function CreateEnumWriter(keys)
	return function(value)
		local index = keys[value.Name] or 1
		return StringConversion.NumberToString(index, 1)
	end
end

Write = {
	Bool = function(bool) -- 1 character
		return if bool then "b" else "c"
	end,

	ShortInt = function(num) -- 2 characters
		if num > SHORT_INT_BOUND then
			return StringConversion.NumberToString(SHORT_INT_BOUND, 2)
		elseif num < 0 then
			return StringConversion.NumberToString(0, 2)
		else
			return StringConversion.NumberToString(num, 2)
		end
	end,

	Int = function(num) -- 4 characters
		if num > INT_BOUND then
			warn("Int out of bounds range:", num)
			return StringConversion.NumberToString(INT_BOUND, 4)
		elseif num < 0 then
			warn("Int out of bounds range:", num)
			return StringConversion.NumberToString(0, 4)
		else
			return StringConversion.NumberToString(num, 4)
		end
	end,

	LongInt = function(num)
		if num > LONG_INT_BOUND then
			warn("Int out of bounds range:", num)
			return StringConversion.NumberToString(LONG_INT_BOUND, 6)
		elseif num < 0 then
			warn("Int out of bounds range:", num)
			return StringConversion.NumberToString(0, 6)
		else
			return StringConversion.NumberToString(num, 6)
		end
	end,

	SignedInt = function(num) -- 3 characters
		if num > SIGNED_INT_BOUND then
			return StringConversion.NumberToString(SIGNED_INT_BOUND * 2, 3)
		elseif num < SIGNED_INT_BOUND * -1 then
			return StringConversion.NumberToString(0, 3)
		else
			return StringConversion.NumberToString(num + SIGNED_INT_BOUND, 3)
		end
	end,

	Float = function(num) -- 5 characters, 3 before decimal, 2 after
		local beforeDecimalStr = Write.SignedInt(math.floor(num))
		local afterDecimalStr =
			StringConversion.NumberToString(math.round((num - math.floor(num)) * SHORT_INT_BOUND), 2)
		return beforeDecimalStr .. afterDecimalStr
	end,

	Vector3 = function(vector) -- 24 characters, 8 for each float of X, Y, & Z
		return Write.Float(vector.X) .. Write.Float(vector.Y) .. Write.Float(vector.Z)
	end,

	CFrame = function(frame) -- 27 characters, 15 for position, 12 for rotation
		local rx, ry, rz = frame:ToEulerAnglesXYZ()
		return Write.Float(frame.X)
			.. Write.Float(frame.Y)
			.. Write.Float(frame.Z)
			.. Write.BoundedFloat(normalize(rx))
			.. Write.BoundedFloat(normalize(ry))
			.. Write.BoundedFloat(normalize(rz))
	end,

	BoundedFloat = function(num) -- 3 characters
		if num > 1 then
			num = 1
		end
		if num < 0 then
			num = 0
		end
		return StringConversion.NumberToString(math.round(num * BOUNDED_FLOAT_BOUND), 3)
	end,

	ShortBoundedFloat = function(num) -- 2 characters
		if num > 1 then
			num = 1
		end
		if num < 0 then
			num = 0
		end
		return StringConversion.NumberToString(math.round(num * SHORT_BOUNDED_FLOAT_BOUND), 2)
	end,

	Color3 = function(color) -- 6 characters
		return Write.ShortBoundedFloat(color.R) .. Write.ShortBoundedFloat(color.G) .. Write.ShortBoundedFloat(color.B)
	end,

	String = function(str) -- 4 + length characters
		return Write.Int(#str) .. str
	end,

	ColorMap = function(colorMap)
		local colorStr = ""
		for i, v in pairs(colorMap) do
			colorStr = colorStr .. Write.Color3(v)
		end
		return Write.ShortInt(#colorMap) .. colorStr
	end,

	StringMap = function(stringMap)
		local stringStr = ""
		for i, v in pairs(stringMap) do
			stringStr = stringStr .. Write.String(v)
		end
		return Write.ShortInt(#stringMap) .. stringStr
	end,

	Mission = function(mission)
		local str = ""
		local colorMap = {}
		local stringMap = {}

		local MissionSetup = require(mission:FindFirstChild("MissionSetup"):Clone())

		while mission:FindFirstChild("StringMissionSetup") do
			mission:FindFirstChild("StringMissionSetup"):Destroy()
		end
		while mission:FindFirstChild("TableMissionSetup") do
			mission:FindFirstChild("TableMissionSetup"):Destroy()
		end

		-- setting Color3s into tables for encoding
		for i, v in pairs(MissionSetup["Colors"]) do
			MissionSetup["Colors"][i] = { v.R, v.G, v.B }
		end

		local json = game:GetService("HttpService"):JSONEncode(MissionSetup)

		local TableMissionSetup = Instance.new("StringValue")
		TableMissionSetup.Name = "TableMissionSetup"
		TableMissionSetup.Value = json
		TableMissionSetup.Parent = mission

		local StringMissionSetup = Instance.new("StringValue")
		StringMissionSetup.Name = "StringMissionSetup"
		StringMissionSetup.Value = mission:FindFirstChild("MissionSetup").Source
		StringMissionSetup.Parent = mission

		str, colorMap, stringMap = Write.Instance(mission, colorMap, stringMap)
		local colorMapStr = Write.ColorMap(colorMap)
		local stringMapStr = Write.StringMap(stringMap)
		return colorMapStr .. stringMapStr .. str
	end,

	Instance = function(object, colorMap, stringMap)
		local className = object.ClassName
		if InstanceTypes[object.ClassName] ~= nil then
			if next(object:GetAttributes()) == nil and object.ClassName == "Part" then
				className = className .. "NoAttributes"
			end
			local instanceType = StringConversion.NumberToString(InstanceTypes[className], 1)
			local objectProperties, colorMap, stringMap = WriteInstance[className](object, Write, colorMap, stringMap)
			local childrenProperties = ""
			for i, v in pairs(object:GetChildren()) do
				childrenProperties = childrenProperties .. Write.Instance(v, colorMap, stringMap)
			end
			return instanceType .. objectProperties .. childrenProperties .. StringConversion.NumberToString(0, 1),
				colorMap,
				stringMap
		else
			return StringConversion.NumberToString(InstanceTypes.Nil, 1), colorMap, stringMap
		end
	end,

	Material = CreateEnumWriter(Materials),
	PartType = CreateEnumWriter(PartTypes),
	NormalId = CreateEnumWriter(NormalId),
	MeshType = CreateEnumWriter(MeshType),
	--[[
	Material = function(material)
		return StringConversion.NumberToString(Materials[material.Name], 1)
	end,

	PartType = function(pType)
		return StringConversion.NumberToString(PartTypes[pType.Name], 1)
	end,

	NormalId = function(pType)
		return StringConversion.NumberToString(NormalId[pType.Name], 1)
	end,
	]]
}

return Write]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX5287BE9E34B44237B0C9B09C4883E0E6">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">WriteInstance</string>
					<string name="ScriptGuid">{B546A4D3-D1CA-49F7-9EF5-FAC0D5BC4C32}</string>
					<ProtectedString name="Source"><![CDATA[local StringConversion = require(script.Parent.Parent.StringConversion)
local InstanceProperties = require(script.Parent.Parent.Types.InstanceProperties)
local AttributeTypes = require(script.Parent.Parent.Types.AttributeTypes)
local AttributeValidation = require(script.Parent.Parent.AttributeValidation)

local WithAttributes = function(DefaultWriter)
	return function(object, Write, colorMap, stringMap)
		local str = DefaultWriter(object, Write, colorMap, stringMap)
		local attributes = object:GetAttributes()
		attributes = AttributeValidation.Validate(object.ClassName, object.Name, attributes, false)
		local attString = ""

		-- Encoding Attributes
		for i, v in pairs(attributes) do
			if i:match("^RBX_") then
				continue
			end

			local attributeType = typeof(v) -- Changing attribute type names to match as they are in the Write file
			if typeof(v) == "number" then
				if v ~= math.round(v) or v < 0 then
					attributeType = "Float"
				else
					attributeType = "LongInt"
				end
			elseif typeof(v) == "boolean" then
				attributeType = "bool"
			end
			attributeType = (string.upper(string.sub(attributeType, 1, 1)) .. string.sub(attributeType, 2, -1))
			if AttributeTypes[attributeType] == nil then -- if the attribute is not in the table, ignore it
				continue
			end

			local index = nil
			for ind, val in pairs(stringMap) do -- Check if the attribute is in the stringMap. use the index if it is
				if val == i then
					index = ind
					continue
				end
			end
			if index == nil then -- Otherwise, create a new value in the stringMap and use it
				stringMap[#stringMap + 1] = i
				index = #stringMap
			end
			attString = attString
				.. StringConversion.NumberToString(AttributeTypes[attributeType], 1)
				.. Write.ShortInt(index)

			if attributeType == "Color3" then
				local index = nil
				for ind, val in pairs(colorMap) do
					if v == val then
						index = ind
						continue
					end
				end
				if index == nil then
					colorMap[#colorMap + 1] = v
					index = #colorMap
				end
				attString = attString .. Write.ShortInt(index)
			elseif attributeType == "String" then
				local index = nil
				for ind, val in pairs(stringMap) do
					if val == v then
						index = ind
						continue
					end
				end
				if index == nil then
					stringMap[#stringMap + 1] = v
					index = #stringMap
				end
				attString = attString .. Write.ShortInt(index)
			else
				attString = attString .. Write[attributeType](v)
			end
		end
		str = str .. attString .. StringConversion.NumberToString(0, 1)
		return str, colorMap, stringMap
	end
end

local CreateInstanceWriter = function(properties)
	local WriteInstance = function(object, Write, colorMap, stringMap)
		local str = ""
		for i, v in pairs(properties) do
			local value
			if v[1] == "MeshId" and object.ClassName == "UnionOperation" then
				value = object:GetAttribute("MeshId")
			else
				value = object[v[1]]
			end
			local valueType = v[2]
			local defaultValue = v[3]
			if (valueType == "Color3") and (value ~= defaultValue) then
				local index = nil
				for i, v in pairs(colorMap) do
					if v == value then
						index = i
						continue
					end
				end
				if index == nil then
					colorMap[#colorMap + 1] = value
					index = #colorMap
				end
				str = str .. StringConversion.NumberToString(i, 1)
				str = str .. Write.ShortInt(index)
				continue
			elseif (valueType == "String") and (value ~= defaultValue) then
				local index = nil
				for i, v in pairs(stringMap) do
					if v == value then
						index = i
						continue
					end
				end
				if index == nil then
					stringMap[#stringMap + 1] = value
					index = #stringMap
				end
				str = str .. StringConversion.NumberToString(i, 1)
				str = str .. Write.ShortInt(index)
				continue
			elseif value ~= defaultValue then
				str = str .. StringConversion.NumberToString(i, 1)
				str = str .. Write[valueType](value)
			end
		end

		str = str .. StringConversion.NumberToString(0, 1)
		return str, colorMap, stringMap
	end
	return WriteInstance
end

local WriteInstance

WriteInstance = {
	Model = WithAttributes(CreateInstanceWriter(InstanceProperties.Model)),
	Folder = WithAttributes(CreateInstanceWriter(InstanceProperties.Folder)),
	Part = WithAttributes(CreateInstanceWriter(InstanceProperties.Part)),
	PartNoAttributes = CreateInstanceWriter(InstanceProperties.Part),
	BoolValue = WithAttributes(CreateInstanceWriter(InstanceProperties.BoolValue)),
	WedgePart = CreateInstanceWriter(InstanceProperties.WedgePart),
	StringValue = CreateInstanceWriter(InstanceProperties.StringValue),
	MeshPart = WithAttributes(CreateInstanceWriter(InstanceProperties.MeshPart)),
	UnionOperation = WithAttributes(CreateInstanceWriter(InstanceProperties.UnionOperation)),
	Texture = CreateInstanceWriter(InstanceProperties.Texture),
	BlockMesh = CreateInstanceWriter(InstanceProperties.BlockMesh),
	PointLight = CreateInstanceWriter(InstanceProperties.PointLight),
	SpotLight = CreateInstanceWriter(InstanceProperties.SpotLight),
	SurfaceLight = CreateInstanceWriter(InstanceProperties.SurfaceLight),
	SpecialMesh = CreateInstanceWriter(InstanceProperties.SpecialMesh),
	Decal = CreateInstanceWriter(InstanceProperties.Decal),
	Fire = CreateInstanceWriter(InstanceProperties.Fire),
	Smoke = CreateInstanceWriter(InstanceProperties.Smoke),
	Attachment = CreateInstanceWriter(InstanceProperties.Attachment),
}

return WriteInstance]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX6A38DB6A5A01414DA4B8A78D296177FB">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">AttributeValidation</string>
				<string name="ScriptGuid">{F6C444CB-D953-4E4C-8D94-5247601DC6FA}</string>
				<ProtectedString name="Source"><![CDATA[local AttributesMap = require(script.Parent.AttributesMap)
local PropAttributeTypes = require(script.Parent.PropAttributeTypes)

local GlobalPropAttributes = {
	GlobalVariables = { PropAttributeTypes.OPTIONAL_BOOL, nil },
	OnProp = { PropAttributeTypes.OPTIONAL_BOOL, nil },
	ScriptMove = { PropAttributeTypes.OPTIONAL_BOOL, nil },
	Index = { PropAttributeTypes.OPTIONAL_INT, nil },
	CanShatter = { PropAttributeTypes.OPTIONAL_BOOL, nil },
	Tag = { PropAttributeTypes.STRING, nil },
	TagOffset = { PropAttributeTypes.VECTOR3, nil },
	StaticTag = { PropAttributeTypes.STRING, nil },
	HasTopBarrier = { PropAttributeTypes.OPTIONAL_BOOL, nil },
	Indestructible = { PropAttributeTypes.EXPRESSION, nil },
	IsSpawned = { PropAttributeTypes.EXPRESSION, nil },
	Color0 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
	Color1 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
	Color2 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
	Color3 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
	Color4 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
	Color5 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
	Material0 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
	Material1 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
	Material2 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
	Material3 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
	Material4 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
	Material5 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
	Type = { PropAttributeTypes.STRING, nil },
	AltPropModel = { PropAttributeTypes.STRING, nil },
	FadeOutCondition = { PropAttributeTypes.STRING, nil },
}

local testAttributeCompatibility = function(attributeType, value, objectName, attributeName)
	if attributeType == "NUMBER" then
		if type(value) == "number" then
			return true
		else
			warn("The " .. objectName .. " object's " .. attributeName .. " attribute must contain a number type.")
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "INT" then
		if type(value) == "number" then
			if value == math.round(value) then
				return true
			else
				warn("The " .. objectName .. " object's " .. attributeName .. " attribute must be an integer.")
				warn("Found value: " .. tostring(value))
			end
		else
			warn(
				"The "
					.. objectName
					.. " object's "
					.. attributeName
					.. " attribute must contain a number type (integer)."
			)
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "EXPRESSION" then
		if type(value) == "boolean" or type(value) == "string" or type(value) == "number" then
			return true
		else
			warn(
				"The "
					.. objectName
					.. " object's "
					.. attributeName
					.. " attribute must contain a boolean, string, or number type."
			)
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "STATE_VALUE" then
		if type(value) == "string" then
			if string.find(value, "%s") == nil then
				return true
			else
				warn("The " .. objectName .. " object's " .. attributeName .. " attribute must not contain whitespace.")
				warn("Found value: " .. tostring(value))
			end
		else
			warn(
				"The "
					.. objectName
					.. " object's "
					.. attributeName
					.. " attribute must contain a string type with no whitespace."
			)
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "STRING" then
		if type(value) == "string" then
			return true
		else
			warn("The " .. objectName .. " object's " .. attributeName .. " attribute must contain a string type.")
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "NETWORK_ID" then
		if type(value) == "string" then
			local int = tonumber(value)
			if not int or int ~= math.round(int) or int < 1 or int > 999 then
				warn(
					"The "
						.. objectName
						.. " object's "
						.. attributeName
						.. " attribute must contain a number type between 1 and 999."
				)
			end
		elseif type(value) == "number" then
			if value == math.round(value) and value >= 1 and value <= 999 then
				return true
			else
				warn(
					"The "
						.. objectName
						.. " object's "
						.. attributeName
						.. " attribute must contain a number type between 1 and 999."
				)
				warn("Found value: " .. tostring(value))
			end
		else
			warn(
				"The "
					.. objectName
					.. " object's "
					.. attributeName
					.. " attribute must contain a number type between 1 and 999."
			)
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "NETWORK_ID_STRING" then
		if value == "" then
			return true
		end
		local num = tonumber(value)
		if num == math.round(num) and num >= 1 and num <= 999 then
			return true
		else
			warn(
				"The "
					.. objectName
					.. " object's "
					.. attributeName
					.. ' attribute must contain a string type of a number between 1 and 999 or be blank "".'
			)
			warn("Found value: " .. tostring(value))
		end
		return false
	elseif attributeType == "OPTIONAL_BOOL" then
		if value == nil or type(value) == "boolean" then
			return true
		else
			warn("The " .. objectName .. " object's " .. attributeName .. " attribute must be a boolean or nil.")
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "OPTIONAL_MISSION_COLOR" then
		if value == nil or typeof(value) == "Color3" or type(value) == "string" then
			return true
		else
			warn(
				"The "
					.. objectName
					.. " object's "
					.. attributeName
					.. " attribute must be a nil, Color3, or a string."
			)
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "OPTIONAL_MATERIAL" then
		if value == nil or type(value) == "string" then
			return true
		else
			warn("The " .. objectName .. " object's " .. attributeName .. " attribute must be a nil or a string.")
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "VECTOR3" then
		if typeof(value) == "Vector3" then
			return true
		else
			warn(
				"The "
					.. objectName
					.. " object's "
					.. attributeName
					.. " attribute must contain a number type (integer)."
			)
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "OPTIONAL_INT" then
		if value == nil then
			return true
		elseif type(value) == "number" then
			if value == math.round(value) then
				return true
			else
				warn("The " .. objectName .. " object's " .. attributeName .. " attribute must be nil or an integer.")
				warn("Found value: " .. tostring(value))
			end
		else
			warn(
				"The "
					.. objectName
					.. " object's "
					.. attributeName
					.. " attribute must contain a number type (integer)."
			)
			warn("Found type: " .. type(value))
		end
		return false
	elseif attributeType == "BOOL" then
		if type(value) == "boolean" then
			return true
		else
			warn("The " .. objectName .. " object's " .. attributeName .. " attribute must be a boolean")
			warn("Found type: " .. type(value))
		end
		return false
	else
		error(`Attribute type does not exist: {tostring(attributeType)}`)
	end
end

local function fmtWarn(reason, instanceName, attrName, className)
	return `[{reason}] {instanceName}.{attrName} [Class: {className}]`
end

local tinkerExt = require(script.Parent.TinkerExtensions)

return {
	Validate = function(className, instanceName, attributes, includeDefaults)
		local tinkering = workspace:GetAttribute("ToolingIsInFactForTinkerers")
		
		-- hack but I just want to get this working
		disableValidation = _G.__disable_validation_on_toolingfortinkerers or false
		if className == "Folder" then
			return attributes
		end

		if attributes.Type == "StateScript" or attributes.Type == "StateScriptPart" then
			return attributes
		end

		local name = className == "BoolValue" and attributes.Type or instanceName
		if not AttributesMap[name] then
			return attributes -- If not included in the prop list, just return the normal attributes list
		end
		
		local attrsAcknowledged = {}
		local newAttributes = {}
		local attributeTypes = AttributesMap[name]
		for attName, tableOfInfo in pairs(attributeTypes) do -- add attributes specifically listed in AttributesMap.lua
			if not attributes[attName] then
				if includeDefaults then
					newAttributes[attName] = tableOfInfo[2]
				end
				continue
			end
			local givenValue = attributes[attName]
			local attributeTypeName = ""
			for i, v in pairs(PropAttributeTypes) do
				if tableOfInfo[1] == v then
					attributeTypeName = i
				end
			end
			if attributeTypeName == "" then
				error(`attribute type does not exist: {name} {attName}`)
			end
			if not testAttributeCompatibility(attributeTypeName, givenValue, name, attName) then
				if tinkering then
					tinkerExt.AttValWarn(tinkerExt.AttValLogLevel.ATTR_INCOMPAT, instanceName, attName, name)
					attrsAcknowledged[attName] = true
				end
				if includeDefaults then
					newAttributes[attName] = attributeTypes[attName][2]
				else
					continue
				end
			end
			-- If the value isn't default or is and the includeDefaults value is set to true, then add it to the list
			if (tableOfInfo[2] == givenValue and includeDefaults) or tableOfInfo[2] ~= givenValue then
				newAttributes[attName] = givenValue
			elseif tinkering then
				tinkerExt.AttValWarn(tinkerExt.AttValLogLevel.DEFAULT_POLICY, instanceName, attName, name)
				attrsAcknowledged[attName] = true
			end
		end
		
		for attribute, value in pairs(attributes) do -- add the remaining attributes that are defined in the global attributes table above
			if GlobalPropAttributes[attribute] then
				local tableOfInfo = GlobalPropAttributes[attribute]
				local attributeTypeName = ""
				for i, v in pairs(PropAttributeTypes) do
					if tableOfInfo[1] == v then
						attributeTypeName = i
					end
				end
				if testAttributeCompatibility(attributeTypeName, value, name, attribute) then
					newAttributes[attribute] = value
					continue
				end
				if tinkering then
					tinkerExt.AttValWarn(tinkerExt.AttValLogLevel.ATTR_INCOMPAT, instanceName, attribute, name)
					attrsAcknowledged[attribute] = true
				end
				newAttributes[attribute] = nil -- set to nil if it doesn't fit properly
			elseif not attributeTypes[attribute] and disableValidation then
				tinkerExt.AttValWarn(tinkerExt.AttValLogLevel.ATTR_UNKNOWN_BYPASS, instanceName, attribute, name)
				newAttributes[attribute] = value
			elseif not attributeTypes[attribute] then
				if tinkering then tinkerExt.AttValWarn(tinkerExt.AttValLogLevel.ATTR_UNKNOWN, instanceName, attribute, name)
				else warn("Unknown attribute will be discarded:", attribute, name) end
				if tinkering then attrsAcknowledged[attribute] = true end
			end
		end
		
		if tinkering then
			for attribute, _ in next, attributes do
				if newAttributes[attribute] == nil and attrsAcknowledged[attribute] == nil then
					tinkerExt.AttValWarn(tinkerExt.AttValLogLevel.UNCAUGHT_DISCARD, instanceName, attribute, name)
				end
			end
		end

		return newAttributes
	end
}]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX3ECA7A91BB474FB2A8ECF8F97A38F2E8">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">AttributesMap</string>
				<string name="ScriptGuid">{D168C5FE-C0E5-466F-AFFF-288A582C04F8}</string>
				<ProtectedString name="Source"><![CDATA[-- NOTE: Do not edit this file manually. Use PropCompiler.py.
AttributeType = require(script.Parent.PropAttributeTypes)
return {
	AccessPoint = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		TriggerInvestigation = {AttributeType.EXPRESSION, true},
	},
	AmmoBox = {
	},
	BadgeReader = {
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		CustomBadges = {AttributeType.STRING, ""},
		UseITBadge = {AttributeType.BOOL, false},
		UseLeadSecurityBadge = {AttributeType.BOOL, false},
		UseSecurityBadge = {AttributeType.BOOL, false},
	},
	BarredWindow = {
		GlassMaterial = {AttributeType.STRING, "SmoothPlastic"},
		GlassTransparency = {AttributeType.NUMBER, 0.8},
		HorizontalSpacing = {AttributeType.NUMBER, 2},
		VerticalSpacing = {AttributeType.NUMBER, 2},
	},
	BoxStack2 = {
	},
	CandlePlate = {
	},
	CardboardBox = {
	},
	CardReader = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		ValidCards = {AttributeType.STRING, ""},
		MinimumCard = {AttributeType.STRING, ""},
		LightLevel = {AttributeType.INT, 1},
		Blocked = {AttributeType.EXPRESSION, ""},
	},
	CeilingAccessPoint = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		TriggerInvestigation = {AttributeType.EXPRESSION, true},
	},
	CircuitBoxLarge = {
		ClientExaminedVariable = {AttributeType.STATE_VALUE, ""},
		ExaminedVariable = {AttributeType.STATE_VALUE, ""},
		RewiredVariable = {AttributeType.STATE_VALUE, ""},
	},
	ClimbablePipe = {
	},
	ClothingRack = {
		Active = {AttributeType.EXPRESSION, ""},
		Disguise = {AttributeType.STRING, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
	},
	CodeCardReader = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		ValidCards = {AttributeType.STRING, ""},
		CodeVariable = {AttributeType.STATE_VALUE, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		WrongCodeVariable = {AttributeType.STATE_VALUE, ""},
		CodeSeed = {AttributeType.INT, 1},
		PromptText = {AttributeType.STRING, ""},
		MinimumCard = {AttributeType.STRING, ""},
		ReaderEnabled = {AttributeType.EXPRESSION, "1"},
		AltPromptActive = {AttributeType.EXPRESSION, ""},
		AltPromptSwitchTime = {AttributeType.NUMBER, 1},
	},
	CodeKeypad = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		PromptText = {AttributeType.STRING, ""},
		WrongCodeVariable = {AttributeType.STATE_VALUE, ""},
		ReadoutText = {AttributeType.EXPRESSION, ""},
		RewireTime = {AttributeType.NUMBER, 12},
		PromptSubtitle = {AttributeType.STRING, ""},
		KeypadEnabled = {AttributeType.EXPRESSION, "1"},
		NoiseEnabled = {AttributeType.EXPRESSION, ""},
		CodeVariable = {AttributeType.STATE_VALUE, ""},
		CodeSeed = {AttributeType.INT, 1},
	},
	CombatCuttableFence = {
	},
	DecorativePipe = {
		RingSpace = {AttributeType.NUMBER, 8},
		Corner = {AttributeType.BOOL, false},
		BendTop = {AttributeType.BOOL, false},
	},
	DecorativeVent = {
		BendBottom = {AttributeType.INT, 0},
		BendTop = {AttributeType.INT, 0},
		RingSpace = {AttributeType.NUMBER, 8},
		RingDepth = {AttributeType.NUMBER, 0},
	},
	DepositBox1 = {
		TiltItem = {AttributeType.NUMBER, 0},
		RotateItem = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		IncludeSidePart = {AttributeType.BOOL, true},
		BoxNumber = {AttributeType.INT, 1},
	},
	DepositBox2 = {
		TiltItem = {AttributeType.NUMBER, 0},
		RotateItem = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		IncludeSidePart = {AttributeType.BOOL, true},
		BoxNumber = {AttributeType.INT, 1},
	},
	DepositBox3 = {
		TiltItem = {AttributeType.NUMBER, 0},
		RotateItem = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		IncludeSidePart = {AttributeType.BOOL, true},
		BoxNumber = {AttributeType.INT, 1},
	},
	DeskPhoneCallable = {
		CallAcceptedVariable = {AttributeType.STATE_VALUE, ""},
		CallIgnoredVariable = {AttributeType.STATE_VALUE, ""},
		IsCalling = {AttributeType.EXPRESSION, ""},
		CallTime = {AttributeType.INT, 15},
	},
	DeskSafe = {
		ItemTagString = {AttributeType.STRING, ""},
		Item = {AttributeType.STRING, ""},
	},
	DisguiseTrigger = {
		Active = {AttributeType.EXPRESSION, ""},
		Disguise = {AttributeType.STRING, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
	},
	DomeCamera = {
		AngleMax = {AttributeType.STRING, "0"},
		AngleMin = {AttributeType.STRING, "0"},
		Exterior = {AttributeType.BOOL, true},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		NetworkDestination = {AttributeType.NETWORK_ID_STRING, ""},
		CamSet = {AttributeType.STRING, ""},
		CameraArea = {AttributeType.STRING, ""},
		AngleDown = {AttributeType.NUMBER, 0},
		Wireless = {AttributeType.BOOL, true},
		CamNumber = {AttributeType.INT, 0},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		Angle = {AttributeType.STRING, 0},
		DetectionSpeed = {AttributeType.NUMBER, 1},
		LocationKey = {AttributeType.STRING, ""},
		MapFloorOffset = {AttributeType.INT, 0},
	},
	DoorGlass = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorMetal = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		DifficultDrill = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorMetalElectronic = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		DifficultDrill = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorPushLeft = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		DifficultDrill = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorWood = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorWoodElectronic = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoubleVaultDoor = {
		OpenCondition = {AttributeType.EXPRESSION, ""},
	},
	Elevator = {
	},
	ElevatorCallButton = {
		CallVariable = {AttributeType.STATE_VALUE, ""},
		DisabledInCombat = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
	},
	ElevatorCardReader = {
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		DisabledInCombat = {AttributeType.BOOL, false},
	},
	EventPumpkin = {
	},
	ExplosionSource = {
	},
	FloorAccessCover = {
		CanOpen = {AttributeType.EXPRESSION, ""},
		OpenedVariable = {AttributeType.STATE_VALUE, ""},
	},
	Flowerpot = {
		Seed = {AttributeType.INT, 0},
	},
	FreestandingSafe = {
		Seed = {AttributeType.INT, 1},
		CanInteract = {AttributeType.EXPRESSION, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		ExplosiveOpenVariable = {AttributeType.STATE_VALUE, ""},
		OpenedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRemovedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRotationX = {AttributeType.NUMBER, 0},
		ItemRotationY = {AttributeType.NUMBER, 0},
		ItemRotationZ = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
	},
	GarageDoor = {
		Height = {AttributeType.EXPRESSION, "0"},
	},
	GlassKitchenTable = {
	},
	HackableComputer = {
		MonitorOffset = {AttributeType.VECTOR3, Vector3.new(0, 0, 0)},
		MonitorAngle = {AttributeType.NUMBER, 0},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		ScreenText = {AttributeType.EXPRESSION, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		NetworkId = {AttributeType.NETWORK_ID, 0},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		PasswordUnlockedVariable = {AttributeType.STATE_VALUE, ""},
		NetworkNameTag = {AttributeType.STRING, ""},
		DesktopBackground = {AttributeType.STRING, ""},
		PasswordDifficulty = {AttributeType.EXPRESSION, 0},
		OldMonitor = {AttributeType.BOOL, false},
		PhysicalAccessBlocked = {AttributeType.EXPRESSION, 0},
	},
	HeavySecurityDoor = {
		ServerExplosiveFullDamageVariable = {AttributeType.STATE_VALUE, ""},
		ExplosiveNoDamageVariable = {AttributeType.STATE_VALUE, ""},
		ExplosivePartialDamageVariable = {AttributeType.STATE_VALUE, ""},
		ExplosiveFullDamageVariable = {AttributeType.STATE_VALUE, ""},
		OpenCondition = {AttributeType.EXPRESSION, ""},
	},
	Helicopter = {
		ActiveCondition = {AttributeType.EXPRESSION, ""},
		StopAttemptDialogue = {AttributeType.STRING, ""},
		StartupTime = {AttributeType.INT, 60},
		ProgressVariable = {AttributeType.STATE_VALUE, ""},
		PoliceShutdownVariable = {AttributeType.STATE_VALUE, ""},
	},
	HiddenWallSafe = {
		PromptVisible = {AttributeType.EXPRESSION, ""},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		OpenedVariable = {AttributeType.STATE_VALUE, ""},
		Seed = {AttributeType.INT, 1},
		ExplosiveOpenVariable = {AttributeType.STATE_VALUE, ""},
		ItemRotationX = {AttributeType.INT, 0},
		ItemRotationY = {AttributeType.INT, 0},
		ItemRotationZ = {AttributeType.INT, 0},
		Image = {AttributeType.INT, 0},
		SafeLocatedVariable = {AttributeType.STATE_VALUE, ""},
		CoverColor = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
		OffsetX = {AttributeType.NUMBER, 0},
		KeyItem = {AttributeType.BOOL, false},
		CoverMaterial = {AttributeType.STRING, ""},
		SafeTag = {AttributeType.STRING, ""},
		HiddenShuffleId = {AttributeType.STRING, ""},
	},
	IndustrialShelvesSmall = {
		BoxSeed = {AttributeType.INT, 0},
		BoxDensity = {AttributeType.NUMBER, 0},
		BoxColor = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
	},
	InteractionBlocker = {
	},
	IntroCam = {
	},
	Ladder = {
		Decorative = {AttributeType.BOOL, false},
	},
	LandscapePhotoHorizontalRectangle = {
		Image = {AttributeType.INT, 0},
	},
	LandscapePhotoSquare = {
		Image = {AttributeType.INT, 0},
	},
	LandscapePhotoVerticalThird = {
		Image = {AttributeType.INT, 0},
		OffsetX = {AttributeType.NUMBER, 0},
	},
	Laptop = {
	},
	LaptopOld = {
		DesktopBackground = {AttributeType.STRING, ""},
		PasswordUnlockedVariable = {AttributeType.STATE_VALUE, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		NetworkId = {AttributeType.NETWORK_ID, 1},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		PasswordLockedCondition = {AttributeType.EXPRESSION, ""},
		PasswordDifficulty = {AttributeType.EXPRESSION, 0},
		ScreenText = {AttributeType.EXPRESSION, ""},
		NetworkNameTag = {AttributeType.STRING, ""},
	},
	LaundryBasket = {
		Disguise = {AttributeType.STRING, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
	},
	LeverageMove = {
		MoveDist = {AttributeType.EXPRESSION, 0},
		Prop = {AttributeType.STRING, ""},
		MovedToEndVariable = {AttributeType.STATE_VALUE, ""},
		VisibleCondition = {AttributeType.EXPRESSION, "1"},
		Heavy = {AttributeType.BOOL, true},
	},
	LongCoffeeTable = {
	},
	LootCash = {
		ItemTagString = {AttributeType.STRING, ""},
	},
	LootCash2 = {
		ItemTagString = {AttributeType.STRING, ""},
	},
	LootThermite = {
		ItemTagString = {AttributeType.STATE_VALUE, ""},
	},
	LootWeapons = {
		ItemTagString = {AttributeType.STRING, ""},
	},
	LowVent = {
		Blocked = {AttributeType.EXPRESSION, ""},
	},
	MetalDetector = {
		PowerLevel = {AttributeType.EXPRESSION, ""},
	},
	MinimapBlock = {
	},
	Monitor = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		ScreenText = {AttributeType.EXPRESSION, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		DesktopBackground = {AttributeType.STRING, ""},
	},
	NetworkSwitch = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		TriggerInvestigation = {AttributeType.EXPRESSION, true},
	},
	NoDropZone = {
	},
	OldMonitor = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		ScreenText = {AttributeType.EXPRESSION, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		DesktopBackground = {AttributeType.STRING, ""},
	},
	PowerBoxLarge = {
		TagWhileActive = {AttributeType.BOOL, false},
		AllowDisabling = {AttributeType.EXPRESSION, "1"},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		CombatDisableTarget = {AttributeType.EXPRESSION, ""},
		NoPropDamage = {AttributeType.EXPRESSION, ""},
		AllowRestoring = {AttributeType.EXPRESSION, "1"},
	},
	PowerBoxSmall = {
		TagWhileActive = {AttributeType.BOOL, false},
		AllowDisabling = {AttributeType.EXPRESSION, "1"},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		CombatDisableTarget = {AttributeType.EXPRESSION, ""},
		NoPropDamage = {AttributeType.EXPRESSION, ""},
		AllowRestoring = {AttributeType.EXPRESSION, "1"},
		Locked = {AttributeType.BOOL, false},
		ObjectName = {AttributeType.STRING, ""},
		PowerAreaParent = {AttributeType.STATE_VALUE, ""},
	},
	PropBase = {
	},
	RadioStation = {
		SocialEngineeringLevel = {AttributeType.INT, 1},
		DistractionDisabled = {AttributeType.EXPRESSION, ""},
		DistractionActive = {AttributeType.EXPRESSION, ""},
		DistractionVariable = {AttributeType.STATE_VALUE, ""},
		DistractionDialogue = {AttributeType.STRING, ""},
		DistractionSubtitle = {AttributeType.STRING, ""},
		Enabled = {AttributeType.EXPRESSION, "1"},
	},
	ScalablePlanter = {
		PlantHeight = {AttributeType.NUMBER, 3},
		PlantWidth = {AttributeType.NUMBER, 0},
	},
	ScalableWallPlanter = {
		PlantWidth = {AttributeType.NUMBER, 1},
		PlantHeight = {AttributeType.NUMBER, 2},
	},
	SearchableFilingCabinets = {
		FilesSpawned = {AttributeType.EXPRESSION, ""},
		KeyItem = {AttributeType.BOOL, false},
		ItemRemovedVariable = {AttributeType.STATE_VALUE, ""},
		ItemTagString = {AttributeType.STRING, ""},
	},
	SecurityCamera = {
		AngleMax = {AttributeType.STRING, "0"},
		AngleMin = {AttributeType.STRING, "0"},
		Exterior = {AttributeType.BOOL, true},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		NetworkDestination = {AttributeType.NETWORK_ID_STRING, ""},
		CamSet = {AttributeType.STRING, ""},
		CameraArea = {AttributeType.STRING, ""},
		AngleDown = {AttributeType.NUMBER, 0},
		Wireless = {AttributeType.BOOL, true},
		CamNumber = {AttributeType.INT, 0},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		Angle = {AttributeType.STRING, 0},
		DetectionSpeed = {AttributeType.NUMBER, 1},
		LocationKey = {AttributeType.STRING, ""},
		MapFloorOffset = {AttributeType.INT, 0},
	},
	ServerRack = {
	},
	ServerRackWideTerminal = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		Disconnected = {AttributeType.EXPRESSION, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		DesktopBackground = {AttributeType.STRING, ""},
		UseOldMonitor = {AttributeType.OPTIONAL_BOOL, false},
		ScreenText = {AttributeType.EXPRESSION, ""},
		NetworkNameTag = {AttributeType.STRING, ""},
		PasswordDifficulty = {AttributeType.EXPRESSION, ""},
		PasswordUnlockedVariable = {AttributeType.STATE_VALUE, ""},
		PasswordLockedCondition = {AttributeType.EXPRESSION, ""},
		ManualPasswordVariable = {AttributeType.STATE_VALUE, ""},
		ManualPasswordList = {AttributeType.STRING, ""},
		ManualPasswordRevealed = {AttributeType.EXPRESSION, ""},
		SecurityKeyNeeded = {AttributeType.EXPRESSION, ""},
		SecurityKeyInsertedVariable = {AttributeType.STATE_VALUE, ""},
	},
	StaticAmmoBox = {
	},
	SurfaceText = {
		TextKey = {AttributeType.STRING, ""},
		Font = {AttributeType.STRING, ""},
		HorizontalAlignment = {AttributeType.INT, 2},
		TextColor3 = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(1, 1, 1)},
	},
	TableGlass = {
	},
	TableGlassLarge = {
	},
	ThermiteBurn = {
		ProgressVariable = {AttributeType.STATE_VALUE, ""},
		StartedVariable = {AttributeType.STATE_VALUE, ""},
		BurnTime = {AttributeType.INT, 90},
	},
	ThinBush = {
	},
	TimelockCodePanel = {
		GlobalCountdownState = {AttributeType.STATE_VALUE, ""},
		CompletedVariable = {AttributeType.STATE_VALUE, ""},
		TimelockEnabled = {AttributeType.EXPRESSION, ""},
		SetState = {AttributeType.STATE_VALUE, ""},
		CountTime = {AttributeType.NUMBER, 60},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		SetValue = {AttributeType.EXPRESSION, ""},
	},
	TrespassZoneDisplay = {
		Enabled = {AttributeType.BOOL, true},
	},
	TriggerLocalChat = {
		Id = {AttributeType.STRING, ""},
		Variable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	TriggerVision = {
		Hold = {AttributeType.NUMBER, 0},
		Dist = {AttributeType.NUMBER, 40},
		ZoneSize = {AttributeType.NUMBER, 0.8},
		Active = {AttributeType.EXPRESSION, ""},
		Variable = {AttributeType.STATE_VALUE, ""},
	},
	TriggerZone = {
		IsGlobal = {AttributeType.BOOL, false},
		IsLocal = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		Variable = {AttributeType.STATE_VALUE, ""},
		HighlightZone = {AttributeType.BOOL, false},
		UpdateFrequency = {AttributeType.NUMBER, 1},
	},
	TutorialText = {
	},
	Van = {
		IsOpen = {AttributeType.EXPRESSION, ""},
		DoorAngleR = {AttributeType.EXPRESSION, 0},
		DoorAngleL = {AttributeType.EXPRESSION, 0},
	},
	VaultOpenRight = {
		OpenCondition = {AttributeType.EXPRESSION, ""},
	},
	WallSafe = {
		Seed = {AttributeType.INT, 1},
		CanInteract = {AttributeType.EXPRESSION, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		ExplosiveOpenVariable = {AttributeType.STATE_VALUE, ""},
		OpenedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRemovedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRotationX = {AttributeType.NUMBER, 0},
		ItemRotationY = {AttributeType.NUMBER, 0},
		ItemRotationZ = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
	},
	Window = {
		Bulletproof = {AttributeType.EXPRESSION, false},
		StateValue = {AttributeType.STATE_VALUE, ""},
		GlassColor = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
	},
	WindowClimb = {
		Blocked = {AttributeType.EXPRESSION, ""},
		Vertical = {AttributeType.BOOL, false},
	},
	WoodChair = {
	},
	WoodShootingTarget = {
	},
	WoodTargetWithSensor = {
	},
	LandscapePhotoIds = {
	},
	AccessRequestNode = {
		ServerCondition = {AttributeType.EXPRESSION, ""},
		Dialogue = {AttributeType.STRING, ""},
		ToolRequired = {AttributeType.STRING, ""},
		AccessVariable = {AttributeType.STATE_VALUE, ""},
		SocialEngineeringLevel = {AttributeType.INT, 0},
		BotServerTag = {AttributeType.STRING, ""},
		AccessOnceVariable = {AttributeType.STATE_VALUE, ""},
		AccessTime = {AttributeType.NUMBER, 1},
	},
	AlarmButton = {
	},
	ArmoredTruck = {
	},
	BasicPart = {
		Material = {AttributeType.STRING, "SmoothPlastic"},
		ColorHex = {AttributeType.STRING, "FFFFFF"},
	},
	BiometricLock = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
		BotServerTag = {AttributeType.STRING, ""},
		RewireEnabled = {AttributeType.EXPRESSION, ""},
	},
	Cabinet = {
	},
	ConditionalHighJumpRequired = {
		Climber3Condition = {AttributeType.EXPRESSION, 1},
		Color = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
		Material = {AttributeType.STRING, "Plastic"},
	},
	CustomMissionLoadPoint = {
	},
	CustomReportPoint = {
		Hidden = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		CameraOnly = {AttributeType.BOOL, false},
		AutoAlertBotTag = {AttributeType.STRING, ""},
		Visibility = {AttributeType.NUMBER, 1},
		RaiseAlert = {AttributeType.INT, 1},
		MinAlert = {AttributeType.INT, 1},
		MaxAlert = {AttributeType.INT, 3},
		NotificationMessage = {AttributeType.STRING, ""},
		ReportDialogue = {AttributeType.STRING, ""},
	},
	DebugSpawnLocation = {
		Active = {AttributeType.BOOL, false},
	},
	DynamicNode = {
		Id = {AttributeType.STRING, ""},
		TakedownImmunity = {AttributeType.BOOL, false},
	},
	ElevatorFunctional = {
		OpenCondition = {AttributeType.EXPRESSION, ""},
		PlayerInElevatorVariable = {AttributeType.STATE_VALUE, ""},
		BotInElevator = {AttributeType.STATE_VALUE, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
		LinkedElevator = {AttributeType.STRING, ""},
		NoUsing = {AttributeType.BOOL, false},
		NoDropBlocking = {AttributeType.BOOL, false},
		WarpTargetId = {AttributeType.STRING, ""},
		WarpPointId = {AttributeType.STRING, ""},
	},
	EscapeZone = {
	},
	FlowStart = {
	},
	FreeTrigger = {
		TitleKey = {AttributeType.STRING, ""},
		SubtitleKey = {AttributeType.STRING, ""},
		DisabledSubtitle = {AttributeType.STRING, ""},
		ServerVisible = {AttributeType.EXPRESSION, ""},
		ClientVisible = {AttributeType.EXPRESSION, ""},
		ServerEnabled = {AttributeType.EXPRESSION, ""},
		HoldTime = {AttributeType.NUMBER, 0.5},
		HoldAlert = {AttributeType.EXPRESSION, ""},
		SaveProgress = {AttributeType.BOOL, false},
		Tool = {AttributeType.STRING, ""},
		LinkToProp = {AttributeType.BOOL, false},
		HiddenShuffleId = {AttributeType.STRING, ""},
		SetVariable = {AttributeType.STATE_VALUE, ""},
		SetClientVariable = {AttributeType.STATE_VALUE, ""},
		TagWhileVisible = {AttributeType.BOOL, false},
		Debug = {AttributeType.BOOL, false},
		IncrementClientVariable = {AttributeType.STATE_VALUE, ""},
		OmniDir = {AttributeType.BOOL, false},
	},
	GuardCombatNode = {
	},
	init = {
	},
	IntercomCode = {
		SocialEngineeringDialogue = {AttributeType.STRING, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		HostageUse = {AttributeType.STATE_VALUE, ""},
		PickupNode = {AttributeType.STRING, ""},
		PickupVariable = {AttributeType.STATE_VALUE, ""},
		CallCondition = {AttributeType.EXPRESSION, ""},
		CallConditionPrompt = {AttributeType.STRING, ""},
		OpenedWithBluffVariable = {AttributeType.STATE_VALUE, ""},
		OpenedWithHostageVariable = {AttributeType.STATE_VALUE, ""},
		SocialEngineeringLevel = {AttributeType.NUMBER, 0},
		Responder = {AttributeType.STRING, ""},
	},
	IntercomPanel = {
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
	},
	InvestigationStandTrigger = {
		ActiveCondition = {AttributeType.EXPRESSION, ""},
		HighPriority = {AttributeType.BOOL, false},
		BotServerTag = {AttributeType.STRING, ""},
		ArrivalVariableDelay = {AttributeType.NUMBER, 0},
		ArrivalVariable = {AttributeType.STATE_VALUE, ""},
		Anim = {AttributeType.STRING, ""},
		Timeout = {AttributeType.NUMBER, 0},
		CallDialogue = {AttributeType.STRING, ""},
	},
	InvestigationTrigger = {
	},
	ItemDeposit = {
		SubtitleKey = {AttributeType.STRING, ""},
		DepositedVariable = {AttributeType.STATE_VALUE, ""},
		ItemTagForDeposit = {AttributeType.STRING, ""},
		ServerVisible = {AttributeType.EXPRESSION, ""},
		TitleKey = {AttributeType.STRING, ""},
		ClientVisible = {AttributeType.EXPRESSION, ""},
	},
	ItemSpawn = {
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		ModelHidden = {AttributeType.BOOL, false},
		FlatTrigger = {AttributeType.BOOL, false},
		InitialPickupTime = {AttributeType.NUMBER, 0},
		PickupCondition = {AttributeType.EXPRESSION, ""},
		KeyItem = {AttributeType.BOOL, false},
		ItemRemovedVariable = {AttributeType.STATE_VALUE, ""},
		IsSpawned = {AttributeType.EXPRESSION, ""},
	},
	KillZone = {
		BotServerTag = {AttributeType.STRING, ""},
		KillerInZone = {AttributeType.BOOL, false},
		TargetInZone = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		KillCountVariable = {AttributeType.STATE_VALUE, ""},
	},
	LeaningCover = {
		AllowSpawning = {AttributeType.EXPRESSION, false},
		Enabled = {AttributeType.EXPRESSION, true},
		SpawnsIgnoreProximity = {AttributeType.BOOL, false},
		UseFromAdjacentRoom = {AttributeType.BOOL, false},
		HoldDoor = {AttributeType.BOOL, false},
		ReverseDoor = {AttributeType.BOOL, false},
		CoverTag = {AttributeType.STRING, ""},
		HoldPriority = {AttributeType.EXPRESSION, 0},
		LeanRight = {AttributeType.BOOL, false},
	},
	LeaveMissionPoint = {
	},
	LootGeneric = {
		ItemTagString = {AttributeType.STATE_VALUE, ""},
		BagColor = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
		BagType = {AttributeType.STRING, "Backpack"},
		ModelHidden = {AttributeType.BOOL, false},
		InitialPickupTime = {AttributeType.NUMBER, 0.5},
		ItemRemovedVariable = {AttributeType.STRING, ""},
		Contents = {AttributeType.STRING, ""},
	},
	MissionEndZone = {
		PlayersExitedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRequired = {AttributeType.STRING, ""},
		ItemSecuredVariable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
		OpenForAll = {AttributeType.EXPRESSION, ""},
		HighlightZone = {AttributeType.BOOL, true},
	},
	MissionExit = {
	},
	PathfindingBlocker = {
	},
	PlaceholderProp = {
	},
	PointOfInterest = {
		Icon = {AttributeType.STRING, ""},
		IconScale = {AttributeType.NUMBER, 1},
	},
	PowerRoomProp1 = {
		PowerArea = {AttributeType.STRING, ""},
		DetectSabotage = {AttributeType.BOOL, true},
		DamagedVariable = {AttributeType.STATE_VALUE, ""},
	},
	PowerRoomProp2 = {
		PowerArea = {AttributeType.STRING, ""},
		DetectSabotage = {AttributeType.BOOL, true},
		DamagedVariable = {AttributeType.STATE_VALUE, ""},
	},
	RandomBotSpawnLocation = {
		StartingSpawnOnly = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, true},
	},
	RewireablePanel = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		RewireEnabled = {AttributeType.EXPRESSION, "1"},
		ObjectName = {AttributeType.STRING, ""},
		DifficultRewire = {AttributeType.BOOL, false},
	},
	SearchableFile = {
		TitleKey = {AttributeType.STRING, ""},
		SubtitleKey = {AttributeType.STRING, ""},
		ServerVisible = {AttributeType.EXPRESSION, ""},
		ClientVisible = {AttributeType.EXPRESSION, ""},
		ServerEnabled = {AttributeType.EXPRESSION, ""},
		HoldTime = {AttributeType.NUMBER, 2},
		HoldAlert = {AttributeType.EXPRESSION, ""},
		DisabledTitle = {AttributeType.EXPRESSION, ""},
		DisabledSubtitle = {AttributeType.EXPRESSION, ""},
		Notification = {AttributeType.STRING, ""},
		SetVariable = {AttributeType.STATE_VALUE, ""},
	},
	ShuffleTarget = {
		ShuffleTag = {AttributeType.STRING, ""},
		MatchVariable = {AttributeType.STATE_VALUE, ""},
	},
	SoundSource = {
		SoundId = {AttributeType.EXPRESSION, "0"},
		Volume = {AttributeType.NUMBER, 0.5},
		Looped = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		SoundLength = {AttributeType.NUMBER, 0},
		RollOffMaxDistance = {AttributeType.NUMBER, 10000},
	},
	SpawnLocation = {
	},
	StandingCover = {
		AllowSpawning = {AttributeType.EXPRESSION, false},
		Enabled = {AttributeType.EXPRESSION, true},
		SpawnsIgnoreProximity = {AttributeType.BOOL, false},
		UseFromAdjacentRoom = {AttributeType.BOOL, false},
		HoldDoor = {AttributeType.BOOL, false},
		ReverseDoor = {AttributeType.BOOL, false},
		CoverTag = {AttributeType.STRING, ""},
		HoldPriority = {AttributeType.EXPRESSION, 0},
	},
	StateScriptPart = {
	},
	TriggerHit = {
	},
	TriggerRoom = {
		Active = {AttributeType.EXPRESSION, ""},
		PlayersInRoomVariable = {AttributeType.STATE_VALUE, ""},
		ClientInRoomVariable = {AttributeType.STATE_VALUE, ""},
	},
	TriggerRoomBot = {
		BotServerTag = {AttributeType.STRING, ""},
		ActiveCountVariable = {AttributeType.STATE_VALUE, ""},
		HostageCountVariable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	TriggerThreshhold = {
		PlayersBeforeThreshholdVariable = {AttributeType.STATE_VALUE, ""},
		PlayersAfterThreshholdVariable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	TriggerZoneBot = {
		RagdollCountVariable = {AttributeType.STATE_VALUE, ""},
		HostageCountVariable = {AttributeType.STATE_VALUE, ""},
		DeathCountVariable = {AttributeType.STATE_VALUE, ""},
		BotServerTag = {AttributeType.STRING, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	VisionBlocker = {
	},
	WarpPoint = {
		WarpPointId = {AttributeType.STRING, ""},
		WarpTargetId = {AttributeType.STRING, ""},
		WarpOnHit = {AttributeType.EXPRESSION, ""},
		WarpKeepsOffset = {AttributeType.BOOL, true},
		WarpOnIncrement = {AttributeType.EXPRESSION, ""},
		WarpHostages = {AttributeType.BOOL, true},
	},
	AlarmedBehaviorOverride = {
		BotServerTag = {AttributeType.STRING, ""},
		CustomBehavior = {AttributeType.STRING, ""},
	},
	AlertRaiseCondition = {
		Amount = {AttributeType.INT, 1},
		MinValue = {AttributeType.INT, 1},
		MaxValue = {AttributeType.INT, 3},
		Reason = {AttributeType.STRING, ""},
		Condition = {AttributeType.EXPRESSION, ""},
	},
	BodyAltTrigger = {
		BotServerTag = {AttributeType.STRING, ""},
		HoldTime = {AttributeType.NUMBER, 1},
		TitleKey = {AttributeType.STRING, ""},
		SubtitleKey = {AttributeType.STRING, ""},
		TriggerNotification = {AttributeType.STRING, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		BotClientTag = {AttributeType.STRING, ""},
		ClientVisible = {AttributeType.EXPRESSION, "1"},
		ServerEnabled = {AttributeType.EXPRESSION, "1"},
	},
	BotAltTrigger = {
		BotClientTag = {AttributeType.STRING, ""},
		BotServerTag = {AttributeType.STRING, ""},
		ServerEnabled = {AttributeType.EXPRESSION, ""},
		AllowHostages = {AttributeType.BOOL, false},
		TriggerNotification = {AttributeType.STRING, ""},
		TriggerLocalNotification = {AttributeType.STRING, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		TitleKey = {AttributeType.STRING, ""},
		AllowPatroling = {AttributeType.BOOL, false},
		ClientVisible = {AttributeType.EXPRESSION, "1"},
		HoldTime = {AttributeType.NUMBER, 1},
		SubtitleKey = {AttributeType.STRING, ""},
	},
	BotStateTracker = {
		IncapacitationCountVariable = {AttributeType.STATE_VALUE, ""},
		HostageCountVariable = {AttributeType.STATE_VALUE, ""},
		DeathCountVariable = {AttributeType.STATE_VALUE, ""},
		FleeCountVariable = {AttributeType.STATE_VALUE, ""},
		TotalCountVariable = {AttributeType.STATE_VALUE, ""},
		BotServerTag = {AttributeType.STRING, ""},
	},
	CombatSpawner = {
		ReinforcementPool = {AttributeType.STRING, ""},
		TimeBetweenSpawns = {AttributeType.EXPRESSION, ""},
		EnemyWeapons = {AttributeType.STRING, ""},
		SpawnTags = {AttributeType.STRING, ""},
		FlowMap = {AttributeType.STRING, ""},
		SpawnSquads = {AttributeType.BOOL, false},
		EnemyType = {AttributeType.STRING, ""},
		AllowDespawn = {AttributeType.BOOL, false},
		SpawnsBlockedVariable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
		SpawnCap = {AttributeType.EXPRESSION, 6},
		EnemyWeaponsWave1 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave2 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave3 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave4 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave5 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave6 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave7 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave8 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave9 = {AttributeType.EXPRESSION, nil},
	},
	CombatWaveSpawner = {
	},
	ConditionalStateUpdate = {
		Watch = {AttributeType.EXPRESSION, ""},
		Condition = {AttributeType.EXPRESSION, ""},
		InactiveVariable = {AttributeType.STATE_VALUE, ""},
		ActiveVariable = {AttributeType.STATE_VALUE, ""},
	},
	ConversationGenericSocialEngineering = {
		BotServerTag = {AttributeType.STRING, ""},
		Visible = {AttributeType.EXPRESSION, ""},
		SocialEngineeringLevel = {AttributeType.INT, 0},
		Icon = {AttributeType.STRING, "ChatGeneric"},
		Text = {AttributeType.STRING, ""},
		Dialogue = {AttributeType.STRING, ""},
		SetVariable = {AttributeType.STATE_VALUE, ""},
		Notification = {AttributeType.STRING, ""},
		NotificationDelay = {AttributeType.NUMBER, 2.5},
		Disguise = {AttributeType.STRING, ""},
	},
	ConversationResponseCustomBehavior = {
		BotServerTag = {AttributeType.STATE_VALUE, ""},
		DisableReason = {AttributeType.EXPRESSION, ""},
		SocialEngineeringLevel = {AttributeType.INT, 0},
		Dialogue = {AttributeType.STRING, ""},
		CustomBehavior = {AttributeType.STRING, ""},
	},
	CoverFillSpawner = {
		CoverSearchLimit = {AttributeType.INT, 5},
		ActiveVariable = {AttributeType.STATE_VALUE, ""},
		SpawnsBlockedVariable = {AttributeType.STATE_VALUE, ""},
		FillFrequency = {AttributeType.NUMBER, 6},
		ReinforcementPool = {AttributeType.STRING, ""},
		UnitChanceHeavy = {AttributeType.NUMBER, 0.2},
		CoverTags = {AttributeType.STRING, ""},
		SpawnTags = {AttributeType.STRING, ""},
		Active = {AttributeType.EXPRESSION, "Mission_AlarmRaised"},
		SpawnCap = {AttributeType.EXPRESSION, "8"},
	},
	CustomBehaviorCondition = {
		Priority = {AttributeType.STRING, "Custom1"},
		BotServerTag = {AttributeType.STRING, ""},
		CustomBehavior = {AttributeType.STRING, ""},
		LoopApply = {AttributeType.BOOL, false},
		Condition = {AttributeType.EXPRESSION, false},
	},
	CustomConversation = {
	},
	CustomHack = {
		DeployCost = {AttributeType.INT, 20},
		DeployTime = {AttributeType.INT, 10},
		NodeId = {AttributeType.NETWORK_ID, 1},
		NameKey = {AttributeType.STRING, ""},
		SubtitleKey = {AttributeType.STRING, ""},
		DescriptionKey = {AttributeType.STRING, ""},
		BlockDeallocation = {AttributeType.BOOL, false},
		ProgressVariable = {AttributeType.STATE_VALUE, ""},
		PauseCondition = {AttributeType.EXPRESSION, ""},
		Priority = {AttributeType.INT, 0},
		Difficulty = {AttributeType.EXPRESSION, ""},
		Suspicion = {AttributeType.INT, 1},
		PrimaryHack = {AttributeType.BOOL, false},
		Visible = {AttributeType.EXPRESSION, "1"},
		DeployedVariable = {AttributeType.STATE_VALUE, ""},
		DeployedOnceVariable = {AttributeType.STATE_VALUE, ""},
		ScriptedBehavior = {AttributeType.STRING, ""},
		DisableReason = {AttributeType.EXPRESSION, ""},
		IconId = {AttributeType.EXPRESSION, 0},
	},
	DelayedStateUpdate = {
		Watch = {AttributeType.EXPRESSION, ""},
		DelayTime = {AttributeType.EXPRESSION, 5},
		SetVariable = {AttributeType.STATE_VALUE, ""},
		OnlyMatch = {AttributeType.BOOL, false},
	},
	HackableDoor = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
	},
	HackableElevator = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
	},
	HackingNodeStatus = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		DisabledVariable = {AttributeType.STATE_VALUE, ""},
		CompromisedVariable = {AttributeType.STATE_VALUE, ""},
	},
	HiddenShuffle = {
		HiddenShuffleId = {AttributeType.STRING, ""},
		FrontCount = {AttributeType.INT, 0},
		BackCount = {AttributeType.INT, 0},
		RevealCount = {AttributeType.INT, 1},
		RevealCountVariable = {AttributeType.STATE_VALUE, ""},
		FailCountVariable = {AttributeType.STATE_VALUE, ""},
		ClientFailCountVariable = {AttributeType.STATE_VALUE, ""},
		Seed = {AttributeType.INT, 1},
		RevealAllCondition = {AttributeType.EXPRESSION, ""},
	},
	ItemStateTracker = {
		GroundCountVariable = {AttributeType.STATE_VALUE, ""},
		TotalHeldCountVariable = {AttributeType.STATE_VALUE, ""},
		BotHeldCountVariable = {AttributeType.STATE_VALUE, ""},
		ClientHeldCountVariable = {AttributeType.STATE_VALUE, ""},
		ItemTag = {AttributeType.STRING, ""},
	},
	ItemSwapCondition = {
		Condition = {AttributeType.EXPRESSION, ""},
		SwapItemType = {AttributeType.STRING, ""},
		SwapItemTag = {AttributeType.STRING, ""},
		TargetItemTag = {AttributeType.STRING, ""},
	},
	LerpOperation = {
		OutputVariable = {AttributeType.STATE_VALUE, ""},
		Value0 = {AttributeType.EXPRESSION, ""},
		Value1 = {AttributeType.EXPRESSION, ""},
		Delta = {AttributeType.EXPRESSION, 0.5},
		AlwaysUpdate = {AttributeType.EXPRESSION, false},
		UpdateClock = {AttributeType.EXPRESSION, "0"},
	},
	MissionCompletionTrigger = {
		Condition = {AttributeType.EXPRESSION, ""},
		Timeout = {AttributeType.NUMBER, 1},
		CompleteVariable = {AttributeType.STATE_VALUE, ""},
	},
	NetworkRouter = {
	},
	Notification = {
		Condition = {AttributeType.EXPRESSION, ""},
		Notification = {AttributeType.STRING, ""},
	},
	RandomBotSpawner = {
		SpawningActive = {AttributeType.EXPRESSION, ""},
		SpawnTimeMin = {AttributeType.NUMBER, 4},
		SpawnTimeMax = {AttributeType.NUMBER, 10},
		Behavior = {AttributeType.STRING, ""},
		Class = {AttributeType.STRING, ""},
		CivilianHighlight = {AttributeType.BOOL, false},
		DetectionSpeed = {AttributeType.NUMBER, 1},
		NodesBreak = {AttributeType.STRING, ""},
		EnforceClass = {AttributeType.STRING, ""},
		Profile = {AttributeType.STRING, ""},
		Title = {AttributeType.STRING, ""},
		Outfit = {AttributeType.STRING, ""},
		Nodes = {AttributeType.STRING, ""},
		HostageDifficulty = {AttributeType.NUMBER, 0},
		ObjectiveHighlight = {AttributeType.BOOL, false},
		Weapon = {AttributeType.STRING, ""},
	},
	ReinforcementPool = {
		PoolName = {AttributeType.STRING, ""},
		WaveResetTimeMinimum = {AttributeType.NUMBER, 0},
		WaveStateVariable = {AttributeType.STATE_VALUE, ""},
		WaveVariable = {AttributeType.STATE_VALUE, ""},
		PoolLimit = {AttributeType.EXPRESSION, ""},
		RemainingVariable = {AttributeType.STATE_VALUE, ""},
		ActiveVariable = {AttributeType.STATE_VALUE, ""},
		WaveResetTime = {AttributeType.EXPRESSION, ""},
		WaveResetTimeDecrease = {AttributeType.NUMBER, 0},
	},
	SearchPatternCondition = {
		Condition = {AttributeType.EXPRESSION, ""},
		BotServerTag = {AttributeType.STRING, ""},
	},
	ServerChat = {
	},
	SniperSpawner = {
		Active = {AttributeType.EXPRESSION, ""},
		Nodes = {AttributeType.STRING, ""},
		InitialSpawns = {AttributeType.EXPRESSION, 0},
		RespawnRate = {AttributeType.EXPRESSION, 20},
	},
	StateScript = {
	},
	TargetLureHack = {
	},
	TimerComponent = {
		SetVariable = {AttributeType.STATE_VALUE, ""},
		SetFormattedVariable = {AttributeType.STATE_VALUE, ""},
		StartValue = {AttributeType.EXPRESSION, 0},
		TargetValue = {AttributeType.EXPRESSION, 60},
		Increment = {AttributeType.EXPRESSION, 1},
		Offset = {AttributeType.EXPRESSION, ""},
		Enabled = {AttributeType.EXPRESSION, ""},
	},
	TrackBotsDown = {
	},
	TrackItemHeldServer = {
	},
	TrackNodeReserved = {
	},
	AutoConversationTrigger = {
		BotClientTag = {AttributeType.STRING, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	BlackoutScreen = {
		Active = {AttributeType.EXPRESSION, ""},
	},
	FileUITrigger = {
		Trigger = {AttributeType.EXPRESSION, ""},
		Lines = {AttributeType.STRING, ""},
	},
	GameCredits = {
	},
	HackingNodeHighlight = {
	},
	LocalChat = {
		DelayStart = {AttributeType.NUMBER, 0},
		Active = {AttributeType.EXPRESSION, ""},
		Dialogue = {AttributeType.STRING, ""},
		TriggerOnce = {AttributeType.BOOL, false},
		StealthOnly = {AttributeType.BOOL, false},
	},
	LocalStateComponents = {
	},
	LocalWeaponTracker = {
	},
	LocationCard = {
	},
	MusicController = {
		ActivePriority = {AttributeType.EXPRESSION, "1"},
		TrackId = {AttributeType.EXPRESSION, 0},
		NoLoop = {AttributeType.BOOL, false},
		Volume = {AttributeType.NUMBER, 0.5},
		MusicType = {AttributeType.STRING, Stealth},
	},
}]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX634EE0783EE94622A3F99D7B60D08C70">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">PropAttributeTypes</string>
				<string name="ScriptGuid">{648F9189-0BC2-4859-8224-AD62022CB447}</string>
				<ProtectedString name="Source"><![CDATA[local PropAttributeTypes

PropAttributeTypes = {
	NUMBER = 1,
	INT = 2,
	EXPRESSION = 3,
	STATE_VALUE = 4,
	STRING = 5,
	NETWORK_ID = 6,
	NETWORK_ID_STRING = 7,
	OPTIONAL_BOOL = 8,
	OPTIONAL_MISSION_COLOR = 9,
	OPTIONAL_MATERIAL = 10,
	VECTOR3 = 11,
	OPTIONAL_INT = 12,
	BOOL = 13,
	CFRAME = 14,
}

return PropAttributeTypes]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX6AB1A9D513FB4600B5CA8A8885F93B38">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">StringConversion</string>
				<string name="ScriptGuid">{D800CAED-D384-4037-8939-6E3EA0C52886}</string>
				<ProtectedString name="Source"><![CDATA[local CHARACTER_SET = {
	"b",
	"c",
	"d",
	"f",
	"g",
	"h",
	"j",
	"k",
	"m",
	"p",
	"q",
	"r",
	"t",
	"v",
	"w",
	"x",
	"y",
	"3",
	"4",
	"6",
	"7",
	"8",
	"9",
	"!",
	'"',
	"#",
	"$",
	"%",
	"&",
	"'",
	"(",
	")",
	"*",
	"+",
	",",
	"-",
	".",
	"/",
	":",
	";",
	"<",
	"=",
	">",
	"?",
	"@",
	"B",
	"C",
	"D",
	"F",
	"G",
	"H",
	"J",
	"K",
	"M",
	"P",
	"Q",
	"R",
	"T",
	"V",
	"W",
	"X",
	"Y",
	"[",
	"\\",
	"]",
	"^",
	"_",
	"`",
	"{",
	"|",
	"}",
	"~",
}

local characterKeys = {}
local characterValues = {}
for i, v in pairs(CHARACTER_SET) do
	characterKeys[v] = i - 1
	characterValues[i - 1] = v
end

local CHAR_COUNT = #CHARACTER_SET
return {
	StringToNumber = function(str, cursor, size)
		local total = 0
		for i = cursor, cursor + size - 1 do
			local char = str:sub(cursor, cursor)
			total = total * CHAR_COUNT + characterKeys[char]
			cursor += 1
		end
		return total
	end,

	NumberToString = function(number, charCount)
		local str = ""
		local iteration = 0
		while number >= 0 and iteration < charCount do
			local value = number % CHAR_COUNT
			str = characterValues[value] .. str
			number = math.floor(number / CHAR_COUNT)
			iteration += 1
		end
		return str
	end,

	GetMaxNumber = function(charCount)
		return math.pow(CHAR_COUNT, charCount) - 1
	end,
}]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX4966EF2CF8794E75B330EAA131C3EE82">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">TinkerExtensions</string>
				<string name="ScriptGuid">{19CFC69C-9688-4393-B6FC-050D1B1E49A6}</string>
				<ProtectedString name="Source"><![CDATA[local Tinker = {}

Tinker.AttValLogLevel = {
	NONE = {0, "ERROR"},
	MIN = {0, "ERROR"},
	DEFAULT = {2, "ERROR"},
	ATTR_UNKNOWN = {1, "AttrUnknown"},
	ATTR_INCOMPAT  = {2, "AttrIncompat"},
	ATTR_UNKNOWN_BYPASS = {3, "AttrUnknownBypass"},
	UNCAUGHT_DISCARD = {4, "UncaughtDiscard"},
	DEFAULT_POLICY = {5, "DefaultPolicy"},
	ALL = {4736251, "ERROR"},
	MAX = {4736251, "ERROR"}
}

function Tinker.GetAttrLogLevel()
	local logAttrVal = workspace:GetAttribute("TinkerAttrLogLevel")
	return logAttrVal and Tinker.AttValLogLevel[string.upper(logAttrVal)] or Tinker.AttValLogLevel.DEFAULT
end

function Tinker.AttValWarn(logLevel, instanceName, attrName, className)
	if logLevel[1] > Tinker.GetAttrLogLevel()[1] then return end
	warn(`[{logLevel[2]}] [Class: {className}] {instanceName}.{attrName}`)
end

return Tinker
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX5B399118D0694B09BA6AC3C7A2FAE087">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">Util</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXCD169AD03D104E93B3AC7795E143C9AC">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Actor</string>
					<string name="ScriptGuid">{D7E84EE7-B73E-4AEC-93D4-09449D23F347}</string>
					<ProtectedString name="Source"><![CDATA[local module = {
	Create = require(script._ActorCreation._Create),

	State = require(script._ActorState._State),
	Derived = require(script._ActorState._Derived),
	DerivedTable = require(script._ActorState._DerivedTable),
	Watch = require(script._ActorState._Watch),

	Spring = require(script._ActorAnim._ActorSpring),
	Cubic = require(script._ActorAnim._Cubic),

	OnChange = require(script._OnChange),
}

return module]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="Folder" referent="RBXACDCD1E248504CF09C47A6F620620CDA">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">_ActorAnim</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBXD73D5FFC4935414F882E248C3F562C59">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_ActorSpring</string>
							<string name="ScriptGuid">{E9FE25BE-C662-4BB9-BE1C-B7059AD9F3D8}</string>
							<ProtectedString name="Source"><![CDATA[local AnimRunner = require(script.Parent._Anim)

local numberClose = function(x, y)
	return math.abs(x - y) < 0.01
end
local vectorClose = function(x, y)
	return (x - y).magnitude < 0.01
end
local udim2Close = function(x, y)
	local rel = x - y
	return math.abs(rel.X.Offset) <= 1 and math.abs(rel.Y.Offset) <= 1 and math.abs(rel.X.Scale) < 0.01 and math.abs(rel.Y.Scale) < 0.01 
end

local function getStartingVelocityByType(value)
	if typeof(value) == "number" then
		return 0, numberClose
	elseif typeof(value) == "Vector3" then
		return Vector3.new(), vectorClose
	--elseif typeof(value) == "UDim2" then
	--	return UDim2.new(), udim2Close
	end
end

local Spring = {
	_Update = function(self)
		self.T = self._Follow._Value
		if self._Active then return true end
		AnimRunner:Start(self)
	end,
	_Step = function(self, dt)
		if self._IsClose(self._Value, self.T) then
			self._Value = self.T
			return true
		end
		if dt > 0.03 then dt = 0.03 end
		local accel = (self.T - self._Value) * self._Force - self.V * self._Damping
		local vel = self.V
		self.V = self.V + accel * dt * self._Speed
		self._Value = self._Value + (self.V + vel) * dt * 0.5 * self._Speed
		return false
	end,
	_GetDependencies = function(self)
		return { self._Follow }
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		self._Follow._Dependent[self] = true
		if self._Follow._Init then
			self._Follow:_Init()
		end
		self._Value = self._Follow._Value -- Position
		self.T = self._Follow._Value -- Target
		self.V, self._IsClose = getStartingVelocityByType(self._Follow._Value)
	end
}
Spring.__index = Spring

return function(follow, force, damping, speed)
	local self = {}
	self._StateType = "_Spring"
	self._Active = false
	self._Follow = follow
	self._Force = force or 50
	self._Damping = damping or 10
	self._Speed = speed or 1
	self._Temp = follow._Temp

	self._Priority = follow._Priority + 1
	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Spring)
	return self
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXE8BC2CDEA366408D97719E426632D221">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_Anim</string>
							<string name="ScriptGuid">{F288EC48-8A8A-4F94-9996-666D01783997}</string>
							<ProtectedString name="Source"><![CDATA[local RunService = game:GetService("RunService")
local Update = require(script.Parent.Parent._ActorState._Update)

local Anim = {}
Anim._List = {}
Anim._Active = false

function Anim:Start(data)
	self._List[data] = true
	data._Active = true
	if self._Active then return end
	self._Active = true
	self._StepEvent = RunService.RenderStepped:Connect(function(dt)
		for data in pairs(self._List) do
			if data:_Step(dt) then
				self._List[data] = nil
				data._Active = false
			end
			Update(data)
		end
		if not next(self._List) then
			self._Active = false
			self._StepEvent:Disconnect()
			self._StepEvent = nil
		end
	end)
end

return Anim]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX75394EF2BE6E44FDBDA312A8AAF2210D">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_Cubic</string>
							<string name="ScriptGuid">{966EF197-E356-4072-9A84-FF1D948EEDCE}</string>
							<ProtectedString name="Source"><![CDATA[local DEFAULT_LINEAR_TRANSITION_RATE = 4

local AnimRunner = require(script.Parent.Parent._ActorAnim._Anim)

local Cubic = {
	_Update = function(self)
		self.T = self._Follow._Value
		if self._Active then return true end
		AnimRunner:Start(self)
	end,
	_Step = function(self, dt)
		local shift = dt * self._Speed
		local done = false
		if math.abs(self.T - self.P) < shift then
			self.P = self.T
			done = true
		elseif self.P < self.T then
			self.P += shift
		else
			self.P -= shift
		end
		local a = self.P
		self._Value = a * a * (-2 * a + 3)
		return done
	end,
	_GetDependencies = function(self)
		return { self._Follow }
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		self._Follow._Dependent[self] = true
		if self._Follow._Init then
			self._Follow:_Init()
		end
		local a = self._Follow._Value
		self.P = a -- Position
		self.T = a -- Target
		self._Value = a * a * (-2 * a + 3)
	end
}
Cubic.__index = Cubic

return function(follow, speed)
	local self = {}
	self._StateType = "_Cubic"
	self._Active = false
	self._Follow = follow
	self._Speed =  DEFAULT_LINEAR_TRANSITION_RATE
	if speed then
		self._Speed = self._Speed * speed
	end
	self._Temp = follow._Temp

	self._Priority = follow._Priority + 1
	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Cubic)
	return self
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX0E1AF04AEEAD44B8B4887246C364859E">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_Linear</string>
							<string name="ScriptGuid">{D87754A4-0832-4FF9-97FE-DD804C263594}</string>
							<ProtectedString name="Source"><![CDATA[local DEFAULT_LINEAR_TRANSITION_RATE = 4

local AnimRunner = require(script.Parent.Parent._ActorAnim._Anim)

local Cubic = {
	_Update = function(self)
		self.T = self._Follow._Value
		if self._Active then return true end
		AnimRunner:Start(self)
	end,
	_Step = function(self, dt)
		local shift = dt * self._Speed
		local done = false
		if math.abs(self.T - self.P) < shift then
			self.P = self.T
			done = true
		elseif self.P < self.T then
			self.P += shift
		else
			self.P -= shift
		end
		local a = self.P
		self._Value = a * a * (-2 * a + 3)
		return done
	end,
	_GetDependencies = function(self)
		return { self._Follow }
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		self._Follow._Dependent[self] = true
		if self._Follow._Init then
			self._Follow:_Init()
		end
		local a = self._Follow._Value
		self.P = a -- Position
		self.T = a -- Target
		self._Value = a * a * (-2 * a + 3)
	end
}
Cubic.__index = Cubic

return function(follow, speed)
	local self = {}
	self._StateType = "_Cubic"
	self._Active = false
	self._Follow = follow
	self._Speed =  DEFAULT_LINEAR_TRANSITION_RATE
	if speed then
		self._Speed = self._Speed * speed
	end
	self._Temp = follow._Temp

	self._Priority = follow._Priority + 1
	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Cubic)
	return self
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBX97F89AEEF1CE4C44A35393C98C8A1E0F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">_ActorCreation</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX12972F2661424DA8975F55CA57A0B736">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_Create</string>
							<string name="ScriptGuid">{2110A828-566D-4950-81F6-0B8FE8C5A12E}</string>
							<ProtectedString name="Source"><![CDATA[local TABLE = "table"
local SCRIPT_SIGNAL = "RBXScriptSignal"
local INST = "Instance"
local DEBUG = "Debug"
local TEMP_STATE = "TempState"

local HandleStateCleanup = require(script.Parent:WaitForChild("_HandleStateCleanup"))


local function processChildren(parent, item, stateLink)
	if typeof(item) == INST then
		item.Parent = parent
		return
	end
	if item._DerivedTable then
		item:_Init()
		item.OnAdd = function(_, instance)
			if typeof(instance) == INST then
				instance.Parent = parent
			end
		end
		item.OnRemove = function(_, instance)
			if typeof(instance) == INST then
				instance:Destroy()
			end
		end
		for _, instance in pairs(item._Value) do
			if typeof(instance) == INST then
				instance.Parent = parent
			end
		end
		if stateLink then
			table.insert(stateLink, item)
		end
	else
		for _, c in pairs(item) do
			processChildren(parent, c, stateLink)
		end
	end
end

return function(className, props, children, autoCleanup)
	local instance = Instance.new(className)

	local stateLink
	if autoCleanup then
		stateLink = {}
	end

	for name, value in pairs(props) do
		if name == DEBUG or name == TEMP_STATE then continue end

		if typeof(value) == TABLE then
			if value._StateType then
				value._Link[instance] = name
				if value._Init then
					value:_Init()
				end
				instance[name] = value._Value
				if autoCleanup then
					table.insert(stateLink, value)
				end
			end
		elseif typeof(name) == TABLE then
			if name._OnChange then
				local propName = name._Property
				instance:GetPropertyChangedSignal(propName):Connect(function() value(instance[propName]) end)
				value(props[propName] or instance[propName])
			end
		elseif typeof(instance[name]) == SCRIPT_SIGNAL then
			instance[name]:Connect(value)
		else
			instance[name] = value
		end
	end

	if children then
		processChildren(instance, children, autoCleanup and stateLink)
	end

	if autoCleanup and next(stateLink) then
		instance.AncestryChanged:Connect(function()
			if instance.Parent == nil then
				if props.Debug then
					warn("Cleanup:", props.Debug, stateLink)
				end
				for _, dep in pairs(stateLink) do
					dep._Link[instance] = nil
					HandleStateCleanup(dep)
				end
			end
		end)
	end

	return instance
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX507EFB84330644FBA4C80711C7F43A89">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_HandleStateCleanup</string>
							<string name="ScriptGuid">{50C8E543-3D70-4AE7-9779-EBB735B3DEA1}</string>
							<ProtectedString name="Source"><![CDATA[local cleanup
cleanup = function(state)
	if state.Debug then
		warn(state.Debug, state._Temp, state._GetDependencies ~= nil, next(state._Dependent), next(state._Link))
	end
	if not state._Persist and state._GetDependencies and not next(state._Dependent) and not next(state._Link) then
		if state.Debug then
			warn("Cleanup", state.Debug, state:_GetDependencies())
		end
		state._Initialized = false
		for _, dep in pairs(state:_GetDependencies()) do
			dep._Dependent[state] = nil
			cleanup(dep)
		end
	end
end

return cleanup]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBX8881E004D2DB4399A4D5676276B0BAE8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">_ActorState</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX436BB467F38A499CAE9A8516E4749D4A">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_Derived</string>
							<string name="ScriptGuid">{D16B012F-8C65-4A87-A1E8-951903240BE8}</string>
							<ProtectedString name="Source"><![CDATA[local Derived = {
	_Update = function(self)
		local values = {}
		for k, v in pairs(self._Dependencies) do
			values[k] = v._Value or false
		end
		local newValue = self._Eval(unpack(values))
		if newValue ~= self._Value then
			self._Value = newValue
			return true
		end
		return false
	end,
	_GetDependencies = function(self)
		return self._Dependencies
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		for _, v in pairs(self._Dependencies) do
			v._Dependent[self] = true
			if v._Init then
				v:_Init()
			end
		end
		self:_Update()
	end
}
Derived.__index = Derived

return function(eval, ...)
	local self = {}
	self._StateType = "_Derived"
	self._Eval = eval
	self._Dependencies = {...}

	local priority = 0
	local temp = false
	for k, v in pairs(self._Dependencies) do
		priority = math.max(priority, v._Priority)
		temp = temp or v._Temp
	end

	self._Priority = priority + 1
	self._Temp = temp

	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Derived)
	return self
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXC94744A70F97433EA87203C63B7AD4D9">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_DerivedTable</string>
							<string name="ScriptGuid">{5B9B9783-35E5-4221-8A16-00B0AC3DB7DE}</string>
							<ProtectedString name="Source"><![CDATA[local DerivedTable = {
	_Update = function(self)
		local changed = false
		local input = self._Input._Value

		for k, v in pairs(input) do
			local li = self._LastInput[k]
			if v ~= li then
				changed = true
				if li and self.OnRemove then
					self.OnRemove(k, self._Value[k])
				end
				self._LastInput[k] = v
				self._Value[k] = self._Eval(k, v)
				if self.OnAdd then
					self.OnAdd(k, self._Value[k])
				end
			end
		end

		for k, v in pairs(self._LastInput) do
			if not input[k] then
				if self.OnRemove then
					self.OnRemove(k, self._Value[k])
				end
				self._LastInput[k] = nil
				changed = true
			end
		end

		return changed
	end,
	_GetDependencies = function(self)
		return { self._Input }
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		self._Input._Dependent[self] = true
		if self._Input._Init then
			self._Input:_Init()
		end
		self:_Update()
	end
}
DerivedTable.__index = DerivedTable

return function(eval, input, onAdd, onRemove)
	local self = {}
	self._StateType = "_DerivedTable"
	self._DerivedTable = true
	self._Eval = eval
	self._Value = {}
	self._LastInput = {}
	self._Input = input
	self._Temp = input._Temp
	self._Priority = input._Priority + 1

	self.OnAdd = onAdd
	self.OnRemove = onRemove

	self._Dependent = {}
	self._Link = {}

	setmetatable(self, DerivedTable)
	return self
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX32FC061A07AF4BCC85010B45CC881F6A">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_State</string>
							<string name="ScriptGuid">{3C480421-EFD2-4772-BE3F-D86F54DC1C48}</string>
							<ProtectedString name="Source"><![CDATA[local Update = require(script.Parent:WaitForChild("_Update"))

local State = {
	set = function(self, value)
		if self._Value == value then return end
		self._Value = value
		Update(self)
	end
}
State.__index = State

return function(value)
	local self = {}
	self._StateType = "_State"
	self._State = true
	self._Value = value
	self._Priority = 0
	self._Dependent = {}
	self._Link = {}
	self._Temp = false
	--setmetatable(self._Link, WEAK_KEYS)

	setmetatable(self, State)
	return self
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX4606BD031FCF442C898897520B348FFE">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_Update</string>
							<string name="ScriptGuid">{C98963BD-3255-4102-BFE4-1907D55FAD53}</string>
							<ProtectedString name="Source"><![CDATA[return function(base)
	local list = {}

	for instance, prop in pairs(base._Link) do
		instance[prop] = base._Value
	end

	for dep in pairs(base._Dependent) do
		list[dep] = true
	end

	local best = next(list)
	while best do
		local priority = best._Priority
		for dep in pairs(list) do
			if dep._Priority < priority then
				best = dep
				priority = best._Priority
			end
		end
		list[best] = nil

		if best:_Update() then -- this updated and we need to change it's dependencies
			for instance, prop in pairs(best._Link) do
				instance[prop] = best._Value
			end
			for dep in pairs(best._Dependent) do
				list[dep] = true
			end
		end

		best = next(list)
	end
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX75394E98FD8841E5B8ADF5F1F6985A8D">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">_Watch</string>
							<string name="ScriptGuid">{07A9CFCC-1049-4AF4-A0E1-C0F65BFBC7B6}</string>
							<ProtectedString name="Source"><![CDATA[local Watch = {
	_Update = function(self)
		local values = {}
		for k, v in pairs(self._Dependencies) do
			values[k] = v._Value or false
		end
		-- Make Watch Callback
        self._Eval(unpack(values))
		return false
	end,
	_GetDependencies = function(self)
		return self._Dependencies
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		for _, v in pairs(self._Dependencies) do
			v._Dependent[self] = true
			if v._Init then
				v:_Init()
			end
		end
		self:_Update()
	end
}
Watch.__index = Watch

return function(eval, ...)
	local self = {}
	self._StateType = "_Watch"
	self._Eval = eval
	self._Dependencies = {...}

	local priority = 0
	local temp = false
	for k, v in pairs(self._Dependencies) do
		priority = math.max(priority, v._Priority)
		temp = temp or v._Temp
	end

	self._Priority = priority + 1
	self._Temp = temp

	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Watch)

    -- Unlike other state components, we want to init this one immediataly as it will never connect to an instance
    -- Any dependencies will never be released, only use this for debugging or if you're sure those state components don't need to be gced
    self:_Init()

	return self
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBXAC1F7662564A4CAB92F4BE95100C2BAE">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_OnChange</string>
						<string name="ScriptGuid">{B520E5BF-F05A-463F-9244-0114D67A2167}</string>
						<ProtectedString name="Source"><![CDATA[return function(prop)
	return {
		_OnChange = true,
		_Property = prop,
	}
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX2875C44809544004A9F94C0E4CA414A2">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">AxisAlign</string>
					<string name="ScriptGuid">{2F506F6F-C223-4132-8BA3-74132E7825AC}</string>
					<ProtectedString name="Source"><![CDATA[local AxisAlign = {}

local VECTOR_UP = Vector3.new(0, 1, 0)

function AxisAlign.BestMatch(cfr, axis)
	local comp = axis or VECTOR_UP
	
	local v0, v1, v2 = cfr:VectorToWorldSpace(VECTOR_UP), cfr:VectorToWorldSpace(Vector3.new(1, 0, 0)), cfr:VectorToWorldSpace(Vector3.new(0, 0, 1))
	local d0, d1, d2 = v0:Dot(comp), v1:Dot(comp), v2:Dot(comp)
	
	if d0 < 0 then
		d0 = -d0
		v0 = -v0
	end
	if d1 < 0 then
		d1 = -d1
		v1 = -v1
	end
	if d2 < 0 then
		d2 = -d2
		v2 = -v2
	end
	
	if d1 > d0 then
		d1, d0 = d0, d1
		v1, v0 = v0, v1
	end
	if d2 > d0 then
		d2, d0 = d0, d2
		v2, v0 = v0, v2
	end
	
	return v0, v1, v2
end

function AxisAlign.CameraAlign(cfr, axis)
	local _, v0, v1 = AxisAlign.BestMatch(cfr, axis)
	
	local cam = workspace.CurrentCamera.CFrame.LookVector
	if math.abs(v1:Dot(cam)) > math.abs(v0:Dot(cam)) then
		v0 = v1
	end
	
	local flat = Vector3.new(v0.X, 0, v0.Z).Unit
	return flat, flat:Cross(VECTOR_UP)
end

return AxisAlign
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXBE321963CDBE4AD7B48DC617CE5ED15F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Button</string>
					<string name="ScriptGuid">{B5E00283-5401-462A-81E4-C75C4E0BF2ED}</string>
					<ProtectedString name="Source"><![CDATA[local Actor = require(script.Parent.Actor)
local Create = Actor.Create
local State = Actor.State
local Derived = Actor.Derived

return function(props)
	local enabled = props.Enabled or State(false)
	
	return Create("TextButton", {
		BorderSizePixel = 0,
		Size = props.Size or UDim2.new(0, 200, 0, 40),
		Text = props.Text,
		BackgroundTransparency = Derived(function(e)
			return e and 0 or 0.5
		end, enabled),
		BackgroundColor3 = Derived(function(e)
			return e and Color3.new(1, 1, 1) or Color3.new(0, 0, 0)
		end, enabled),
		TextColor3 = Derived(function(e)
			return e and Color3.new(0, 0, 0) or Color3.new(1, 1, 1)
		end, enabled),
		
		TextSize = 20,
		Font = Enum.Font.SciFi,
		
		Activated = props.Activated,
		Position = props.Position,
		AnchorPoint = props.AnchorPoint
	})
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXFED618F0F4784FD091D1531F5BC07A53">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">VisibilityToggle</string>
					<string name="ScriptGuid">{A859C463-E038-4043-8C78-4168E28672DA}</string>
					<ProtectedString name="Source"><![CDATA[local STASH_LINK_NAME = "StashLink"

local module = {}

module.GetStashRoot = function()
	local root = game.ReplicatedStorage:FindFirstChild("StashRoot")
	if not root then
		root = Instance.new("Folder")
		root.Name = "StashRoot"
		root.Parent = game.ReplicatedStorage
	end
	return root
end

module.Hide = function(part)
	if part:FindFirstChild(STASH_LINK_NAME) then
		return false
	end

	local originalParent = part.Parent
	part.Parent = module.GetStashRoot()
	local folder = Instance.new("Folder")
	folder.Parent = originalParent
	folder.Name = part.Name
	local link = Instance.new("ObjectValue")
	link.Value = part
	link.Name = STASH_LINK_NAME
	link.Parent = folder

	return folder
end

module.Reveal = function(part)
	local link = part:FindFirstChild(STASH_LINK_NAME)
	print("Try reveal:", part, link)
	if not link then
		return false
	end

	local val = link.Value
	val.Parent = part.Parent
	part:Destroy()

	return val
end

module.IsHidden = function(part)
	return part:FindFirstChild(STASH_LINK_NAME) ~= nil
end

module.TempReveal = function(part)
	local revealed = module.Reveal(part)
	if revealed then
		revealed:SetAttribute("TempRevealed", true)
	end
end

module.HideTempRevealedParts = function(root)
	if not root then
		return
	end
	for _, part in root:GetChildren() do
		if part:GetAttribute("TempRevealed") then
			part:SetAttribute("TempRevealed", nil)
			module.Hide(part)
		end
	end
end

return module
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX31C464BC97A5470AA5A29C826B5AFE8A">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ZoneUtil</string>
					<string name="ScriptGuid">{3339C05C-696F-4BAA-AA80-35FC8DCE9D7C}</string>
					<ProtectedString name="Source"><![CDATA[local ZoneUtil = {}

function ZoneUtil.InZone(zone, pos)
	local floorMatch = zone:FindFirstChild("Floor") == nil
	local roofMatch = false

	for _, part in pairs(zone:GetChildren()) do
		local rel = part.CFrame:PointToObjectSpace(pos)

		if math.abs(rel.X) <= part.Size.X / 2 and math.abs(rel.Z) <= part.Size.Z / 2 then
			if part.Name == "Roof" and rel.Y <= 0 then
				roofMatch = true
			elseif part.Name == "Floor" and rel.Y >= 0 then
				floorMatch = true
			end

			if floorMatch and roofMatch then
				return true
			end
		end
	end
	
	return false
end

function ZoneUtil.GetZone(pos)
	local LevelBase = workspace:FindFirstChild("DebugMission") or workspace:FindFirstChild("Level")
	for _, zone in pairs(LevelBase.Cells:GetChildren()) do
		if ZoneUtil.InZone(zone, pos) then
			return zone
		end
	end
end

return ZoneUtil]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX098AE594734A4AB5B467385F539444E2">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">_OnChange</string>
					<string name="ScriptGuid">{128852C8-F3F7-4704-852B-9104ECDB526E}</string>
					<ProtectedString name="Source"><![CDATA[return function(prop)
	return {
		_OnChange = true,
		_Property = prop,
	}
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXD0D45BE8946343438C5886822A5FC0D6">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">StringConversion</string>
					<string name="ScriptGuid">{726E288B-6461-479C-88BA-4B657303E33F}</string>
					<ProtectedString name="Source"><![CDATA[local CHARACTER_SET = {	'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'm', 'p', 'q', 'r', 't', 'v', 'w', 'x', 'y',
						'3', '4', '6', '7', '8', '9', '!', '\"', '#', '$', '%', '&', '\'',	'(', ')', '*', '+', ',', '-', '.', '/',
						':', ';', '<', '=', '>', '?', '@', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'M', 'P', 'Q', 'R', 'T', 'V', 'W', 'X', 'Y',
						'[', '\\', ']', '^', '_', '`', '{', '|', '}', '~'}

local characterKeys = {}
local characterValues = {}
for i, v in pairs(CHARACTER_SET) do
    characterKeys[v] = i - 1;
    characterValues[i - 1] = v;
end

local CHAR_COUNT = #CHARACTER_SET
return {
	StringToNumber = function(str, cursor, size)
		local total = 0
		for i = cursor, cursor + size - 1 do
			local char = str:sub(cursor, cursor)
			total = total * CHAR_COUNT + characterKeys[char]
			cursor += 1
		end 
		return total
	end,
	
	NumberToString = function(number, charCount)
		local str = ""
		local iteration = 0
		while number >= 0 and iteration < charCount do
			local value = number % CHAR_COUNT
			str = characterValues[value] .. str
			number = math.floor(number / CHAR_COUNT)
			iteration += 1
		end
		return str
	end,

	GetMaxNumber = function(charCount)
		return math.pow(CHAR_COUNT, charCount) - 1
	end,
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBX5E039C44E4D24611AF7929CF063E53B4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">_ActorState</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXE6EF99AB0B8A45FDAD5A534A6408F4C4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_Derived</string>
						<string name="ScriptGuid">{F9A17F33-ED0E-4940-A6D2-13DBED16A24C}</string>
						<ProtectedString name="Source"><![CDATA[local Derived = {
	_Update = function(self)
		local values = {}
		for k, v in pairs(self._Dependencies) do
			values[k] = v._Value or false
		end
		local newValue = self._Eval(unpack(values))
		if newValue ~= self._Value then
			self._Value = newValue
			return true
		end
		return false
	end,
	_GetDependencies = function(self)
		return self._Dependencies
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		for _, v in pairs(self._Dependencies) do
			v._Dependent[self] = true
			if v._Init then
				v:_Init()
			end
		end
		self:_Update()
	end
}
Derived.__index = Derived

return function(eval, ...)
	local self = {}
	self._StateType = "_Derived"
	self._Eval = eval
	self._Dependencies = {...}

	local priority = 0
	local temp = false
	for k, v in pairs(self._Dependencies) do
		priority = math.max(priority, v._Priority)
		temp = temp or v._Temp
	end

	self._Priority = priority + 1
	self._Temp = temp

	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Derived)
	return self
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX03EAC3215CA943B2845E6F4BD21B8653">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_DerivedTable</string>
						<string name="ScriptGuid">{6277D1FB-E61C-47B7-B6DD-44809A15AD35}</string>
						<ProtectedString name="Source"><![CDATA[local DerivedTable = {
	_Update = function(self)
		local changed = false
		local input = self._Input._Value

		for k, v in pairs(input) do
			local li = self._LastInput[k]
			if v ~= li then
				changed = true
				if li and self.OnRemove then
					self.OnRemove(k, self._Value[k])
				end
				self._LastInput[k] = v
				self._Value[k] = self._Eval(k, v)
				if self.OnAdd then
					self.OnAdd(k, self._Value[k])
				end
			end
		end

		for k, v in pairs(self._LastInput) do
			if not input[k] then
				if self.OnRemove then
					self.OnRemove(k, self._Value[k])
				end
				self._LastInput[k] = nil
				changed = true
			end
		end

		return changed
	end,
	_GetDependencies = function(self)
		return { self._Input }
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		self._Input._Dependent[self] = true
		if self._Input._Init then
			self._Input:_Init()
		end
		self:_Update()
	end
}
DerivedTable.__index = DerivedTable

return function(eval, input, onAdd, onRemove)
	local self = {}
	self._StateType = "_DerivedTable"
	self._DerivedTable = true
	self._Eval = eval
	self._Value = {}
	self._LastInput = {}
	self._Input = input
	self._Temp = input._Temp
	self._Priority = input._Priority + 1

	self.OnAdd = onAdd
	self.OnRemove = onRemove

	self._Dependent = {}
	self._Link = {}

	setmetatable(self, DerivedTable)
	return self
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB80B9B7807004E5EABCED3F3F67B902A">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_State</string>
						<string name="ScriptGuid">{AA0EC0A7-86E2-4958-8256-68D6DB9DE7A0}</string>
						<ProtectedString name="Source"><![CDATA[local Update = require(script.Parent:WaitForChild("_Update"))

local State = {
	set = function(self, value)
		if self._Value == value then
			return
		end
		self._Value = value
		Update(self)
	end,
}
State.__index = State

return function(value)
	local self = {}
	self._StateType = "_State"
	self._State = true
	self._Value = value
	self._Priority = 0
	self._Dependent = {}
	self._Link = {}
	self._Temp = false

	setmetatable(self, State)
	return self
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX39721AAF0338403AB39190023D88A8DD">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_Update</string>
						<string name="ScriptGuid">{19288E60-8D02-4403-B7BE-C90C726158E5}</string>
						<ProtectedString name="Source"><![CDATA[return function(base)
	local list = {}

	for instance, prop in pairs(base._Link) do
		instance[prop] = base._Value
	end

	for dep in pairs(base._Dependent) do
		list[dep] = true
	end

	local best = next(list)
	while best do
		local priority = best._Priority
		for dep in pairs(list) do
			if dep._Priority < priority then
				best = dep
				priority = best._Priority
			end
		end
		list[best] = nil

		if best:_Update() then -- this updated and we need to change it's dependencies
			for instance, prop in pairs(best._Link) do
				instance[prop] = best._Value
			end
			for dep in pairs(best._Dependent) do
				list[dep] = true
			end
		end

		best = next(list)
	end
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX59BFBC98CD334394988EEAF4340378E6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_Watch</string>
						<string name="ScriptGuid">{B271FFE3-0398-410A-8197-4F711D7378E9}</string>
						<ProtectedString name="Source"><![CDATA[local Watch = {
	_Update = function(self)
		local values = {}
		for k, v in pairs(self._Dependencies) do
			values[k] = v._Value or false
		end
		-- Make Watch Callback
        self._Eval(unpack(values))
		return false
	end,
	_GetDependencies = function(self)
		return self._Dependencies
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		for _, v in pairs(self._Dependencies) do
			v._Dependent[self] = true
			if v._Init then
				v:_Init()
			end
		end
		self:_Update()
	end
}
Watch.__index = Watch

return function(eval, ...)
	local self = {}
	self._StateType = "_Watch"
	self._Eval = eval
	self._Dependencies = {...}

	local priority = 0
	local temp = false
	for k, v in pairs(self._Dependencies) do
		priority = math.max(priority, v._Priority)
		temp = temp or v._Temp
	end

	self._Priority = priority + 1
	self._Temp = temp

	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Watch)

    -- Unlike other state components, we want to init this one immediataly as it will never connect to an instance
    -- Any dependencies will never be released, only use this for debugging or if you're sure those state components don't need to be gced
    self:_Init()

	return self
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX265F980A5E4F473B871FC50DE58D427C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">_ActorCreation</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX3D1B3069288A4470A882B621ADE4B3E1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_Create</string>
						<string name="ScriptGuid">{62B332F5-CEAE-41DB-9223-C1D209355E1A}</string>
						<ProtectedString name="Source"><![CDATA[local TABLE = "table"
local SCRIPT_SIGNAL = "RBXScriptSignal"
local INST = "Instance"
local DEBUG = "Debug"
local TEMP_STATE = "TempState"

local HandleStateCleanup = require(script.Parent:WaitForChild("_HandleStateCleanup"))


local function processChildren(parent, item, stateLink)
	if typeof(item) == INST then
		item.Parent = parent
		return
	end
	if item._DerivedTable then
		item:_Init()
		item.OnAdd = function(_, instance)
			if typeof(instance) == INST then
				instance.Parent = parent
			end
		end
		item.OnRemove = function(_, instance)
			if typeof(instance) == INST then
				instance:Destroy()
			end
		end
		for _, instance in pairs(item._Value) do
			if typeof(instance) == INST then
				instance.Parent = parent
			end
		end
		if stateLink then
			table.insert(stateLink, item)
		end
	else
		for _, c in pairs(item) do
			processChildren(parent, c, stateLink)
		end
	end
end

return function(className, props, children, autoCleanup)
	local instance = Instance.new(className)

	local stateLink
	if autoCleanup then
		stateLink = {}
	end

	for name, value in pairs(props) do
		if name == DEBUG or name == TEMP_STATE then continue end

		if typeof(value) == TABLE then
			if value._StateType then
				value._Link[instance] = name
				if value._Init then
					value:_Init()
				end
				instance[name] = value._Value
				if autoCleanup then
					table.insert(stateLink, value)
				end
			end
		elseif typeof(name) == TABLE then
			if name._OnChange then
				local propName = name._Property
				instance:GetPropertyChangedSignal(propName):Connect(function() value(instance[propName]) end)
				value(props[propName] or instance[propName])
			end
		elseif typeof(instance[name]) == SCRIPT_SIGNAL then
			instance[name]:Connect(value)
		else
			instance[name] = value
		end
	end

	if children then
		processChildren(instance, children, autoCleanup and stateLink)
	end

	if autoCleanup and next(stateLink) then
		instance.AncestryChanged:Connect(function()
			if instance.Parent == nil then
				if props.Debug then
					warn("Cleanup:", props.Debug, stateLink)
				end
				for _, dep in pairs(stateLink) do
					dep._Link[instance] = nil
					HandleStateCleanup(dep)
				end
			end
		end)
	end

	return instance
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXC86295967E5D4A8A851D8473D0A1008D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_HandleStateCleanup</string>
						<string name="ScriptGuid">{14C6A1DF-D409-49F7-97B5-88AAF0B5FB2C}</string>
						<ProtectedString name="Source"><![CDATA[local cleanup
cleanup = function(state)
	if state.Debug then
		warn(state.Debug, state._Temp, state._GetDependencies ~= nil, next(state._Dependent), next(state._Link))
	end
	if not state._Persist and state._GetDependencies and not next(state._Dependent) and not next(state._Link) then
		if state.Debug then
			warn("Cleanup", state.Debug, state:_GetDependencies())
		end
		state._Initialized = false
		for _, dep in pairs(state:_GetDependencies()) do
			dep._Dependent[state] = nil
			cleanup(dep)
		end
	end
end

return cleanup]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX74686EABAF854BF6B6E8791525139E47">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">_ActorAnim</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX30148A8976DE4199A27E839D94628456">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_ActorSpring</string>
						<string name="ScriptGuid">{A4F71E39-A562-4105-BDDC-56BF79ADAC32}</string>
						<ProtectedString name="Source"><![CDATA[local AnimRunner = require(script.Parent._Anim)

local numberClose = function(x, y)
	return math.abs(x - y) < 0.01
end
local vectorClose = function(x, y)
	return (x - y).magnitude < 0.01
end
local udim2Close = function(x, y)
	local rel = x - y
	return math.abs(rel.X.Offset) <= 1 and math.abs(rel.Y.Offset) <= 1 and math.abs(rel.X.Scale) < 0.01 and math.abs(rel.Y.Scale) < 0.01 
end

local function getStartingVelocityByType(value)
	if typeof(value) == "number" then
		return 0, numberClose
	elseif typeof(value) == "Vector3" then
		return Vector3.new(), vectorClose
	--elseif typeof(value) == "UDim2" then
	--	return UDim2.new(), udim2Close
	end
end

local Spring = {
	_Update = function(self)
		self.T = self._Follow._Value
		if self._Active then return true end
		AnimRunner:Start(self)
	end,
	_Step = function(self, dt)
		if self._IsClose(self._Value, self.T) then
			self._Value = self.T
			return true
		end
		if dt > 0.03 then dt = 0.03 end
		local accel = (self.T - self._Value) * self._Force - self.V * self._Damping
		local vel = self.V
		self.V = self.V + accel * dt * self._Speed
		self._Value = self._Value + (self.V + vel) * dt * 0.5 * self._Speed
		return false
	end,
	_GetDependencies = function(self)
		return { self._Follow }
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		self._Follow._Dependent[self] = true
		if self._Follow._Init then
			self._Follow:_Init()
		end
		self._Value = self._Follow._Value -- Position
		self.T = self._Follow._Value -- Target
		self.V, self._IsClose = getStartingVelocityByType(self._Follow._Value)
	end
}
Spring.__index = Spring

return function(follow, force, damping, speed)
	local self = {}
	self._StateType = "_Spring"
	self._Active = false
	self._Follow = follow
	self._Force = force or 50
	self._Damping = damping or 10
	self._Speed = speed or 1
	self._Temp = follow._Temp

	self._Priority = follow._Priority + 1
	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Spring)
	return self
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXBA3E134E95054900B526EC6E25CA42B5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_Anim</string>
						<string name="ScriptGuid">{1DD8992D-BA08-48E6-B630-1A23F08FB6BC}</string>
						<ProtectedString name="Source"><![CDATA[local RunService = game:GetService("RunService")
local Update = require(script.Parent.Parent._ActorState._Update)

local Anim = {}
Anim._List = {}
Anim._Active = false

function Anim:Start(data)
	self._List[data] = true
	data._Active = true
	if self._Active then return end
	self._Active = true
	self._StepEvent = RunService.RenderStepped:Connect(function(dt)
		for data in pairs(self._List) do
			if data:_Step(dt) then
				self._List[data] = nil
				data._Active = false
			end
			Update(data)
		end
		if not next(self._List) then
			self._Active = false
			self._StepEvent:Disconnect()
			self._StepEvent = nil
		end
	end)
end

return Anim]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX477D2D1CC7194C8BB67F9D8A0A7C2B5C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_Cubic</string>
						<string name="ScriptGuid">{4613EA8F-8474-4C95-9E69-F0E5D0EB26AD}</string>
						<ProtectedString name="Source"><![CDATA[local DEFAULT_LINEAR_TRANSITION_RATE = 4

local AnimRunner = require(script.Parent.Parent._ActorAnim._Anim)

local Cubic = {
	_Update = function(self)
		self.T = self._Follow._Value
		if self._Active then return true end
		AnimRunner:Start(self)
	end,
	_Step = function(self, dt)
		local shift = dt * self._Speed
		local done = false
		if math.abs(self.T - self.P) < shift then
			self.P = self.T
			done = true
		elseif self.P < self.T then
			self.P += shift
		else
			self.P -= shift
		end
		local a = self.P
		self._Value = a * a * (-2 * a + 3)
		return done
	end,
	_GetDependencies = function(self)
		return { self._Follow }
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		self._Follow._Dependent[self] = true
		if self._Follow._Init then
			self._Follow:_Init()
		end
		local a = self._Follow._Value
		self.P = a -- Position
		self.T = a -- Target
		self._Value = a * a * (-2 * a + 3)
	end
}
Cubic.__index = Cubic

return function(follow, speed)
	local self = {}
	self._StateType = "_Cubic"
	self._Active = false
	self._Follow = follow
	self._Speed =  DEFAULT_LINEAR_TRANSITION_RATE
	if speed then
		self._Speed = self._Speed * speed
	end
	self._Temp = follow._Temp

	self._Priority = follow._Priority + 1
	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Cubic)
	return self
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX618235103E394BC8B8EC7A356252D3E5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">_Linear</string>
						<string name="ScriptGuid">{F7117D9F-5D8D-49BC-8348-577614AFA827}</string>
						<ProtectedString name="Source"><![CDATA[local DEFAULT_LINEAR_TRANSITION_RATE = 4

local AnimRunner = require(script.Parent.Parent._ActorAnim._Anim)

local Cubic = {
	_Update = function(self)
		self.T = self._Follow._Value
		if self._Active then return true end
		AnimRunner:Start(self)
	end,
	_Step = function(self, dt)
		local shift = dt * self._Speed
		local done = false
		if math.abs(self.T - self.P) < shift then
			self.P = self.T
			done = true
		elseif self.P < self.T then
			self.P += shift
		else
			self.P -= shift
		end
		local a = self.P
		self._Value = a * a * (-2 * a + 3)
		return done
	end,
	_GetDependencies = function(self)
		return { self._Follow }
	end,
	_Init = function(self)
		if self._Initialized then return end
		self._Initialized = true
		self._Follow._Dependent[self] = true
		if self._Follow._Init then
			self._Follow:_Init()
		end
		local a = self._Follow._Value
		self.P = a -- Position
		self.T = a -- Target
		self._Value = a * a * (-2 * a + 3)
	end
}
Cubic.__index = Cubic

return function(follow, speed)
	local self = {}
	self._StateType = "_Cubic"
	self._Active = false
	self._Follow = follow
	self._Speed =  DEFAULT_LINEAR_TRANSITION_RATE
	if speed then
		self._Speed = self._Speed * speed
	end
	self._Temp = follow._Temp

	self._Priority = follow._Priority + 1
	self._Dependent = {}
	self._Link = {}

	setmetatable(self, Cubic)
	return self
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXFD8E92A37C114BBC8C75E6A8A9343D1D">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">Setup</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXA366295FDA724D54A77F0FCEFAFB2347">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{1F1B382E-2797-4FE8-85E1-845F205C8314}</string>
					<ProtectedString name="Source"><![CDATA[local module = {}

-- Init
module.Init = function()
	if module.Active then return end
	module.Active = true
	
	if workspace:FindFirstChild("DebugMission") then
		local DebugMission = workspace:FindFirstChild("DebugMission")
		local AssetArray = script.Parent.Assets.DebugMission:GetChildren()
		warn(`Existing DebugMission found, checking for missing children..`)
		for _,v in pairs(AssetArray) do
			if not DebugMission:FindFirstChild(v.Name) then
				warn(`Missing child {v.Name}`)
				local clonedChild = script.Parent.Assets.DebugMission:FindFirstChild(v.Name):Clone()
				clonedChild.Parent = DebugMission
			end
		end
	else
		warn(`No DebugMission found, inserting...`)
		local AssetArray = script.Parent.Assets.DebugMission
		local NewDebugMission = script.Parent.Assets.DebugMission:Clone()
		NewDebugMission.Parent = workspace
	end
	module.Active = false
end

return module

]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBX1F22E86B463F499A80661A15D777944E">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">Assets</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="Folder" referent="RBXA9950534A7B8471197C0E68FD7ECA165">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">DebugMission</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="Folder" referent="RBX0DBE6B66800A46E19618C12D9535B569">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Props</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
						<Item class="Part" referent="RBX31A04330552140C491093FBE6C6027D7">
							<Properties>
								<bool name="Anchored">true</bool>
								<BinaryString name="AttributesSerialize">AQAAAAYAAABDb2xvcjACBQAAAE1ldGFs</BinaryString>
								<bool name="AudioCanCollide">true</bool>
								<float name="BackParamA">-0.5</float>
								<float name="BackParamB">0.5</float>
								<token name="BackSurface">0</token>
								<token name="BackSurfaceInput">0</token>
								<float name="BottomParamA">-0.5</float>
								<float name="BottomParamB">0.5</float>
								<token name="BottomSurface">10</token>
								<token name="BottomSurfaceInput">0</token>
								<CoordinateFrame name="CFrame">
									<X>2.38919091</X>
									<Y>-24.8997974</Y>
									<Z>-7.80800629</Z>
									<R00>1</R00>
									<R01>-8.4169269e-06</R01>
									<R02>8.37321568e-06</R02>
									<R10>8.41699784e-06</R10>
									<R11>1</R11>
									<R12>-8.4169269e-06</R12>
									<R20>-8.37314474e-06</R20>
									<R21>8.41699784e-06</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<bool name="CanCollide">true</bool>
								<bool name="CanQuery">true</bool>
								<bool name="CanTouch">true</bool>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="CastShadow">false</bool>
								<string name="CollisionGroup">Default</string>
								<int name="CollisionGroupId">0</int>
								<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
								<PhysicalProperties name="CustomPhysicalProperties">
									<CustomPhysics>false</CustomPhysics>
								</PhysicalProperties>
								<bool name="DefinesCapabilities">false</bool>
								<bool name="EnableFluidForces">true</bool>
								<float name="FrontParamA">-0.5</float>
								<float name="FrontParamB">0.5</float>
								<token name="FrontSurface">0</token>
								<token name="FrontSurfaceInput">0</token>
								<float name="LeftParamA">-0.5</float>
								<float name="LeftParamB">0.5</float>
								<token name="LeftSurface">0</token>
								<token name="LeftSurfaceInput">0</token>
								<bool name="Locked">false</bool>
								<bool name="Massless">false</bool>
								<token name="Material">256</token>
								<string name="MaterialVariantSerialized"></string>
								<string name="Name">SpawnLocation</string>
								<CoordinateFrame name="PivotOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<float name="Reflectance">0</float>
								<float name="RightParamA">-0.5</float>
								<float name="RightParamB">0.5</float>
								<token name="RightSurface">0</token>
								<token name="RightSurfaceInput">0</token>
								<int name="RootPriority">0</int>
								<Vector3 name="RotVelocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<float name="TopParamA">-0.5</float>
								<float name="TopParamB">0.5</float>
								<token name="TopSurface">10</token>
								<token name="TopSurfaceInput">0</token>
								<float name="Transparency">0.5</float>
								<Vector3 name="Velocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<token name="formFactorRaw">1</token>
								<token name="shape">1</token>
								<Vector3 name="size">
									<X>10</X>
									<Y>0.200077176</Y>
									<Z>10</Z>
								</Vector3>
							</Properties>
						</Item>
					</Item>
					<Item class="Folder" referent="RBXFBA0992937314B46977AAE014BEE0DF5">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">LoudSpawns</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBXAE92498F4453440392A114B5A95D39DE">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Nodes</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBX376A4F473A3C4E3BA3F68DABE9FA14A8">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Glass</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBX634B848EE29E4441A397D990DFC09669">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Geometry</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBXDBDEE5B6C3C44530B176B892CFE0A641">
						<Properties>
							<BinaryString name="AttributesSerialize"><![CDATA[AQAAAAgAAABMaW5rTGlzdAIDGQAAeyI5ZjQzN2M4ZC1lNWYwLTQyNmEtOTQzNy00MTgzYTQw
YzRmMDQiOlsiZjllZmYyNDktOWQwYi00NTMxLWEzYTctYmFkZWMyNGZjMjUwIiwiNTM2Yjg5
ODQtYWY4ZC00ZTAwLWFmZTgtMzk0ZDQwOWE1YjIxIiwiMmMxZjBhYzctMGNhNi00ZTU5LWIx
N2ItNTBmNDM3MjQ3ZjY2Il0sIjljYzAwNzNhLTQwMDUtNDUxYy1iMTQ0LWQ4ZjAwODE0YWY1
MiI6WyJmNTc4NmQyMC05NTE4LTQxMzgtYTAwNC00YjEwODk5NTE2MjQiLCJmNTc4NmQyMC05
NTE4LTQxMzgtYTAwNC00YjEwODk5NTE2MjQiLCJmZDA4NTgxOS0zNzNhLTRjNTYtYWQxYy1h
MmVlZTNkZWQxZmIiXSwiYWU5NjlhY2EtZmM5YS00MmNhLWI2NDctN2I5YzFiNmE4NTk3Ijpb
IjMyMDcwMGQ5LTZhMTYtNGExOC05MTE4LWI3OTJlMzg0OTM4NyIsImRkNzFkZmE5LTAzYTUt
NDc0NC04ZDhlLTczYzU5NDgwMWUwYSIsImJjMGViNjVmLTBkZjAtNGVkOS1hN2QwLWYyY2M3
MTc3MzIyMyIsIjRjNGUzZWEyLWM5MDAtNGJkOS04MjZjLTg4NTc4ZGVjMmVhOCIsImRkNzFk
ZmE5LTAzYTUtNDc0NC04ZDhlLTczYzU5NDgwMWUwYSJdLCIzNGEyOTdkMS0zM2MzLTRiMWUt
YjIwYS1hNjA0NGYyMGIwMTEiOlsiZmJkNThjODEtNmY4OC00ZTYzLTgxYWQtNzIyNTMxOWNk
MGFkIiwiYzZmYTM1ODItYTBmYS00YWJjLWI2YzktYmU3YTA1OTNkMGZlIiwiZTU5YzJkOTMt
Y2Y5Yi00ODc0LTllOGItMGU2NTVkOWNkMWE4Il0sImEzOTVkNzI3LWM3Y2ItNDgwNC1hZTFl
LWVkNjhhOGFiZTVjZiI6WyI0NjJhNGUzYi0zYmEzLTRiMDUtYjdiMi1hM2Q0MWNhMjJiMWMi
LCI2MjZlZjEyOC1lYWJmLTQwMzktOTg2Yy04YzM2MGY2ZDA4NzciLCI2ZmZjNDNiYS1lZDRm
LTQ5ODctYjQ2My02MmEyNjFlM2Q4OTYiLCI0YzRlM2VhMi1jOTAwLTRiZDktODI2Yy04ODU3
OGRlYzJlYTgiLCJmNzA1YmJmOS1hNjg5LTRiNzItOTMzNy0yNmMwMzQ2YjUzNmMiXSwiNzg5
YWUwYWMtMTRhMy00MzlmLWIwYTAtZmE5Zjg0MDFkY2U3IjpbIjRjNGUzZWEyLWM5MDAtNGJk
OS04MjZjLTg4NTc4ZGVjMmVhOCJdLCI3NjQ2OTRkOC05MjY5LTQ1YTEtODMwZS0wM2ExODFj
NTVhYjgiOlsiMWU2MTg5ZmYtOWZmYi00MmE3LThhNTQtMTk4MjFjZWZmMDkyIl0sIjhiODMy
OTVhLTI2MmYtNDhlMC05MjNkLTAzYTMzNDg4NTFjZSI6WyIxZTYxODlmZi05ZmZiLTQyYTct
OGE1NC0xOTgyMWNlZmYwOTIiLCI0YzRlM2VhMi1jOTAwLTRiZDktODI2Yy04ODU3OGRlYzJl
YTgiXSwiNjI2ZWYxMjgtZWFiZi00MDM5LTk4NmMtOGMzNjBmNmQwODc3IjpbImEzOTVkNzI3
LWM3Y2ItNDgwNC1hZTFlLWVkNjhhOGFiZTVjZiJdLCIwNzIyN2FmYS0yZWZhLTQ4MWEtYjQx
MC04NTJjZWNhZThkNDYiOlsiOTZkNjJjZTYtNDEwNS00MDliLWIwYWUtNzBlMGM4ZWRlNWNl
Il0sIjU1NDg2Mzg3LTMzNWUtNDNhZC04NTI1LTgwNDliOWM0MzA3ZiI6WyI4MmFjZDJhNC03
MDA2LTRiOGYtOWNiNy05ZWJhYTU3ZTJhMzAiXSwiMmMxZjBhYzctMGNhNi00ZTU5LWIxN2It
NTBmNDM3MjQ3ZjY2IjpbIjlmNDM3YzhkLWU1ZjAtNDI2YS05NDM3LTQxODNhNDBjNGYwNCJd
LCJkZWMzNWU1NS04NzQwLTRhZTAtOWQzOC1lZDg5YTAzYWQ1MDMiOlsiNzNmNDU3NjItYmQw
ZC00OTdjLTg4ZDAtYTg1ZThjYTA1MmZkIl0sImJjMGViNjVmLTBkZjAtNGVkOS1hN2QwLWYy
Y2M3MTc3MzIyMyI6WyJmNTc4NmQyMC05NTE4LTQxMzgtYTAwNC00YjEwODk5NTE2MjQiLCJh
ZTk2OWFjYS1mYzlhLTQyY2EtYjY0Ny03YjljMWI2YTg1OTciXSwiZGQ3MWRmYTktMDNhNS00
NzQ0LThkOGUtNzNjNTk0ODAxZTBhIjpbIjk2ZDYyY2U2LTQxMDUtNDA5Yi1iMGFlLTcwZTBj
OGVkZTVjZSIsIjMyMDcwMGQ5LTZhMTYtNGExOC05MTE4LWI3OTJlMzg0OTM4NyIsImFlOTY5
YWNhLWZjOWEtNDJjYS1iNjQ3LTdiOWMxYjZhODU5NyIsImFlOTY5YWNhLWZjOWEtNDJjYS1i
NjQ3LTdiOWMxYjZhODU5NyJdLCJmMzNjZDUzNy01M2MyLTQ4OTMtOTgyNy0zODMxNjNmZDJj
MDgiOlsiNDYyYTRlM2ItM2JhMy00YjA1LWI3YjItYTNkNDFjYTIyYjFjIl0sImJmYmU5OTkx
LWMzMGQtNDE4Yy05MGY4LWJkNjJiZWRiMjE1NyI6WyI5NmQ2MmNlNi00MTA1LTQwOWItYjBh
ZS03MGUwYzhlZGU1Y2UiXSwiZTVlMzJmZjktN2Q3Ni00YjgyLTk5MGMtMGMwYThiNGZkYzll
IjpbImY5ZWZmMjQ5LTlkMGItNDUzMS1hM2E3LWJhZGVjMjRmYzI1MCJdLCI3M2Y0NTc2Mi1i
ZDBkLTQ5N2MtODhkMC1hODVlOGNhMDUyZmQiOlsiODJhY2QyYTQtNzAwNi00YjhmLTljYjct
OWViYWE1N2UyYTMwIiwiZmJkNThjODEtNmY4OC00ZTYzLTgxYWQtNzIyNTMxOWNkMGFkIiwi
ZGVjMzVlNTUtODc0MC00YWUwLTlkMzgtZWQ4OWEwM2FkNTAzIiwiYmNmZWFiN2ItYTkwOS00
ZDVjLTllZGItNGVjM2FiYjljZjU4Il0sIjk1ZDkzYmY3LWRiY2QtNDI3OS05MWUzLWJhYTE4
ZGRkNGM4ZSI6WyI0YzRlM2VhMi1jOTAwLTRiZDktODI2Yy04ODU3OGRlYzJlYTgiXSwiYmNm
ZWFiN2ItYTkwOS00ZDVjLTllZGItNGVjM2FiYjljZjU4IjpbIjczZjQ1NzYyLWJkMGQtNDk3
Yy04OGQwLWE4NWU4Y2EwNTJmZCJdLCJmYmQ1OGM4MS02Zjg4LTRlNjMtODFhZC03MjI1MzE5
Y2QwYWQiOlsiMzRhMjk3ZDEtMzNjMy00YjFlLWIyMGEtYTYwNDRmMjBiMDExIiwiNzNmNDU3
NjItYmQwZC00OTdjLTg4ZDAtYTg1ZThjYTA1MmZkIiwiZjEwODlmNWEtNmY5My00NmU5LTk0
YjMtMTQ1NjA0MDdmYjNlIl0sImY1Nzg2ZDIwLTk1MTgtNDEzOC1hMDA0LTRiMTA4OTk1MTYy
NCI6WyJiYzBlYjY1Zi0wZGYwLTRlZDktYTdkMC1mMmNjNzE3NzMyMjMiLCI0NjJhNGUzYi0z
YmEzLTRiMDUtYjdiMi1hM2Q0MWNhMjJiMWMiLCJmZDA4NTgxOS0zNzNhLTRjNTYtYWQxYy1h
MmVlZTNkZWQxZmIiLCJmZDA4NTgxOS0zNzNhLTRjNTYtYWQxYy1hMmVlZTNkZWQxZmIiLCI5
Y2MwMDczYS00MDA1LTQ1MWMtYjE0NC1kOGYwMDgxNGFmNTIiLCI5Y2MwMDczYS00MDA1LTQ1
MWMtYjE0NC1kOGYwMDgxNGFmNTIiXSwiYWY1MjExNGUtYTA4Mi00Y2Y4LWFlYzYtOTRmMDcy
ZGE5NzRhIjpbImEzYTU0ODA3LTVkNmUtNGY2Ny04NTFhLTllYjA5MDlhZDE1MyIsIjgyYWNk
MmE0LTcwMDYtNGI4Zi05Y2I3LTllYmFhNTdlMmEzMCIsImU1OWMyZDkzLWNmOWItNDg3NC05
ZThiLTBlNjU1ZDljZDFhOCJdLCJjNmZhMzU4Mi1hMGZhLTRhYmMtYjZjOS1iZTdhMDU5M2Qw
ZmUiOlsiMzRhMjk3ZDEtMzNjMy00YjFlLWIyMGEtYTYwNDRmMjBiMDExIiwiNGM0ZTNlYTIt
YzkwMC00YmQ5LTgyNmMtODg1NzhkZWMyZWE4IiwiNDYyYTRlM2ItM2JhMy00YjA1LWI3YjIt
YTNkNDFjYTIyYjFjIl0sIjFlNjE4OWZmLTlmZmItNDJhNy04YTU0LTE5ODIxY2VmZjA5MiI6
WyI3NjQ2OTRkOC05MjY5LTQ1YTEtODMwZS0wM2ExODFjNTVhYjgiLCJmOWVmZjI0OS05ZDBi
LTQ1MzEtYTNhNy1iYWRlYzI0ZmMyNTAiLCI0NjJhNGUzYi0zYmEzLTRiMDUtYjdiMi1hM2Q0
MWNhMjJiMWMiLCI4YjgzMjk1YS0yNjJmLTQ4ZTAtOTIzZC0wM2EzMzQ4ODUxY2UiXSwiMmJi
ZTgwMDgtMzhjMy00YjFjLThhNWEtZjU0ODExMDk1MDc5IjpbImY5ZWZmMjQ5LTlkMGItNDUz
MS1hM2E3LWJhZGVjMjRmYzI1MCJdLCI0YzRlM2VhMi1jOTAwLTRiZDktODI2Yy04ODU3OGRl
YzJlYTgiOlsiYWU5NjlhY2EtZmM5YS00MmNhLWI2NDctN2I5YzFiNmE4NTk3IiwiZjllZmYy
NDktOWQwYi00NTMxLWEzYTctYmFkZWMyNGZjMjUwIiwiNzg5YWUwYWMtMTRhMy00MzlmLWIw
YTAtZmE5Zjg0MDFkY2U3IiwiOTVkOTNiZjctZGJjZC00Mjc5LTkxZTMtYmFhMThkZGQ0Yzhl
IiwiZjllZmYyNDktOWQwYi00NTMxLWEzYTctYmFkZWMyNGZjMjUwIiwiOGI4MzI5NWEtMjYy
Zi00OGUwLTkyM2QtMDNhMzM0ODg1MWNlIiwiYTM5NWQ3MjctYzdjYi00ODA0LWFlMWUtZWQ2
OGE4YWJlNWNmIiwiYzZmYTM1ODItYTBmYS00YWJjLWI2YzktYmU3YTA1OTNkMGZlIl0sIjQ2
MmE0ZTNiLTNiYTMtNGIwNS1iN2IyLWEzZDQxY2EyMmIxYyI6WyI2ZmZjNDNiYS1lZDRmLTQ5
ODctYjQ2My02MmEyNjFlM2Q4OTYiLCI2ZmZjNDNiYS1lZDRmLTQ5ODctYjQ2My02MmEyNjFl
M2Q4OTYiLCI2ZmZjNDNiYS1lZDRmLTQ5ODctYjQ2My02MmEyNjFlM2Q4OTYiLCI5NmQ2MmNl
Ni00MTA1LTQwOWItYjBhZS03MGUwYzhlZGU1Y2UiLCJhMzk1ZDcyNy1jN2NiLTQ4MDQtYWUx
ZS1lZDY4YThhYmU1Y2YiLCJmOWMzZWQ4NC1hZDcxLTQ5NjMtOWYwNS1mZTMyNjljNWViYzUi
LCJmNTc4NmQyMC05NTE4LTQxMzgtYTAwNC00YjEwODk5NTE2MjQiLCJmMzNjZDUzNy01M2My
LTQ4OTMtOTgyNy0zODMxNjNmZDJjMDgiLCJjNmZhMzU4Mi1hMGZhLTRhYmMtYjZjOS1iZTdh
MDU5M2QwZmUiLCIxZTYxODlmZi05ZmZiLTQyYTctOGE1NC0xOTgyMWNlZmYwOTIiXSwiZjEw
ODlmNWEtNmY5My00NmU5LTk0YjMtMTQ1NjA0MDdmYjNlIjpbImZiZDU4YzgxLTZmODgtNGU2
My04MWFkLTcyMjUzMTljZDBhZCJdLCJmZDA4NTgxOS0zNzNhLTRjNTYtYWQxYy1hMmVlZTNk
ZWQxZmIiOlsiZTU5YzJkOTMtY2Y5Yi00ODc0LTllOGItMGU2NTVkOWNkMWE4IiwiZjU3ODZk
MjAtOTUxOC00MTM4LWEwMDQtNGIxMDg5OTUxNjI0IiwiOWNjMDA3M2EtNDAwNS00NTFjLWIx
NDQtZDhmMDA4MTRhZjUyIiwiZjU3ODZkMjAtOTUxOC00MTM4LWEwMDQtNGIxMDg5OTUxNjI0
Il0sImEzYTU0ODA3LTVkNmUtNGY2Ny04NTFhLTllYjA5MDlhZDE1MyI6WyJlNTljMmQ5My1j
ZjliLTQ4NzQtOWU4Yi0wZTY1NWQ5Y2QxYTgiLCJhZjUyMTE0ZS1hMDgyLTRjZjgtYWVjNi05
NGYwNzJkYTk3NGEiXSwiZjljM2VkODQtYWQ3MS00OTYzLTlmMDUtZmUzMjY5YzVlYmM1Ijpb
IjQ2MmE0ZTNiLTNiYTMtNGIwNS1iN2IyLWEzZDQxY2EyMmIxYyJdLCIzMjA3MDBkOS02YTE2
LTRhMTgtOTExOC1iNzkyZTM4NDkzODciOlsiODJhY2QyYTQtNzAwNi00YjhmLTljYjctOWVi
YWE1N2UyYTMwIiwiYWU5NjlhY2EtZmM5YS00MmNhLWI2NDctN2I5YzFiNmE4NTk3IiwiZGQ3
MWRmYTktMDNhNS00NzQ0LThkOGUtNzNjNTk0ODAxZTBhIl0sImY3MDViYmY5LWE2ODktNGI3
Mi05MzM3LTI2YzAzNDZiNTM2YyI6WyJhMzk1ZDcyNy1jN2NiLTQ4MDQtYWUxZS1lZDY4YThh
YmU1Y2YiXSwiYzRjOTQ0MWMtZTQxOC00M2ZjLTg2ODYtOWE2OTE0YTQwZGQxIjpbIjk2ZDYy
Y2U2LTQxMDUtNDA5Yi1iMGFlLTcwZTBjOGVkZTVjZSJdLCI5NmQ2MmNlNi00MTA1LTQwOWIt
YjBhZS03MGUwYzhlZGU1Y2UiOlsiNDYyYTRlM2ItM2JhMy00YjA1LWI3YjItYTNkNDFjYTIy
YjFjIiwiMDcyMjdhZmEtMmVmYS00ODFhLWI0MTAtODUyY2VjYWU4ZDQ2IiwiZjllZmYyNDkt
OWQwYi00NTMxLWEzYTctYmFkZWMyNGZjMjUwIiwiYmZiZTk5OTEtYzMwZC00MThjLTkwZjgt
YmQ2MmJlZGIyMTU3IiwiYzRjOTQ0MWMtZTQxOC00M2ZjLTg2ODYtOWE2OTE0YTQwZGQxIiwi
ZGQ3MWRmYTktMDNhNS00NzQ0LThkOGUtNzNjNTk0ODAxZTBhIl0sImU1OWMyZDkzLWNmOWIt
NDg3NC05ZThiLTBlNjU1ZDljZDFhOCI6WyIzNGEyOTdkMS0zM2MzLTRiMWUtYjIwYS1hNjA0
NGYyMGIwMTEiLCJmZDA4NTgxOS0zNzNhLTRjNTYtYWQxYy1hMmVlZTNkZWQxZmIiLCJhM2E1
NDgwNy01ZDZlLTRmNjctODUxYS05ZWIwOTA5YWQxNTMiLCJhZjUyMTE0ZS1hMDgyLTRjZjgt
YWVjNi05NGYwNzJkYTk3NGEiXSwiNTM2Yjg5ODQtYWY4ZC00ZTAwLWFmZTgtMzk0ZDQwOWE1
YjIxIjpbIjlmNDM3YzhkLWU1ZjAtNDI2YS05NDM3LTQxODNhNDBjNGYwNCJdLCI4MmFjZDJh
NC03MDA2LTRiOGYtOWNiNy05ZWJhYTU3ZTJhMzAiOlsiNTU0ODYzODctMzM1ZS00M2FkLTg1
MjUtODA0OWI5YzQzMDdmIiwiYWY1MjExNGUtYTA4Mi00Y2Y4LWFlYzYtOTRmMDcyZGE5NzRh
IiwiMzIwNzAwZDktNmExNi00YTE4LTkxMTgtYjc5MmUzODQ5Mzg3IiwiNzNmNDU3NjItYmQw
ZC00OTdjLTg4ZDAtYTg1ZThjYTA1MmZkIl0sIjZmZmM0M2JhLWVkNGYtNDk4Ny1iNDYzLTYy
YTI2MWUzZDg5NiI6WyJhMzk1ZDcyNy1jN2NiLTQ4MDQtYWUxZS1lZDY4YThhYmU1Y2YiLCI0
NjJhNGUzYi0zYmEzLTRiMDUtYjdiMi1hM2Q0MWNhMjJiMWMiLCI0NjJhNGUzYi0zYmEzLTRi
MDUtYjdiMi1hM2Q0MWNhMjJiMWMiLCI0NjJhNGUzYi0zYmEzLTRiMDUtYjdiMi1hM2Q0MWNh
MjJiMWMiXSwiZjllZmYyNDktOWQwYi00NTMxLWEzYTctYmFkZWMyNGZjMjUwIjpbIjFlNjE4
OWZmLTlmZmItNDJhNy04YTU0LTE5ODIxY2VmZjA5MiIsImU1ZTMyZmY5LTdkNzYtNGI4Mi05
OTBjLTBjMGE4YjRmZGM5ZSIsIjk2ZDYyY2U2LTQxMDUtNDA5Yi1iMGFlLTcwZTBjOGVkZTVj
ZSIsIjJiYmU4MDA4LTM4YzMtNGIxYy04YTVhLWY1NDgxMTA5NTA3OSIsIjlmNDM3YzhkLWU1
ZjAtNDI2YS05NDM3LTQxODNhNDBjNGYwNCIsIjRjNGUzZWEyLWM5MDAtNGJkOS04MjZjLTg4
NTc4ZGVjMmVhOCIsIjRjNGUzZWEyLWM5MDAtNGJkOS04MjZjLTg4NTc4ZGVjMmVhOCJdfQ==]]></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Cells</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
						<Item class="Folder" referent="RBX00352B66DD4F4657AD39DF0082B8F248">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<string name="Name">Links</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="Model" referent="RBX56A39FA0BE7E450E8FB4C11FE9B09DAE">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<token name="LevelOfDetail">0</token>
								<CoordinateFrame name="ModelMeshCFrame">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
								<Vector3 name="ModelMeshSize">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<token name="ModelStreamingMode">0</token>
								<string name="Name">Default</string>
								<bool name="NeedsPivotMigration">false</bool>
								<Ref name="PrimaryPart">null</Ref>
								<float name="ScaleFactor">1</float>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<OptionalCoordinateFrame name="WorldPivotData">
									<CFrame>
										<X>0</X>
										<Y>0</Y>
										<Z>0</Z>
										<R00>-4.37113883e-08</R00>
										<R01>0</R01>
										<R02>-1</R02>
										<R10>0</R10>
										<R11>1</R11>
										<R12>0</R12>
										<R20>1</R20>
										<R21>0</R21>
										<R22>-4.37113883e-08</R22>
									</CFrame>
								</OptionalCoordinateFrame>
							</Properties>
							<Item class="Part" referent="RBX1674C661C15144E3A332A8C84290FC73">
								<Properties>
									<bool name="Anchored">true</bool>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AudioCanCollide">true</bool>
									<float name="BackParamA">-0.5</float>
									<float name="BackParamB">0.5</float>
									<token name="BackSurface">0</token>
									<token name="BackSurfaceInput">0</token>
									<float name="BottomParamA">-0.5</float>
									<float name="BottomParamB">0.5</float>
									<token name="BottomSurface">4</token>
									<token name="BottomSurfaceInput">0</token>
									<CoordinateFrame name="CFrame">
										<X>0</X>
										<Y>25.2999992</Y>
										<Z>0</Z>
										<R00>-4.37113883e-08</R00>
										<R01>0</R01>
										<R02>-1</R02>
										<R10>0</R10>
										<R11>1</R11>
										<R12>0</R12>
										<R20>1</R20>
										<R21>0</R21>
										<R22>-4.37113883e-08</R22>
									</CoordinateFrame>
									<bool name="CanCollide">true</bool>
									<bool name="CanQuery">true</bool>
									<bool name="CanTouch">true</bool>
									<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
									<bool name="CastShadow">true</bool>
									<string name="CollisionGroup">Default</string>
									<int name="CollisionGroupId">0</int>
									<Color3uint8 name="Color3uint8">4278190080</Color3uint8>
									<PhysicalProperties name="CustomPhysicalProperties">
										<CustomPhysics>false</CustomPhysics>
									</PhysicalProperties>
									<bool name="DefinesCapabilities">false</bool>
									<bool name="EnableFluidForces">true</bool>
									<float name="FrontParamA">-0.5</float>
									<float name="FrontParamB">0.5</float>
									<token name="FrontSurface">0</token>
									<token name="FrontSurfaceInput">0</token>
									<float name="LeftParamA">-0.5</float>
									<float name="LeftParamB">0.5</float>
									<token name="LeftSurface">0</token>
									<token name="LeftSurfaceInput">0</token>
									<bool name="Locked">true</bool>
									<bool name="Massless">false</bool>
									<token name="Material">256</token>
									<string name="MaterialVariantSerialized"></string>
									<string name="Name">Roof</string>
									<CoordinateFrame name="PivotOffset">
										<X>0</X>
										<Y>0</Y>
										<Z>0</Z>
										<R00>1</R00>
										<R01>0</R01>
										<R02>0</R02>
										<R10>0</R10>
										<R11>1</R11>
										<R12>0</R12>
										<R20>0</R20>
										<R21>0</R21>
										<R22>1</R22>
									</CoordinateFrame>
									<float name="Reflectance">0</float>
									<float name="RightParamA">-0.5</float>
									<float name="RightParamB">0.5</float>
									<token name="RightSurface">0</token>
									<token name="RightSurfaceInput">0</token>
									<int name="RootPriority">0</int>
									<Vector3 name="RotVelocity">
										<X>0</X>
										<Y>0</Y>
										<Z>0</Z>
									</Vector3>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<float name="TopParamA">-0.5</float>
									<float name="TopParamB">0.5</float>
									<token name="TopSurface">3</token>
									<token name="TopSurfaceInput">0</token>
									<float name="Transparency">1</float>
									<Vector3 name="Velocity">
										<X>0</X>
										<Y>0</Y>
										<Z>0</Z>
									</Vector3>
									<token name="formFactorRaw">1</token>
									<token name="shape">1</token>
									<Vector3 name="size">
										<X>102</X>
										<Y>0.00100000005</Y>
										<Z>102</Z>
									</Vector3>
								</Properties>
							</Item>
							<Item class="Part" referent="RBX45A4D2B5971C4FF0AAC81864A920B7A8">
								<Properties>
									<bool name="Anchored">true</bool>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AudioCanCollide">true</bool>
									<float name="BackParamA">-0.5</float>
									<float name="BackParamB">0.5</float>
									<token name="BackSurface">0</token>
									<token name="BackSurfaceInput">0</token>
									<float name="BottomParamA">-0.5</float>
									<float name="BottomParamB">0.5</float>
									<token name="BottomSurface">4</token>
									<token name="BottomSurfaceInput">0</token>
									<CoordinateFrame name="CFrame">
										<X>0</X>
										<Y>-25.2999992</Y>
										<Z>0</Z>
										<R00>-4.37113883e-08</R00>
										<R01>0</R01>
										<R02>-1</R02>
										<R10>0</R10>
										<R11>1</R11>
										<R12>0</R12>
										<R20>1</R20>
										<R21>0</R21>
										<R22>-4.37113883e-08</R22>
									</CoordinateFrame>
									<bool name="CanCollide">true</bool>
									<bool name="CanQuery">true</bool>
									<bool name="CanTouch">true</bool>
									<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
									<bool name="CastShadow">true</bool>
									<string name="CollisionGroup">Default</string>
									<int name="CollisionGroupId">0</int>
									<Color3uint8 name="Color3uint8">4278190080</Color3uint8>
									<PhysicalProperties name="CustomPhysicalProperties">
										<CustomPhysics>false</CustomPhysics>
									</PhysicalProperties>
									<bool name="DefinesCapabilities">false</bool>
									<bool name="EnableFluidForces">true</bool>
									<float name="FrontParamA">-0.5</float>
									<float name="FrontParamB">0.5</float>
									<token name="FrontSurface">0</token>
									<token name="FrontSurfaceInput">0</token>
									<float name="LeftParamA">-0.5</float>
									<float name="LeftParamB">0.5</float>
									<token name="LeftSurface">0</token>
									<token name="LeftSurfaceInput">0</token>
									<bool name="Locked">true</bool>
									<bool name="Massless">false</bool>
									<token name="Material">256</token>
									<string name="MaterialVariantSerialized"></string>
									<string name="Name">Floor</string>
									<CoordinateFrame name="PivotOffset">
										<X>0</X>
										<Y>0</Y>
										<Z>0</Z>
										<R00>1</R00>
										<R01>0</R01>
										<R02>0</R02>
										<R10>0</R10>
										<R11>1</R11>
										<R12>0</R12>
										<R20>0</R20>
										<R21>0</R21>
										<R22>1</R22>
									</CoordinateFrame>
									<float name="Reflectance">0</float>
									<float name="RightParamA">-0.5</float>
									<float name="RightParamB">0.5</float>
									<token name="RightSurface">0</token>
									<token name="RightSurfaceInput">0</token>
									<int name="RootPriority">0</int>
									<Vector3 name="RotVelocity">
										<X>0</X>
										<Y>0</Y>
										<Z>0</Z>
									</Vector3>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<float name="TopParamA">-0.5</float>
									<float name="TopParamB">0.5</float>
									<token name="TopSurface">3</token>
									<token name="TopSurfaceInput">0</token>
									<float name="Transparency">1</float>
									<Vector3 name="Velocity">
										<X>0</X>
										<Y>0</Y>
										<Z>0</Z>
									</Vector3>
									<token name="formFactorRaw">1</token>
									<token name="shape">1</token>
									<Vector3 name="size">
										<X>102</X>
										<Y>0.00100000005</Y>
										<Z>102</Z>
									</Vector3>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="Folder" referent="RBXA9C1D6176B944E948379897C35344729">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">MapData</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBX2C22C238D6DF4222BF7EA8260F328646">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Disabled</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBXDB20AC9A55BF46C2AEC1A4E2CFE19158">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">StateComponents</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBXFEF585B0F4964BCCA9F04E2C4A405A6E">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">CombatFlowMap</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBX5533BAD8C23B4F6691CD16E8AE4FB990">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">ConditionalGeometry</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBXCB2B348C3B8044F4851AAD2BC4D12066">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">BotStorage</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBX32625EB383E643E4B284FBA7413FEE51">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Bots</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX734625B3ECD445AABF323F4A6754A496">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">MissionSetup</string>
							<string name="ScriptGuid">{5C0EC7DE-986E-4844-870E-FEF0FE650EB8}</string>
							<ProtectedString name="Source"><![CDATA[return {
	--AllowedParameters = {},
	--Character = {},
	Globals = {
		
	},
	
	DebugWatch = {
		
	},
	
	Internals = {
		
	},
	
	ClientState = {
		
	},
	
	--[[ForcedLoadout = {
		Guns = {},
		Items = {},
	},
	BlockArmor = true,]]
	
	HackingMapIntel = {
		
	},

	ExtraLoot = {
		
	},

	LightingSettings = "Daytime",
	SoundTravelDistance = 1,
	
	Colors = {
		--Wood = Color3.fromRGB(99, 95, 98),
		--WoodLight = Color3.fromRGB(149, 137, 136),
		--Metal = Color3.fromRGB(105, 106, 113),
	},
	
	CameraConfig = {
		
	},
	
	Cells = {
		Default = {
			Trespass = false,
		},
	},
	
	EnforceClass = {
		None = {}, -- Never sees through disguise
		Alert0 = {
			BasicSecurity = 1, -- Sees through disguise when alert
		},
		Alert1 = {
			BasicSecurity = 2, -- Sees through disguise when normal
		},
		Alert2 = {
			BasicSecurity = 3, -- Sees through disguises when calm / fooled by thespian or on recruit / use infrequently
		},
		Alert3 = {
			BasicSecurity = 5, -- Always sees through disguise
		},
	},
	
	Objectives = {
		Mission = { -- Normal
			{
				Active = "1"
			},
		},
		Stealth = {
			{
				Active = "1"
			},
		},
		Combat = {
			
		},
	},
	
	Dialogue = {
		
	},
	
	CustomStrings = {
		["Operator.Any.CustomDialogue"] = "This is a custom dialogue string",
	},
}
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBXB45BC1BE75494B2CA645E26517CE21E5">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">Barrier</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX7EA9D6DC115D45388F8F99316EA3D260">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">TableMissionSetup</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Value">{&quot;Internals&quot;:[],&quot;SoundTravelDistance&quot;:1,&quot;CustomStrings&quot;:{&quot;Operator.Any.CustomDialogue&quot;:&quot;This is a custom dialogue string&quot;},&quot;Dialogue&quot;:[],&quot;LightingSettings&quot;:&quot;Daytime&quot;,&quot;EnforceClass&quot;:{&quot;Alert1&quot;:{&quot;BasicSecurity&quot;:2},&quot;Alert0&quot;:{&quot;BasicSecurity&quot;:1},&quot;Alert3&quot;:{&quot;BasicSecurity&quot;:5},&quot;Alert2&quot;:{&quot;BasicSecurity&quot;:3},&quot;None&quot;:[]},&quot;Cells&quot;:{&quot;Default&quot;:{&quot;Trespass&quot;:false}},&quot;CameraConfig&quot;:[],&quot;ExtraLoot&quot;:[],&quot;Colors&quot;:[],&quot;Globals&quot;:[],&quot;ClientState&quot;:[],&quot;DebugWatch&quot;:[],&quot;HackingMapIntel&quot;:[],&quot;Objectives&quot;:{&quot;Stealth&quot;:[{&quot;Active&quot;:&quot;1&quot;}],&quot;Combat&quot;:[],&quot;Mission&quot;:[{&quot;Active&quot;:&quot;1&quot;}]}}</string>
						</Properties>
					</Item>
					<Item class="StringValue" referent="RBX6D95D41DDA12424B929DAEBA2169D8B6">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">StringMissionSetup</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Value"><![CDATA[return {
	--AllowedParameters = {},
	--Character = {},
	Globals = {
		
	},
	
	DebugWatch = {
		
	},
	
	Internals = {
		
	},
	
	ClientState = {
		
	},
	
	--[[ForcedLoadout = {
		Guns = {},
		Items = {},
	},
	BlockArmor = true,]]
	
	HackingMapIntel = {
		
	},

	ExtraLoot = {
		
	},

	LightingSettings = "Daytime",
	SoundTravelDistance = 1,
	
	Colors = {
		--Wood = Color3.fromRGB(99, 95, 98),
		--WoodLight = Color3.fromRGB(149, 137, 136),
		--Metal = Color3.fromRGB(105, 106, 113),
	},
	
	CameraConfig = {
		
	},
	
	Cells = {
		Default = {
			Trespass = false,
		},
	},
	
	EnforceClass = {
		None = {}, -- Never sees through disguise
		Alert0 = {
			BasicSecurity = 1, -- Sees through disguise when alert
		},
		Alert1 = {
			BasicSecurity = 2, -- Sees through disguise when normal
		},
		Alert2 = {
			BasicSecurity = 3, -- Sees through disguises when calm / fooled by thespian or on recruit / use infrequently
		},
		Alert3 = {
			BasicSecurity = 5, -- Always sees through disguise
		},
	},
	
	Objectives = {
		Mission = { -- Normal
			{
				Active = "1"
			},
		},
		Stealth = {
			{
				Active = "1"
			},
		},
		Combat = {
			
		},
	},
	
	Dialogue = {
		
	},
	
	CustomStrings = {
		["Operator.Any.CustomDialogue"] = "This is a custom dialogue string",
	},
}
]]></string>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBXBF5733CE0A9B40F48E4EADE91615B54E">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">CustomProps</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBX34B960AB5299442D9BAA18A23E6DB491">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">CustomItems</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
	<SharedStrings>
		<SharedString md5="yuZpQdnvvUBOTYh1jqZ2cA=="></SharedString>
	</SharedStrings>
</roblox>